apiVersion: v1
kind: ComplianceTestSuite
metadata:
  name: ushs-compliance-v1.0
  version: 1.0.0
  description: Universal Self-Healing Standard Compliance Test Suite

# Test categories and requirements for certification levels
certificationLevels:
  bronze:
    description: Basic interface compliance
    requirements:
      - category: core-apis
        tests: ["error-reporting", "session-management", "health-check"]
      - category: data-schemas
        tests: ["error-event-schema", "patch-schema", "session-schema"]
      - category: basic-auth
        tests: ["bearer-token", "api-key"]

  silver:
    description: Full protocol support + security
    extends: bronze
    requirements:
      - category: websocket
        tests: ["ws-connection", "event-streaming", "reconnection"]
      - category: security
        tests: ["tls-version", "auth-required", "rate-limiting"]
      - category: audit
        tests: ["audit-logging", "event-tracking"]

  gold:
    description: Complete implementation + extensions
    extends: silver
    requirements:
      - category: advanced-features
        tests: ["patch-validation", "deployment-strategies", "rollback"]
      - category: performance
        tests: ["response-time", "throughput", "concurrent-sessions"]
      - category: extensions
        tests: ["custom-events", "plugin-support"]

  platinum:
    description: Enterprise features + specialized industry support
    extends: gold
    requirements:
      - category: enterprise
        tests: ["rbac", "sso-integration", "multi-tenancy"]
      - category: compliance
        tests: ["hipaa-controls", "sox-compliance", "data-residency"]
      - category: high-availability
        tests: ["failover", "disaster-recovery", "geo-redundancy"]

# Test definitions
tests:
  # Core API Tests
  - id: error-reporting
    category: core-apis
    name: Error Reporting API
    description: Verify error reporting endpoint functionality
    endpoints:
      - method: POST
        path: /errors
        scenarios:
          - name: Valid error submission
            request:
              body:
                severity: high
                source:
                  service: test-service
                error:
                  type: TestError
                  message: Test error message
            expectedResponse:
              status: 201
              body:
                errorId: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
                sessionId: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"

          - name: Missing required fields
            request:
              body:
                severity: high
            expectedResponse:
              status: 400

  - id: session-management
    category: core-apis
    name: Session Management API
    description: Verify session lifecycle management
    endpoints:
      - method: POST
        path: /sessions
        scenarios:
          - name: Start healing session
            request:
              body:
                errorId: "${ERROR_ID}"
            expectedResponse:
              status: 201
              body:
                id: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
                status: active

      - method: GET
        path: /sessions/${SESSION_ID}
        scenarios:
          - name: Get session details
            expectedResponse:
              status: 200
              body:
                id: "${SESSION_ID}"
                status: "active|completed|failed|cancelled|timeout"

  - id: health-check
    category: core-apis
    name: Health Check API
    description: Verify health check endpoint
    endpoints:
      - method: GET
        path: /health
        scenarios:
          - name: System health check
            expectedResponse:
              status: 200
              body:
                status: "healthy|degraded|unhealthy"
                components: object

  # Schema Validation Tests
  - id: error-event-schema
    category: data-schemas
    name: Error Event Schema Validation
    description: Validate error event conforms to schema
    schemaValidation:
      schema: ../schemas/error-event.json
      samples:
        - valid:
            id: "550e8400-e29b-41d4-a716-446655440000"
            timestamp: "2024-01-15T10:30:00Z"
            severity: critical
            source:
              service: api-gateway
            error:
              type: RuntimeError
              message: Service unavailable
        - invalid:
            severity: unknown  # Invalid enum value

  - id: patch-schema
    category: data-schemas
    name: Healing Patch Schema Validation
    description: Validate patch conforms to schema
    schemaValidation:
      schema: ../schemas/healing-patch.json
      samples:
        - valid:
            id: "650e8400-e29b-41d4-a716-446655440000"
            sessionId: "750e8400-e29b-41d4-a716-446655440000"
            errorId: "550e8400-e29b-41d4-a716-446655440000"
            changes:
              - type: file
                target: /app/service.py
                operation: update
                diff: "..."
            metadata:
              confidence: 0.95
              generator: llm-v1

  # Security Tests
  - id: bearer-token
    category: basic-auth
    name: Bearer Token Authentication
    description: Verify bearer token authentication
    scenarios:
      - name: Valid token
        request:
          headers:
            Authorization: "Bearer ${VALID_TOKEN}"
        endpoint: GET /sessions
        expectedResponse:
          status: 200

      - name: Missing token
        request:
          headers: {}
        endpoint: GET /sessions
        expectedResponse:
          status: 401

      - name: Invalid token
        request:
          headers:
            Authorization: "Bearer invalid-token"
        endpoint: GET /sessions
        expectedResponse:
          status: 401

  - id: tls-version
    category: security
    name: TLS Version Check
    description: Verify TLS 1.3 or higher is required
    tlsTests:
      - version: TLS1.2
        expectedResult: connection_refused
      - version: TLS1.3
        expectedResult: connection_accepted

  - id: rate-limiting
    category: security
    name: Rate Limiting
    description: Verify rate limiting is enforced
    scenarios:
      - name: Burst protection
        requests:
          count: 150
          duration: 1s
          endpoint: GET /health
        expectedResult:
          successCount: 100
          rateLimitedCount: 50
          responseHeader: "X-RateLimit-Remaining"

  # WebSocket Tests
  - id: ws-connection
    category: websocket
    name: WebSocket Connection
    description: Verify WebSocket connection and authentication
    scenarios:
      - name: Successful connection
        url: wss://api.example.com/ushs/v1/ws
        headers:
          Authorization: "Bearer ${VALID_TOKEN}"
        expectedResult: connected
        
      - name: Subscribe to events
        connection: existing
        message:
          command: subscribe
          eventTypes: ["error", "session"]
        expectedResponse:
          type: subscription_confirmed

  - id: event-streaming
    category: websocket
    name: Event Streaming
    description: Verify real-time event delivery
    scenarios:
      - name: Receive error event
        setup:
          - subscribe: ["error"]
          - triggerError: true
        expectedEvent:
          type: org.ushs.error.detected
          dataKeys: ["errorId", "severity", "service"]

  # Performance Tests
  - id: response-time
    category: performance
    name: API Response Time
    description: Verify response time requirements
    requirements:
      - endpoint: GET /health
        maxResponseTime: 100ms
        percentile: p99
      - endpoint: POST /errors
        maxResponseTime: 500ms
        percentile: p95
      - endpoint: GET /sessions
        maxResponseTime: 200ms
        percentile: p95

  - id: throughput
    category: performance
    name: System Throughput
    description: Verify system can handle required load
    loadTests:
      - scenario: Error reporting under load
        virtualUsers: 100
        duration: 5m
        requests:
          - endpoint: POST /errors
            rate: 10/s
        requirements:
          successRate: ">99%"
          errorRate: "<1%"
          p95ResponseTime: "<1s"

  # Compliance Tests
  - id: audit-logging
    category: audit
    name: Audit Logging
    description: Verify all actions are logged
    scenarios:
      - name: Error report audit
        action: POST /errors
        verifyLog:
          fields: ["timestamp", "actor", "action", "resource", "outcome"]
          retention: 90days

  - id: hipaa-controls
    category: compliance
    name: HIPAA Compliance Controls
    description: Verify HIPAA-required controls
    requirements:
      - encryption: AES-256
      - accessControl: role-based
      - auditLogging: enabled
      - dataRetention: configurable
      - piiHandling: scrubbed

# Test execution configuration
execution:
  environment:
    variables:
      - name: API_BASE_URL
        description: Base URL for API tests
        required: true
      - name: WS_BASE_URL
        description: Base URL for WebSocket tests
        required: true
      - name: VALID_TOKEN
        description: Valid authentication token
        required: true
      - name: API_KEY
        description: Valid API key
        required: false

  setup:
    - name: Verify connectivity
      action: GET ${API_BASE_URL}/health
      expectStatus: 200

  teardown:
    - name: Cleanup test data
      action: custom:cleanup

  reporting:
    formats: ["json", "junit", "html"]
    outputDir: ./compliance-results