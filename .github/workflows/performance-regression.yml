name: Performance Regression Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      update_baseline:
        description: 'Update performance baselines'
        required: false
        default: 'false'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  performance-regression:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Need full history for git commit info
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libldap2-dev libsasl2-dev

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install psutil pytest-benchmark

    - name: Clear HuggingFace cache
      run: |
        rm -rf ~/.cache/huggingface
        rm -rf ~/.cache/torch
      continue-on-error: true

    - name: Download performance baselines
      uses: actions/download-artifact@v4
      with:
        name: performance-baselines-py${{ matrix.python-version }}
        path: .
      continue-on-error: true
    
    - name: Run performance regression tests
      env:
        UPDATE_PERFORMANCE_BASELINE: ${{ github.event.inputs.update_baseline || 'false' }}
        PYTHONPATH: ${{ github.workspace }}
        USE_MOCK_TESTS: true
        DISABLE_PERFORMANCE_TRACKING: true
      run: |
        python -m pytest tests/test_performance_regression.py -v -s --tb=short
    
    - name: Upload performance results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-results-py${{ matrix.python-version }}
        path: |
          performance_baselines.db
          performance_report.json
    
    - name: Upload performance baselines
      if: github.event.inputs.update_baseline == 'true' || github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: performance-baselines-py${{ matrix.python-version }}
        path: performance_baselines.db
    
    - name: Comment PR with performance results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read performance results if available
          const reportPath = path.join(process.env.GITHUB_WORKSPACE, 'performance_report.json');
          if (fs.existsSync(reportPath)) {
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            
            let comment = '## Performance Regression Test Results\n\n';
            comment += `Python ${process.env.pythonLocation}\n\n`;
            
            if (report.regressions && report.regressions.length > 0) {
              comment += '**Performance Regressions Detected:**\n\n';
              comment += '| Test | Metric | Baseline | Current | Factor |\n';
              comment += '|------|--------|----------|---------|--------|\n';
              
              report.regressions.forEach(reg => {
                comment += `| ${reg.test_name} | ${reg.metric_type} | ${reg.baseline_value.toFixed(3)} | ${reg.current_value.toFixed(3)} | ${reg.regression_factor.toFixed(2)}x |\n`;
              });
            } else {
              comment += '**No performance regressions detected!**\n';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  benchmark-comparison:
    runs-on: ubuntu-22.04
    needs: performance-regression
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download current results
      uses: actions/download-artifact@v4
      with:
        name: performance-results-py3.10
        path: current
    
    - name: Checkout base branch
      run: |
        git fetch origin ${{ github.base_ref }}
        git checkout origin/${{ github.base_ref }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install psutil pytest-benchmark
    
    - name: Run baseline performance tests
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        python -m pytest tests/test_performance_regression.py -v -s --tb=short || true
      continue-on-error: true
    
    - name: Generate comparison report
      run: |
        python scripts/compare_performance.py \
          --baseline performance_baselines.db \
          --current current/performance_baselines.db \
          --output performance_comparison.md
      continue-on-error: true
    
    - name: Comment PR with comparison
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const comparisonPath = path.join(process.env.GITHUB_WORKSPACE, 'performance_comparison.md');
          if (fs.existsSync(comparisonPath)) {
            const comparison = fs.readFileSync(comparisonPath, 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comparison
            });
          }