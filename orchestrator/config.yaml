# Homeostasis Orchestrator Configuration

# General settings
general:
  project_root: "." # Relative to where the orchestrator is run from
  log_level: "INFO"
  environment: "development" # "development", "staging", or "production"

# Service settings
service:
  name: "example_service"
  path: "services/example_service"
  start_command: "uvicorn app:app --reload --port 8000"
  stop_command: "kill -9 $(lsof -ti:8000)" # Unix-specific, will need adjustment for Windows
  health_check_url: "http://localhost:8000/health"
  health_check_timeout: 5 # seconds
  log_file: "logs/homeostasis.log"

# Monitoring settings
monitoring:
  enabled: true
  log_level: "INFO"
  watch_patterns:
    - "*.log"
    - "logs/*.log"
  check_interval: 5 # seconds
  post_deployment:
    enabled: true
    check_interval: 60 # seconds after deployment to monitor for issues
    metrics:
      - "response_time"
      - "error_rate"
      - "memory_usage"
    alert_thresholds:
      error_rate: 0.05 # 5% error rate
      response_time: 500 # 500ms
      memory_usage: 512 # 512MB

# Analysis settings
analysis:
  rule_based:
    enabled: true
  ai_based:
    enabled: false # Set to true to enable AI-based analysis (currently a stub)

# Patch generation settings
patch_generation:
  templates_dir: "modules/patch_generation/templates"
  generated_patches_dir: "logs/patches"
  backup_original_files: true

# Testing settings
testing:
  enabled: true
  test_command: "pytest tests/"
  test_timeout: 30 # seconds
  parallel:
    enabled: true
    max_workers: 4
  containers:
    enabled: true
    use_cache: true
    resource_limits:
      cpu: "1.0" # CPU cores
      memory: "1g" # Memory limit
  graduated_testing:
    enabled: true
    levels:
      - "unit"
      - "integration"
      - "system"
    commands:
      unit: "pytest tests/ -m unit -v"
      integration: "pytest tests/ -m integration -v"
      system: "pytest tests/ -m system -v"
    timeouts:
      unit: 30
      integration: 60
      system: 120
    resource_limits:
      unit:
        cpu: "0.5"
        memory: "512m"
      integration:
        cpu: "1.0"
        memory: "1g"
      system:
        cpu: "2.0"
        memory: "2g"
  regression:
    enabled: true
    # Generate regression tests for fixed errors
    generate_test_cases: true
    save_path: "tests/generated"
  metrics:
    enabled: true
    collect:
      - "test_duration"
      - "memory_usage"
      - "success_rate"
    store_history: true
    history_limit: 100 # Number of test runs to keep

# Deployment settings
deployment:
  enabled: true
  restart_service: true
  backup_before_deployment: true
  backup_dir: "logs/backups"
  
# Rollback settings
rollback:
  enabled: true
  auto_rollback_on_failure: true
  max_sessions_to_keep: 10  # Maximum number of rollback sessions to keep

# Known bugs (for demonstration)
known_bugs:
  - id: "bug_1"
    description: "Missing error handling for non-existent IDs"
    file: "services/example_service/app.py"
    confidence: "high"
  - id: "bug_2"
    description: "Missing field initialization"
    file: "services/example_service/app.py"
    confidence: "high"
  - id: "bug_3"
    description: "Incorrect dict parameter"
    file: "services/example_service/app.py"
    confidence: "high"
  - id: "bug_4"
    description: "Unsafe list slicing"
    file: "services/example_service/app.py"
    confidence: "high"
  - id: "bug_5"
    description: "Unsafe environment variable conversion"
    file: "services/example_service/app.py"
    confidence: "high"