{
  "python": {
    "language": "python",
    "field_mappings": {
      "error_type": ["exception_type", "type"],
      "message": "message",
      "stack_trace": ["traceback", "stack_trace"]
    },
    "stack_trace_fields": ["traceback", "stack_trace"],
    "stack_trace_format": "list",
    "version_fields": ["python_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:Traceback \\(most recent call last\\):)",
      "(?:File \"[^\"]+\", line \\d+, in [^\\n]+)",
      "(?:\\w+Error:|\\w+Exception:)"
    ],
    "severity_mappings": {
      "debug": "DEBUG",
      "info": "INFO",
      "warning": "WARNING",
      "error": "ERROR",
      "critical": "CRITICAL",
      "fatal": "FATAL"
    }
  },
  "javascript": {
    "language": "javascript",
    "field_mappings": {
      "error_type": ["name", "type"],
      "message": "message",
      "stack_trace": ["stack", "stacktrace", "stack_trace"]
    },
    "stack_trace_fields": ["stack", "stacktrace", "stack_trace"],
    "stack_trace_format": "string",
    "version_fields": ["node_version", "js_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:at \\w+ \\([^)]+\\))",
      "(?:TypeError|ReferenceError|SyntaxError):"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "error": "error",
      "critical": "error",
      "fatal": "fatal"
    }
  },
  "java": {
    "language": "java",
    "field_mappings": {
      "error_type": ["exception_class", "exception_type", "type"],
      "message": "message",
      "stack_trace": ["stack_trace", "stacktrace"]
    },
    "stack_trace_fields": ["stack_trace", "stacktrace"],
    "stack_trace_format": "string",
    "version_fields": ["java_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:java\\.\\w+\\.\\w+Exception:)",
      "(?:at [\\w\\.$]+\\([^)]+\\.java:\\d+\\))",
      "(?:Caused by:)"
    ],
    "severity_mappings": {
      "debug": "fine",
      "info": "info",
      "warning": "warning",
      "error": "severe",
      "critical": "severe",
      "fatal": "severe"
    }
  },
  "go": {
    "language": "go",
    "field_mappings": {
      "error_type": ["error_type", "type"],
      "message": "message",
      "stack_trace": ["stack_trace", "stacktrace"]
    },
    "stack_trace_fields": ["stack_trace", "stacktrace"],
    "stack_trace_format": "string",
    "version_fields": ["go_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:goroutine \\d+ \\[[^\\]]+\\]:)",
      "(?:panic:)",
      "(?:\\s+at .+\\.go:\\d+)"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "error": "error",
      "critical": "panic",
      "fatal": "fatal"
    }
  },
  "csharp": {
    "language": "csharp",
    "field_mappings": {
      "error_type": ["exception_type", "type"],
      "message": "message",
      "stack_trace": ["stack_trace", "stacktrace"]
    },
    "stack_trace_fields": ["stack_trace", "stacktrace"],
    "stack_trace_format": "string",
    "version_fields": ["csharp_version", "dotnet_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:System\\.\\w+Exception:)",
      "(?:at [\\w\\.]+ in [^:]+:\\d+)"
    ],
    "severity_mappings": {
      "debug": "Debug",
      "info": "Information",
      "warning": "Warning",
      "error": "Error",
      "critical": "Critical",
      "fatal": "Fatal"
    }
  },
  "ruby": {
    "language": "ruby",
    "field_mappings": {
      "error_type": ["exception_class", "type"],
      "message": "message",
      "stack_trace": ["backtrace", "stack_trace"]
    },
    "stack_trace_fields": ["backtrace", "stack_trace"],
    "stack_trace_format": "list",
    "version_fields": ["ruby_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:\\w+Error:)",
      "(?:from [^:]+:\\d+:in `.+')"
    ],
    "severity_mappings": {
      "debug": "DEBUG",
      "info": "INFO",
      "warning": "WARN",
      "error": "ERROR",
      "critical": "FATAL",
      "fatal": "FATAL"
    }
  },
  "rust": {
    "language": "rust",
    "field_mappings": {
      "error_type": ["error_type", "type"],
      "message": "message",
      "stack_trace": ["backtrace", "stack_trace"]
    },
    "stack_trace_fields": ["backtrace", "stack_trace"],
    "stack_trace_format": "list",
    "version_fields": ["rust_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:thread '.*' panicked at '.*')",
      "(?:\\d+: .*\\s+at .*\\.rs:\\d+)",
      "(?:error\\[E\\d+\\]:)"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "error": "error",
      "critical": "error",
      "fatal": "fatal"
    }
  },
  "php": {
    "language": "php",
    "field_mappings": {
      "error_type": ["type", "error_type", "class"],
      "message": "message",
      "stack_trace": ["trace", "backtrace", "stack_trace"]
    },
    "stack_trace_fields": ["trace", "backtrace", "stack_trace"],
    "stack_trace_format": "list",
    "version_fields": ["php_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:PHP (Notice|Warning|Error|Fatal error|Parse error):)",
      "(?:Stack trace:)",
      "(?:#\\d+ [^:]+:\\d+)",
      "(?:Call to undefined (method|function))",
      "(?:Uncaught (\\w+Exception|Error):)"
    ],
    "severity_mappings": {
      "debug": "E_NOTICE",
      "info": "E_NOTICE",
      "warning": "E_WARNING",
      "error": "E_ERROR",
      "critical": "E_CORE_ERROR",
      "fatal": "E_CORE_ERROR"
    }
  },
  "scala": {
    "language": "scala",
    "field_mappings": {
      "error_type": ["exception_class", "exception_type", "type", "error_type"],
      "message": "message",
      "stack_trace": ["stack_trace", "stacktrace"]
    },
    "stack_trace_fields": ["stack_trace", "stacktrace"],
    "stack_trace_format": "string",
    "version_fields": ["scala_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:scala\\.\\w+\\.\\w+Exception:)",
      "(?:java\\.\\w+\\.\\w+Exception:)",
      "(?:at [\\w\\.$]+\\([^)]+\\.scala:\\d+\\))",
      "(?:at \\$(line\\d+)\\$.*)",
      "(?:scala\\.MatchError:)",
      "(?:akka\\.\\w+\\.\\w+Exception:)"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "error": "error",
      "critical": "critical",
      "fatal": "fatal"
    }
  },
  "elixir": {
    "language": "elixir",
    "field_mappings": {
      "error_type": ["exception", "exception_type", "type", "error_type"],
      "message": "message",
      "stack_trace": ["stacktrace", "stack_trace"]
    },
    "stack_trace_fields": ["stacktrace", "stack_trace"],
    "stack_trace_format": "list",
    "version_fields": ["elixir_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:\\*\\* \\(\\w+(?:\\.\\w+)*(?:Error|Exception)\\) )",
      "(?:\\(\\w+(?:\\.\\w+)*(?:Error|Exception)\\) )",
      "(?:\\(FunctionClauseError\\) )",
      "(?:\\(RuntimeError\\) )",
      "(?:\\(Phoenix\\.[^)]+Error\\) )",
      "(?:\\(Ecto\\.[^)]+Error\\) )",
      "(?:[^\\(]+\\.ex:\\d+: )",
      "(?:    \\(\\w+(?:\\.\\w+)*\\) [^:]+:\\d+: [^\\(]+\\(\\))"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "error": "error",
      "critical": "critical",
      "fatal": "fatal"
    }
  },
  "clojure": {
    "language": "clojure",
    "field_mappings": {
      "error_type": ["exception_class", "exception_type", "type", "error_type"],
      "message": "message",
      "stack_trace": ["stack_trace", "stacktrace"]
    },
    "stack_trace_fields": ["stack_trace", "stacktrace"],
    "stack_trace_format": "string",
    "version_fields": ["clojure_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:clojure\\.\\w+\\.\\w+Exception:)",
      "(?:java\\.\\w+\\.\\w+Exception:)",
      "(?:at [\\w\\.$-]+\\([^)]+\\.clj:\\d+\\))",
      "(?:at [\\w\\.$-]+\\(REPL:\\d+\\))",
      "(?:clojure\\.lang\\.\\w+Exception:)",
      "(?:CompilerException java\\.\\w+)",
      "(?:ArityException Wrong number of args)",
      "(?:IllegalArgumentException)",
      "(?:NullPointerException)",
      "(?:ClassCastException)",
      "(?:UnsupportedOperationException)",
      "(?:\\$fn__\\d+\\.invoke)",
      "(?:RuntimeException)"
    ],
    "severity_mappings": {
      "trace": "debug",
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "warn": "warn",
      "error": "error",
      "critical": "error",
      "fatal": "fatal"
    }
  },
  "typescript": {
    "language": "typescript",
    "field_mappings": {
      "error_type": ["name", "type", "code"],
      "message": "message",
      "stack_trace": ["stack", "stacktrace", "stack_trace"]
    },
    "stack_trace_fields": ["stack", "stacktrace", "stack_trace"],
    "stack_trace_format": "string",
    "version_fields": ["typescript_version", "ts_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:TS\\d+:)",
      "(?:error TS\\d+:)",
      "(?:TypeScript compilation error)",
      "(?:tsc \\(\\d+,\\d+\\):)",
      "(?:at.*\\.ts:\\d+:\\d+)",
      "(?:Type '.*' is not assignable to type)",
      "(?:Cannot find name '.*')",
      "(?:Property '.*' does not exist on type)",
      "(?:Cannot find module '.*')"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warning",
      "error": "error",
      "critical": "error",
      "fatal": "fatal"
    },
    "compiler_options": {
      "strict": true,
      "noImplicitAny": true,
      "strictNullChecks": true,
      "strictFunctionTypes": true,
      "noImplicitReturns": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false
    },
    "file_extensions": [".ts", ".tsx", ".d.ts"],
    "config_files": ["tsconfig.json", "jsconfig.json"]
  },
  "react": {
    "language": "react",
    "field_mappings": {
      "error_type": ["name", "type"],
      "message": "message",
      "stack_trace": ["stack", "stacktrace", "stack_trace"],
      "component_stack": ["componentStack", "component_stack"]
    },
    "stack_trace_fields": ["stack", "stacktrace", "stack_trace"],
    "stack_trace_format": "string",
    "version_fields": ["react_version", "framework_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version", "react_version"],
    "detection_patterns": [
      "(?:Invalid hook call)",
      "(?:Hooks can only be called)",
      "(?:React Hook .* has a missing dependency)",
      "(?:exhaustive-deps)",
      "(?:Each child in a list should have a unique \"key\" prop)",
      "(?:'React' must be in scope when using JSX)",
      "(?:Objects are not valid as a React child)",
      "(?:Functions are not valid as a React child)",
      "(?:Cannot read .* of undefined.*setState)",
      "(?:useContext must be used within.*Provider)",
      "(?:at.*\\.(jsx|tsx):\\d+:\\d+)",
      "(?:in (\\w+) \\(at [^)]+\\.(jsx|tsx):\\d+:\\d+\\))",
      "(?:React.*component)",
      "(?:Component.*React)",
      "(?:JSX element)",
      "(?:redux.*store)",
      "(?:dispatch.*action)",
      "(?:unnecessary re-renders)",
      "(?:hydration.*mismatch)",
      "(?:server.*component)",
      "(?:client.*code.*server)",
      "(?:use client)",
      "(?:use server)"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "error": "error",
      "critical": "error",
      "fatal": "fatal"
    },
    "component_stack_patterns": [
      "(?:in (\\w+) \\(at [^)]+\\.(jsx|tsx):\\d+:\\d+\\))",
      "(?:at (\\w+) \\([^)]+\\))"
    ],
    "file_extensions": [".jsx", ".tsx", ".js", ".ts"],
    "config_files": ["package.json", "vite.config.js", "webpack.config.js", "next.config.js"],
    "hooks": [
      "useState", "useEffect", "useContext", "useReducer", "useCallback", 
      "useMemo", "useRef", "useImperativeHandle", "useLayoutEffect", 
      "useDebugValue", "useDeferredValue", "useTransition", "useId",
      "useSyncExternalStore", "useInsertionEffect"
    ],
    "lifecycle_methods": [
      "componentDidMount", "componentDidUpdate", "componentWillUnmount",
      "shouldComponentUpdate", "getSnapshotBeforeUpdate", "componentDidCatch",
      "getDerivedStateFromProps", "getDerivedStateFromError"
    ],
    "react_patterns": {
      "hooks_rules": {
        "only_in_function_components": true,
        "call_at_top_level": true,
        "no_conditional_calls": true,
        "no_loop_calls": true,
        "exhaustive_dependencies": true
      },
      "jsx_rules": {
        "require_react_import": false,
        "require_key_props": true,
        "no_invalid_children": true,
        "proper_event_handlers": true
      },
      "performance_rules": {
        "avoid_inline_objects": true,
        "use_memo_for_expensive_calculations": true,
        "virtualize_large_lists": true,
        "code_splitting": true
      }
    }
  },
  "vue": {
    "language": "vue",
    "field_mappings": {
      "error_type": ["name", "type"],
      "message": "message",
      "stack_trace": ["stack", "stacktrace", "stack_trace"],
      "component_stack": ["componentStack", "component_stack"]
    },
    "stack_trace_fields": ["stack", "stacktrace", "stack_trace"],
    "stack_trace_format": "string",
    "version_fields": ["vue_version", "framework_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version", "vue_version"],
    "detection_patterns": [
      "(?:Vue warn)",
      "(?:Vue.*component)",
      "(?:setup\\(\\) function)",
      "(?:ref\\(\\) is not defined)",
      "(?:computed\\(\\) is not defined)",
      "(?:watch\\(\\) is not defined)",
      "(?:onMounted is not defined)",
      "(?:reactive\\(\\) is not defined)",
      "(?:Vuex.*store)",
      "(?:Vue.*router)",
      "(?:\\.vue:\\d+:\\d+)",
      "(?:v-model)",
      "(?:v-if|v-for|v-show)",
      "(?:directive.*vue)",
      "(?:vue.*directive)",
      "(?:composition.*api)",
      "(?:setup must return)",
      "(?:cannot access.*before initialization)",
      "(?:mutation.*not defined)",
      "(?:action.*not defined)",
      "(?:route.*not found)",
      "(?:navigation.*cancelled)",
      "(?:router.*not defined)",
      "(?:store.*not defined)",
      "(?:do not mutate vuex store state)",
      "(?:Invalid prop)",
      "(?:Failed to mount component)",
      "(?:Template compilation error)",
      "(?:Hydration.*mismatch)"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "error": "error",
      "critical": "error",
      "fatal": "fatal"
    },
    "component_stack_patterns": [
      "(?:at <(\\w+)>)",
      "(?:in (\\w+) \\(at [^)]+\\.(vue|js|ts):\\d+:\\d+\\))"
    ],
    "file_extensions": [".vue", ".js", ".ts"],
    "config_files": ["package.json", "vue.config.js", "vite.config.js", "nuxt.config.js"],
    "composition_api_functions": [
      "ref", "computed", "watch", "watchEffect", "reactive", "readonly", "toRef", "toRefs",
      "onMounted", "onUpdated", "onUnmounted", "onBeforeMount", "onBeforeUpdate", "onBeforeUnmount",
      "onActivated", "onDeactivated", "onErrorCaptured", "onRenderTracked", "onRenderTriggered",
      "provide", "inject", "getCurrentInstance", "nextTick", "defineComponent", "defineAsyncComponent"
    ],
    "vuex_functions": [
      "createStore", "useStore", "mapState", "mapGetters", "mapMutations", "mapActions",
      "createNamespacedHelpers", "commit", "dispatch"
    ],
    "vue_router_functions": [
      "createRouter", "createWebHistory", "createWebHashHistory", "createMemoryHistory",
      "useRouter", "useRoute", "onBeforeRouteEnter", "onBeforeRouteUpdate", "onBeforeRouteLeave"
    ],
    "directives": [
      "v-model", "v-if", "v-else", "v-else-if", "v-for", "v-show", "v-bind", "v-on",
      "v-slot", "v-pre", "v-cloak", "v-once", "v-text", "v-html", "v-memo"
    ],
    "vue_patterns": {
      "composition_api_rules": {
        "import_from_vue": true,
        "call_in_setup": true,
        "return_from_setup": true,
        "proper_reactivity": true
      },
      "template_rules": {
        "proper_directive_syntax": true,
        "key_in_v_for": true,
        "avoid_v_if_with_v_for": true,
        "proper_event_handlers": true
      },
      "vuex_rules": {
        "no_direct_mutation": true,
        "use_mutations_for_state": true,
        "async_in_actions": true,
        "proper_module_structure": true
      },
      "performance_rules": {
        "use_v_show_for_toggle": true,
        "avoid_inline_objects_in_template": true,
        "use_computed_for_complex_logic": true,
        "proper_component_splitting": true
      }
    }
  },
  "angular": {
    "language": "angular",
    "field_mappings": {
      "error_type": ["name", "type"],
      "message": "message",
      "stack_trace": ["stack", "stacktrace", "stack_trace"],
      "component_stack": ["componentStack", "component_stack"]
    },
    "stack_trace_fields": ["stack", "stacktrace", "stack_trace"],
    "stack_trace_format": "string",
    "version_fields": ["angular_version", "framework_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version", "angular_version"],
    "detection_patterns": [
      "(?:Angular warn)",
      "(?:@angular)",
      "(?:ng\\s)",
      "(?:dependency injection)",
      "(?:No provider for)",
      "(?:InjectionToken)",
      "(?:circular dependency)",
      "(?:cannot resolve all parameters)",
      "(?:NgRx)",
      "(?:@ngrx)",
      "(?:@Component)",
      "(?:@Injectable)",
      "(?:@NgModule)",
      "(?:@Input)",
      "(?:@Output)",
      "(?:Cannot bind to)",
      "(?:is not a known element)",
      "(?:is not a known property)",
      "(?:Expression has changed after)",
      "(?:angular\\.core)",
      "(?:platformBrowserDynamic)",
      "(?:Component.*angular)",
      "(?:template.*angular)",
      "(?:at.*\\.component\\.ts:\\d+:\\d+)",
      "(?:at.*\\.service\\.ts:\\d+:\\d+)",
      "(?:at.*\\.module\\.ts:\\d+:\\d+)",
      "(?:injector.*error)",
      "(?:Action must have a type)",
      "(?:Store has not been provided)",
      "(?:Reducer returned undefined)",
      "(?:Selector function cannot return)",
      "(?:Effects must be an array)"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "error": "error",
      "critical": "error",
      "fatal": "fatal"
    },
    "component_stack_patterns": [
      "(?:at (\\w+Component) \\([^)]+\\.(ts|js):\\d+:\\d+\\))",
      "(?:in (\\w+) \\(at [^)]+\\.(ts|js):\\d+:\\d+\\))"
    ],
    "file_extensions": [".ts", ".js", ".html"],
    "config_files": ["angular.json", "package.json", "tsconfig.json", "nx.json"],
    "decorators": [
      "@Component", "@Injectable", "@NgModule", "@Input", "@Output", 
      "@ViewChild", "@ViewChildren", "@ContentChild", "@ContentChildren",
      "@HostBinding", "@HostListener", "@Inject", "@Optional", "@Self",
      "@SkipSelf", "@Host", "@Attribute", "@Pipe", "@Directive"
    ],
    "lifecycle_hooks": [
      "ngOnInit", "ngOnDestroy", "ngOnChanges", "ngDoCheck", "ngAfterViewInit",
      "ngAfterViewChecked", "ngAfterContentInit", "ngAfterContentChecked"
    ],
    "ngrx_functions": [
      "createAction", "createReducer", "createSelector", "createEffect",
      "StoreModule.forRoot", "StoreModule.forFeature", "EffectsModule.forRoot",
      "EffectsModule.forFeature", "select", "dispatch"
    ],
    "dependency_injection_tokens": [
      "InjectionToken", "DOCUMENT", "WINDOW", "LOCALE_ID", "PLATFORM_ID",
      "APP_BOOTSTRAP_LISTENER", "APP_INITIALIZER", "ANALYZE_FOR_ENTRY_COMPONENTS"
    ],
    "angular_patterns": {
      "dependency_injection_rules": {
        "require_injectable_decorator": true,
        "provide_dependencies": true,
        "avoid_circular_dependencies": true,
        "use_injection_tokens": true
      },
      "template_rules": {
        "safe_navigation": true,
        "proper_property_binding": true,
        "known_elements_only": true,
        "known_properties_only": true
      },
      "ngrx_rules": {
        "actions_must_have_type": true,
        "reducers_must_return_state": true,
        "effects_return_actions": true,
        "immutable_state_updates": true
      },
      "performance_rules": {
        "onpush_change_detection": true,
        "lazy_loading_modules": true,
        "trackby_functions": true,
        "avoid_function_calls_in_templates": true
      }
    }
  }
}