{
  "python": {
    "language": "python",
    "field_mappings": {
      "error_type": ["exception_type", "type"],
      "message": "message",
      "stack_trace": ["traceback", "stack_trace"]
    },
    "stack_trace_fields": ["traceback", "stack_trace"],
    "stack_trace_format": "list",
    "version_fields": ["python_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:Traceback \\(most recent call last\\):)",
      "(?:File \"[^\"]+\", line \\d+, in [^\\n]+)",
      "(?:\\w+Error:|\\w+Exception:)"
    ],
    "severity_mappings": {
      "debug": "DEBUG",
      "info": "INFO",
      "warning": "WARNING",
      "error": "ERROR",
      "critical": "CRITICAL",
      "fatal": "FATAL"
    }
  },
  "javascript": {
    "language": "javascript",
    "field_mappings": {
      "error_type": ["name", "type"],
      "message": "message",
      "stack_trace": ["stack", "stacktrace", "stack_trace"]
    },
    "stack_trace_fields": ["stack", "stacktrace", "stack_trace"],
    "stack_trace_format": "string",
    "version_fields": ["node_version", "js_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:at \\w+ \\([^)]+\\))",
      "(?:TypeError|ReferenceError|SyntaxError):"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "error": "error",
      "critical": "error",
      "fatal": "fatal"
    }
  },
  "java": {
    "language": "java",
    "field_mappings": {
      "error_type": ["exception_class", "exception_type", "type"],
      "message": "message",
      "stack_trace": ["stack_trace", "stacktrace"]
    },
    "stack_trace_fields": ["stack_trace", "stacktrace"],
    "stack_trace_format": "string",
    "version_fields": ["java_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:java\\.\\w+\\.\\w+Exception:)",
      "(?:at [\\w\\.$]+\\([^)]+\\.java:\\d+\\))",
      "(?:Caused by:)",
      "(?:android\\.\\w+\\.\\w+Exception:)",
      "(?:at android\\.[\\w\\.$]+\\([^)]+\\))",
      "(?:ActivityNotFoundException)",
      "(?:NetworkOnMainThreadException)",
      "(?:CalledFromWrongThreadException)",
      "(?:Fragment.*not attached)",
      "(?:BadTokenException)",
      "(?:Permission.*denied)",
      "(?:kotlinx?\\.)",
      "(?:KotlinNullPointerException)"
    ],
    "severity_mappings": {
      "debug": "fine",
      "info": "info",
      "warning": "warning",
      "error": "severe",
      "critical": "severe",
      "fatal": "severe"
    },
    "platform_detection": {
      "android": ["android", "androidx", "Activity", "Fragment", "Service"],
      "jvm": ["java", "jvm", "javax"],
      "kotlin_interop": ["kotlin", "KotlinNullPointerException", "Companion"]
    },
    "frameworks": [
      "spring", "jakarta", "hibernate", "android", "kotlin-interop", "base"
    ],
    "android_patterns": {
      "lifecycle_rules": {
        "check_activity_state": true,
        "handle_fragment_detachment": true,
        "proper_service_lifecycle": true,
        "background_execution_limits": true
      },
      "threading_rules": {
        "ui_thread_operations": true,
        "background_network_operations": true,
        "avoid_blocking_main_thread": true
      },
      "permission_rules": {
        "runtime_permission_requests": true,
        "manifest_declarations": true,
        "permission_result_handling": true
      },
      "interop_rules": {
        "kotlin_null_safety": true,
        "companion_object_access": true,
        "data_class_usage": true,
        "suspend_function_handling": true
      }
    }
  },
  "go": {
    "language": "go",
    "field_mappings": {
      "error_type": ["error_type", "type"],
      "message": "message",
      "stack_trace": ["stack_trace", "stacktrace"]
    },
    "stack_trace_fields": ["stack_trace", "stacktrace"],
    "stack_trace_format": "string",
    "version_fields": ["go_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:goroutine \\d+ \\[[^\\]]+\\]:)",
      "(?:panic:)",
      "(?:\\s+at .+\\.go:\\d+)"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "error": "error",
      "critical": "panic",
      "fatal": "fatal"
    }
  },
  "csharp": {
    "language": "csharp",
    "field_mappings": {
      "error_type": ["exception_type", "type"],
      "message": "message",
      "stack_trace": ["stack_trace", "stacktrace"]
    },
    "stack_trace_fields": ["stack_trace", "stacktrace"],
    "stack_trace_format": "string",
    "version_fields": ["csharp_version", "dotnet_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:System\\.\\w+Exception:)",
      "(?:at [\\w\\.]+ in [^:]+:\\d+)"
    ],
    "severity_mappings": {
      "debug": "Debug",
      "info": "Information",
      "warning": "Warning",
      "error": "Error",
      "critical": "Critical",
      "fatal": "Fatal"
    }
  },
  "ruby": {
    "language": "ruby",
    "field_mappings": {
      "error_type": ["exception_class", "type"],
      "message": "message",
      "stack_trace": ["backtrace", "stack_trace"]
    },
    "stack_trace_fields": ["backtrace", "stack_trace"],
    "stack_trace_format": "list",
    "version_fields": ["ruby_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:\\w+Error:)",
      "(?:from [^:]+:\\d+:in `.+')"
    ],
    "severity_mappings": {
      "debug": "DEBUG",
      "info": "INFO",
      "warning": "WARN",
      "error": "ERROR",
      "critical": "FATAL",
      "fatal": "FATAL"
    }
  },
  "rust": {
    "language": "rust",
    "field_mappings": {
      "error_type": ["error_type", "type"],
      "message": "message",
      "stack_trace": ["backtrace", "stack_trace"]
    },
    "stack_trace_fields": ["backtrace", "stack_trace"],
    "stack_trace_format": "list",
    "version_fields": ["rust_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:thread '.*' panicked at '.*')",
      "(?:\\d+: .*\\s+at .*\\.rs:\\d+)",
      "(?:error\\[E\\d+\\]:)"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "error": "error",
      "critical": "error",
      "fatal": "fatal"
    }
  },
  "php": {
    "language": "php",
    "field_mappings": {
      "error_type": ["type", "error_type", "class"],
      "message": "message",
      "stack_trace": ["trace", "backtrace", "stack_trace"]
    },
    "stack_trace_fields": ["trace", "backtrace", "stack_trace"],
    "stack_trace_format": "list",
    "version_fields": ["php_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:PHP (Notice|Warning|Error|Fatal error|Parse error):)",
      "(?:Stack trace:)",
      "(?:#\\d+ [^:]+:\\d+)",
      "(?:Call to undefined (method|function))",
      "(?:Uncaught (\\w+Exception|Error):)"
    ],
    "severity_mappings": {
      "debug": "E_NOTICE",
      "info": "E_NOTICE",
      "warning": "E_WARNING",
      "error": "E_ERROR",
      "critical": "E_CORE_ERROR",
      "fatal": "E_CORE_ERROR"
    }
  },
  "scala": {
    "language": "scala",
    "field_mappings": {
      "error_type": ["exception_class", "exception_type", "type", "error_type"],
      "message": "message",
      "stack_trace": ["stack_trace", "stacktrace"]
    },
    "stack_trace_fields": ["stack_trace", "stacktrace"],
    "stack_trace_format": "string",
    "version_fields": ["scala_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:scala\\.\\w+\\.\\w+Exception:)",
      "(?:java\\.\\w+\\.\\w+Exception:)",
      "(?:at [\\w\\.$]+\\([^)]+\\.scala:\\d+\\))",
      "(?:at \\$(line\\d+)\\$.*)",
      "(?:scala\\.MatchError:)",
      "(?:akka\\.\\w+\\.\\w+Exception:)"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "error": "error",
      "critical": "critical",
      "fatal": "fatal"
    }
  },
  "elixir": {
    "language": "elixir",
    "field_mappings": {
      "error_type": ["exception", "exception_type", "type", "error_type"],
      "message": "message",
      "stack_trace": ["stacktrace", "stack_trace"]
    },
    "stack_trace_fields": ["stacktrace", "stack_trace"],
    "stack_trace_format": "list",
    "version_fields": ["elixir_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:\\*\\* \\(\\w+(?:\\.\\w+)*(?:Error|Exception)\\) )",
      "(?:\\(\\w+(?:\\.\\w+)*(?:Error|Exception)\\) )",
      "(?:\\(FunctionClauseError\\) )",
      "(?:\\(RuntimeError\\) )",
      "(?:\\(Phoenix\\.[^)]+Error\\) )",
      "(?:\\(Ecto\\.[^)]+Error\\) )",
      "(?:[^\\(]+\\.ex:\\d+: )",
      "(?:    \\(\\w+(?:\\.\\w+)*\\) [^:]+:\\d+: [^\\(]+\\(\\))"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "error": "error",
      "critical": "critical",
      "fatal": "fatal"
    }
  },
  "clojure": {
    "language": "clojure",
    "field_mappings": {
      "error_type": ["exception_class", "exception_type", "type", "error_type"],
      "message": "message",
      "stack_trace": ["stack_trace", "stacktrace"]
    },
    "stack_trace_fields": ["stack_trace", "stacktrace"],
    "stack_trace_format": "string",
    "version_fields": ["clojure_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:clojure\\.\\w+\\.\\w+Exception:)",
      "(?:java\\.\\w+\\.\\w+Exception:)",
      "(?:at [\\w\\.$-]+\\([^)]+\\.clj:\\d+\\))",
      "(?:at [\\w\\.$-]+\\(REPL:\\d+\\))",
      "(?:clojure\\.lang\\.\\w+Exception:)",
      "(?:CompilerException java\\.\\w+)",
      "(?:ArityException Wrong number of args)",
      "(?:IllegalArgumentException)",
      "(?:NullPointerException)",
      "(?:ClassCastException)",
      "(?:UnsupportedOperationException)",
      "(?:\\$fn__\\d+\\.invoke)",
      "(?:RuntimeException)"
    ],
    "severity_mappings": {
      "trace": "debug",
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "warn": "warn",
      "error": "error",
      "critical": "error",
      "fatal": "fatal"
    }
  },
  "typescript": {
    "language": "typescript",
    "field_mappings": {
      "error_type": ["name", "type", "code"],
      "message": "message",
      "stack_trace": ["stack", "stacktrace", "stack_trace"]
    },
    "stack_trace_fields": ["stack", "stacktrace", "stack_trace"],
    "stack_trace_format": "string",
    "version_fields": ["typescript_version", "ts_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:TS\\d+:)",
      "(?:error TS\\d+:)",
      "(?:TypeScript compilation error)",
      "(?:tsc \\(\\d+,\\d+\\):)",
      "(?:at.*\\.ts:\\d+:\\d+)",
      "(?:Type '.*' is not assignable to type)",
      "(?:Cannot find name '.*')",
      "(?:Property '.*' does not exist on type)",
      "(?:Cannot find module '.*')"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warning",
      "error": "error",
      "critical": "error",
      "fatal": "fatal"
    },
    "compiler_options": {
      "strict": true,
      "noImplicitAny": true,
      "strictNullChecks": true,
      "strictFunctionTypes": true,
      "noImplicitReturns": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false
    },
    "file_extensions": [".ts", ".tsx", ".d.ts"],
    "config_files": ["tsconfig.json", "jsconfig.json"]
  },
  "react": {
    "language": "react",
    "field_mappings": {
      "error_type": ["name", "type"],
      "message": "message",
      "stack_trace": ["stack", "stacktrace", "stack_trace"],
      "component_stack": ["componentStack", "component_stack"]
    },
    "stack_trace_fields": ["stack", "stacktrace", "stack_trace"],
    "stack_trace_format": "string",
    "version_fields": ["react_version", "framework_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version", "react_version"],
    "detection_patterns": [
      "(?:Invalid hook call)",
      "(?:Hooks can only be called)",
      "(?:React Hook .* has a missing dependency)",
      "(?:exhaustive-deps)",
      "(?:Each child in a list should have a unique \"key\" prop)",
      "(?:'React' must be in scope when using JSX)",
      "(?:Objects are not valid as a React child)",
      "(?:Functions are not valid as a React child)",
      "(?:Cannot read .* of undefined.*setState)",
      "(?:useContext must be used within.*Provider)",
      "(?:at.*\\.(jsx|tsx):\\d+:\\d+)",
      "(?:in (\\w+) \\(at [^)]+\\.(jsx|tsx):\\d+:\\d+\\))",
      "(?:React.*component)",
      "(?:Component.*React)",
      "(?:JSX element)",
      "(?:redux.*store)",
      "(?:dispatch.*action)",
      "(?:unnecessary re-renders)",
      "(?:hydration.*mismatch)",
      "(?:server.*component)",
      "(?:client.*code.*server)",
      "(?:use client)",
      "(?:use server)"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "error": "error",
      "critical": "error",
      "fatal": "fatal"
    },
    "component_stack_patterns": [
      "(?:in (\\w+) \\(at [^)]+\\.(jsx|tsx):\\d+:\\d+\\))",
      "(?:at (\\w+) \\([^)]+\\))"
    ],
    "file_extensions": [".jsx", ".tsx", ".js", ".ts"],
    "config_files": ["package.json", "vite.config.js", "webpack.config.js", "next.config.js"],
    "hooks": [
      "useState", "useEffect", "useContext", "useReducer", "useCallback", 
      "useMemo", "useRef", "useImperativeHandle", "useLayoutEffect", 
      "useDebugValue", "useDeferredValue", "useTransition", "useId",
      "useSyncExternalStore", "useInsertionEffect"
    ],
    "lifecycle_methods": [
      "componentDidMount", "componentDidUpdate", "componentWillUnmount",
      "shouldComponentUpdate", "getSnapshotBeforeUpdate", "componentDidCatch",
      "getDerivedStateFromProps", "getDerivedStateFromError"
    ],
    "react_patterns": {
      "hooks_rules": {
        "only_in_function_components": true,
        "call_at_top_level": true,
        "no_conditional_calls": true,
        "no_loop_calls": true,
        "exhaustive_dependencies": true
      },
      "jsx_rules": {
        "require_react_import": false,
        "require_key_props": true,
        "no_invalid_children": true,
        "proper_event_handlers": true
      },
      "performance_rules": {
        "avoid_inline_objects": true,
        "use_memo_for_expensive_calculations": true,
        "virtualize_large_lists": true,
        "code_splitting": true
      }
    }
  },
  "vue": {
    "language": "vue",
    "field_mappings": {
      "error_type": ["name", "type"],
      "message": "message",
      "stack_trace": ["stack", "stacktrace", "stack_trace"],
      "component_stack": ["componentStack", "component_stack"]
    },
    "stack_trace_fields": ["stack", "stacktrace", "stack_trace"],
    "stack_trace_format": "string",
    "version_fields": ["vue_version", "framework_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version", "vue_version"],
    "detection_patterns": [
      "(?:Vue warn)",
      "(?:Vue.*component)",
      "(?:setup\\(\\) function)",
      "(?:ref\\(\\) is not defined)",
      "(?:computed\\(\\) is not defined)",
      "(?:watch\\(\\) is not defined)",
      "(?:onMounted is not defined)",
      "(?:reactive\\(\\) is not defined)",
      "(?:Vuex.*store)",
      "(?:Vue.*router)",
      "(?:\\.vue:\\d+:\\d+)",
      "(?:v-model)",
      "(?:v-if|v-for|v-show)",
      "(?:directive.*vue)",
      "(?:vue.*directive)",
      "(?:composition.*api)",
      "(?:setup must return)",
      "(?:cannot access.*before initialization)",
      "(?:mutation.*not defined)",
      "(?:action.*not defined)",
      "(?:route.*not found)",
      "(?:navigation.*cancelled)",
      "(?:router.*not defined)",
      "(?:store.*not defined)",
      "(?:do not mutate vuex store state)",
      "(?:Invalid prop)",
      "(?:Failed to mount component)",
      "(?:Template compilation error)",
      "(?:Hydration.*mismatch)"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "error": "error",
      "critical": "error",
      "fatal": "fatal"
    },
    "component_stack_patterns": [
      "(?:at <(\\w+)>)",
      "(?:in (\\w+) \\(at [^)]+\\.(vue|js|ts):\\d+:\\d+\\))"
    ],
    "file_extensions": [".vue", ".js", ".ts"],
    "config_files": ["package.json", "vue.config.js", "vite.config.js", "nuxt.config.js"],
    "composition_api_functions": [
      "ref", "computed", "watch", "watchEffect", "reactive", "readonly", "toRef", "toRefs",
      "onMounted", "onUpdated", "onUnmounted", "onBeforeMount", "onBeforeUpdate", "onBeforeUnmount",
      "onActivated", "onDeactivated", "onErrorCaptured", "onRenderTracked", "onRenderTriggered",
      "provide", "inject", "getCurrentInstance", "nextTick", "defineComponent", "defineAsyncComponent"
    ],
    "vuex_functions": [
      "createStore", "useStore", "mapState", "mapGetters", "mapMutations", "mapActions",
      "createNamespacedHelpers", "commit", "dispatch"
    ],
    "vue_router_functions": [
      "createRouter", "createWebHistory", "createWebHashHistory", "createMemoryHistory",
      "useRouter", "useRoute", "onBeforeRouteEnter", "onBeforeRouteUpdate", "onBeforeRouteLeave"
    ],
    "directives": [
      "v-model", "v-if", "v-else", "v-else-if", "v-for", "v-show", "v-bind", "v-on",
      "v-slot", "v-pre", "v-cloak", "v-once", "v-text", "v-html", "v-memo"
    ],
    "vue_patterns": {
      "composition_api_rules": {
        "import_from_vue": true,
        "call_in_setup": true,
        "return_from_setup": true,
        "proper_reactivity": true
      },
      "template_rules": {
        "proper_directive_syntax": true,
        "key_in_v_for": true,
        "avoid_v_if_with_v_for": true,
        "proper_event_handlers": true
      },
      "vuex_rules": {
        "no_direct_mutation": true,
        "use_mutations_for_state": true,
        "async_in_actions": true,
        "proper_module_structure": true
      },
      "performance_rules": {
        "use_v_show_for_toggle": true,
        "avoid_inline_objects_in_template": true,
        "use_computed_for_complex_logic": true,
        "proper_component_splitting": true
      }
    }
  },
  "angular": {
    "language": "angular",
    "field_mappings": {
      "error_type": ["name", "type"],
      "message": "message",
      "stack_trace": ["stack", "stacktrace", "stack_trace"],
      "component_stack": ["componentStack", "component_stack"]
    },
    "stack_trace_fields": ["stack", "stacktrace", "stack_trace"],
    "stack_trace_format": "string",
    "version_fields": ["angular_version", "framework_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version", "angular_version"],
    "detection_patterns": [
      "(?:Angular warn)",
      "(?:@angular)",
      "(?:ng\\s)",
      "(?:dependency injection)",
      "(?:No provider for)",
      "(?:InjectionToken)",
      "(?:circular dependency)",
      "(?:cannot resolve all parameters)",
      "(?:NgRx)",
      "(?:@ngrx)",
      "(?:@Component)",
      "(?:@Injectable)",
      "(?:@NgModule)",
      "(?:@Input)",
      "(?:@Output)",
      "(?:Cannot bind to)",
      "(?:is not a known element)",
      "(?:is not a known property)",
      "(?:Expression has changed after)",
      "(?:angular\\.core)",
      "(?:platformBrowserDynamic)",
      "(?:Component.*angular)",
      "(?:template.*angular)",
      "(?:at.*\\.component\\.ts:\\d+:\\d+)",
      "(?:at.*\\.service\\.ts:\\d+:\\d+)",
      "(?:at.*\\.module\\.ts:\\d+:\\d+)",
      "(?:injector.*error)",
      "(?:Action must have a type)",
      "(?:Store has not been provided)",
      "(?:Reducer returned undefined)",
      "(?:Selector function cannot return)",
      "(?:Effects must be an array)"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "error": "error",
      "critical": "error",
      "fatal": "fatal"
    },
    "component_stack_patterns": [
      "(?:at (\\w+Component) \\([^)]+\\.(ts|js):\\d+:\\d+\\))",
      "(?:in (\\w+) \\(at [^)]+\\.(ts|js):\\d+:\\d+\\))"
    ],
    "file_extensions": [".ts", ".js", ".html"],
    "config_files": ["angular.json", "package.json", "tsconfig.json", "nx.json"],
    "decorators": [
      "@Component", "@Injectable", "@NgModule", "@Input", "@Output", 
      "@ViewChild", "@ViewChildren", "@ContentChild", "@ContentChildren",
      "@HostBinding", "@HostListener", "@Inject", "@Optional", "@Self",
      "@SkipSelf", "@Host", "@Attribute", "@Pipe", "@Directive"
    ],
    "lifecycle_hooks": [
      "ngOnInit", "ngOnDestroy", "ngOnChanges", "ngDoCheck", "ngAfterViewInit",
      "ngAfterViewChecked", "ngAfterContentInit", "ngAfterContentChecked"
    ],
    "ngrx_functions": [
      "createAction", "createReducer", "createSelector", "createEffect",
      "StoreModule.forRoot", "StoreModule.forFeature", "EffectsModule.forRoot",
      "EffectsModule.forFeature", "select", "dispatch"
    ],
    "dependency_injection_tokens": [
      "InjectionToken", "DOCUMENT", "WINDOW", "LOCALE_ID", "PLATFORM_ID",
      "APP_BOOTSTRAP_LISTENER", "APP_INITIALIZER", "ANALYZE_FOR_ENTRY_COMPONENTS"
    ],
    "angular_patterns": {
      "dependency_injection_rules": {
        "require_injectable_decorator": true,
        "provide_dependencies": true,
        "avoid_circular_dependencies": true,
        "use_injection_tokens": true
      },
      "template_rules": {
        "safe_navigation": true,
        "proper_property_binding": true,
        "known_elements_only": true,
        "known_properties_only": true
      },
      "ngrx_rules": {
        "actions_must_have_type": true,
        "reducers_must_return_state": true,
        "effects_return_actions": true,
        "immutable_state_updates": true
      },
      "performance_rules": {
        "onpush_change_detection": true,
        "lazy_loading_modules": true,
        "trackby_functions": true,
        "avoid_function_calls_in_templates": true
      }
    }
  },
  "svelte": {
    "language": "svelte",
    "field_mappings": {
      "error_type": ["name", "type"],
      "message": "message",
      "stack_trace": ["stack", "stacktrace", "stack_trace"],
      "component_stack": ["componentStack", "component_stack"]
    },
    "stack_trace_fields": ["stack", "stacktrace", "stack_trace"],
    "stack_trace_format": "string",
    "version_fields": ["svelte_version", "framework_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version", "svelte_version"],
    "detection_patterns": [
      "(?:svelte)",
      "(?:sveltekit)",
      "(?:@sveltejs)",
      "(?:\\$:)",
      "(?:reactive statement)",
      "(?:writable\\()",
      "(?:readable\\()",
      "(?:derived\\()",
      "(?:\\.svelte:)",
      "(?:svelte/store)",
      "(?:svelte/transition)",
      "(?:svelte/animate)",
      "(?:svelte/action)",
      "(?:\\+page\\.)",
      "(?:\\+layout\\.)",
      "(?:\\+error\\.)",
      "(?:app\\.html)",
      "(?:bind:)",
      "(?:transition:)",
      "(?:animate:)",
      "(?:use:)",
      "(?:slot=)",
      "(?:createEventDispatcher)",
      "(?:getContext)",
      "(?:setContext)",
      "(?:beforeUpdate)",
      "(?:afterUpdate)",
      "(?:tick\\(\\))",
      "(?:reactive statement ran more than)",
      "(?:cannot bind to)",
      "(?:load function must return)",
      "(?:cannot use goto during ssr)",
      "(?:hydration mismatch)",
      "(?:prerender error)",
      "(?:fade is not defined)",
      "(?:slide is not defined)",
      "(?:fly is not defined)",
      "(?:component.*not.*defined)",
      "(?:store subscription.*leak)",
      "(?:browser.*environment)",
      "(?:server.*side.*rendering)"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "error": "error",
      "critical": "error",
      "fatal": "fatal"
    },
    "component_stack_patterns": [
      "(?:at (\\w+) \\([^)]+\\.(svelte|js|ts):\\d+:\\d+\\))",
      "(?:in (\\w+) \\(at [^)]+\\.(svelte|js|ts):\\d+:\\d+\\))"
    ],
    "file_extensions": [".svelte", ".js", ".ts"],
    "config_files": ["package.json", "svelte.config.js", "vite.config.js", "rollup.config.js"],
    "store_functions": [
      "writable", "readable", "derived", "get", "subscribe", "set", "update"
    ],
    "lifecycle_functions": [
      "onMount", "onDestroy", "beforeUpdate", "afterUpdate", "tick",
      "createEventDispatcher", "getContext", "setContext", "hasContext"
    ],
    "sveltekit_functions": [
      "load", "goto", "page", "navigating", "updated", "beforeNavigate", "afterNavigate",
      "preloadData", "preloadCode", "invalidate", "invalidateAll"
    ],
    "transition_functions": [
      "fade", "slide", "scale", "draw", "fly", "blur", "crossfade"
    ],
    "animation_functions": [
      "flip", "crossfade"
    ],
    "action_functions": [
      "use", "action", "clickOutside", "focus", "portal"
    ],
    "svelte_patterns": {
      "reactivity_rules": {
        "avoid_circular_dependencies": true,
        "declare_before_use": true,
        "use_let_for_mutable": true,
        "proper_reactive_statements": true
      },
      "store_rules": {
        "import_from_svelte_store": true,
        "unsubscribe_on_destroy": true,
        "use_dollar_syntax": true,
        "proper_initial_values": true
      },
      "component_rules": {
        "proper_imports": true,
        "export_props": true,
        "proper_event_handling": true,
        "use_slots_correctly": true
      },
      "sveltekit_rules": {
        "load_returns_object": true,
        "goto_browser_only": true,
        "consistent_ssr_csr": true,
        "proper_endpoint_exports": true
      },
      "performance_rules": {
        "avoid_inline_handlers": true,
        "use_stores_for_global_state": true,
        "proper_key_attributes": true,
        "optimize_transitions": true
      }
    }
  },
  "nextjs": {
    "language": "nextjs",
    "field_mappings": {
      "error_type": ["name", "type"],
      "message": "message",
      "stack_trace": ["stack", "stacktrace", "stack_trace"],
      "component_stack": ["componentStack", "component_stack"]
    },
    "stack_trace_fields": ["stack", "stacktrace", "stack_trace"],
    "stack_trace_format": "string",
    "version_fields": ["next_version", "framework_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version", "next_version"],
    "detection_patterns": [
      "(?:next)",
      "(?:nextjs)",
      "(?:next\\.js)",
      "(?:vercel)",
      "(?:getserversideprops)",
      "(?:getstaticprops)",
      "(?:getstaticpaths)",
      "(?:next/image)",
      "(?:next/link)",
      "(?:next/router)",
      "(?:next/head)",
      "(?:next/script)",
      "(?:middleware)",
      "(?:_app\\.js)",
      "(?:_document\\.js)",
      "(?:app/(.*)/page\\.)",
      "(?:app/(.*)/layout\\.)",
      "(?:pages/api/)",
      "(?:pages/\\[)",
      "(?:server component)",
      "(?:client component)",
      "(?:incremental static)",
      "(?:revalidate)",
      "(?:notfound)",
      "(?:fallback)",
      "(?:route.*conflict)",
      "(?:cannot.*find.*module.*next)",
      "(?:hydration.*failed)",
      "(?:environment variable)",
      "(?:image.*optimization)",
      "(?:use client)",
      "(?:use server)",
      "(?:invalid.*config)",
      "(?:api.*resolved.*without.*response)",
      "(?:method.*not.*allowed)",
      "(?:load function)",
      "(?:cannot.*import.*server)"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "error": "error",
      "critical": "error",
      "fatal": "fatal"
    },
    "component_stack_patterns": [
      "(?:at (\\w+) \\([^)]+\\.(jsx|tsx|js|ts):\\d+:\\d+\\))",
      "(?:in (\\w+) \\(at [^)]+\\.(jsx|tsx|js|ts):\\d+:\\d+\\))"
    ],
    "file_extensions": [".jsx", ".tsx", ".js", ".ts"],
    "config_files": ["next.config.js", "package.json", "tsconfig.json", "middleware.js", "next-env.d.ts"],
    "data_fetching_functions": [
      "getServerSideProps", "getStaticProps", "getStaticPaths", "useRouter", "usePathname",
      "useSearchParams", "generateStaticParams", "generateMetadata", "fetch"
    ],
    "app_router_functions": [
      "generateMetadata", "generateStaticParams", "notFound", "redirect",
      "cookies", "headers", "revalidatePath", "revalidateTag"
    ],
    "pages_router_functions": [
      "getServerSideProps", "getStaticProps", "getStaticPaths", "getInitialProps"
    ],
    "nextjs_patterns": {
      "data_fetching_rules": {
        "return_object_with_props": true,
        "proper_revalidate_value": true,
        "proper_notfound_usage": true,
        "proper_redirect_usage": true,
        "server_only_data_fetching": true
      },
      "api_route_rules": {
        "send_response": true,
        "handle_http_methods": true,
        "proper_status_codes": true,
        "set_headers_before_send": true,
        "validate_request_data": true
      },
      "app_router_rules": {
        "no_client_import_server": true,
        "no_server_hooks_in_client": true,
        "proper_metadata_exports": true,
        "proper_loading_handling": true,
        "proper_error_handling": true
      },
      "image_rules": {
        "configured_domains": true,
        "provide_dimensions": true,
        "optimize_priority_images": true,
        "proper_placeholder_usage": true
      },
      "performance_rules": {
        "optimize_image_usage": true,
        "proper_dynamic_imports": true,
        "use_suspense_for_data_fetching": true,
        "minimize_client_javascript": true
      }
    }
  },
  "ember": {
    "language": "ember",
    "field_mappings": {
      "error_type": ["name", "type"],
      "message": "message",
      "stack_trace": ["stack", "stacktrace", "stack_trace"],
      "component_stack": ["componentStack", "component_stack"]
    },
    "stack_trace_fields": ["stack", "stacktrace", "stack_trace"],
    "stack_trace_format": "string",
    "version_fields": ["ember_version", "framework_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version", "ember_version"],
    "detection_patterns": [
      "(?:ember)",
      "(?:ember\\.js)",
      "(?:ember-cli)",
      "(?:ember-data)",
      "(?:octane)",
      "(?:glimmer)",
      "(?:handlebars)",
      "(?:hbs)",
      "(?:computed\\(\\))",
      "(?:tracked)",
      "(?:component)",
      "(?:template)",
      "(?:{{|}})",
      "(?:this\\.args)",
      "(?:router)",
      "(?:route)",
      "(?:model\\(\\))",
      "(?:store)",
      "(?:findRecord)",
      "(?:queryRecord)",
      "(?:findAll)",
      "(?:belongsTo)",
      "(?:hasMany)",
      "(?:adapter)",
      "(?:serializer)",
      "(?:service)",
      "(?:@service)",
      "(?:@tracked)",
      "(?:@action)",
      "(?:@glimmer)",
      "(?:helpers)",
      "(?:modifier)",
      "(?:v-\\w+)",
      "(?:component.*not found)",
      "(?:helper.*not found)",
      "(?:route.*not found)",
      "(?:transition.*aborted)",
      "(?:model.*error)",
      "(?:record.*not found)",
      "(?:relationship.*not loaded)",
      "(?:syntax error)",
      "(?:unclosed element)",
      "(?:property.*not found)",
      "(?:could not set property)"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "error": "error",
      "critical": "error",
      "fatal": "fatal"
    },
    "component_stack_patterns": [
      "(?:at (\\w+Component) \\([^)]+\\.(js|ts):\\d+:\\d+\\))",
      "(?:in (\\w+) \\(at [^)]+\\.(js|ts|hbs):\\d+:\\d+\\))"
    ],
    "file_extensions": [".js", ".ts", ".hbs"],
    "config_files": ["ember-cli-build.js", "package.json", "config/environment.js"],
    "lifecycle_hooks": [
      "init", "didReceiveAttrs", "didUpdateAttrs", "didRender", "didInsertElement",
      "willDestroyElement", "willDestroy", "willRender", "willUpdate"
    ],
    "ember_data_functions": [
      "findRecord", "findAll", "queryRecord", "query", "peekRecord", "peekAll",
      "createRecord", "deleteRecord", "pushPayload", "normalize", "serialize"
    ],
    "router_functions": [
      "transitionTo", "replaceWith", "intermediateTransitionTo", "refresh",
      "beforeModel", "model", "afterModel", "activate", "deactivate",
      "resetController", "setupController"
    ],
    "octane_decorators": [
      "@tracked", "@action", "@service", "@attr", "@belongsTo", "@hasMany"
    ],
    "template_helpers": [
      "each", "if", "unless", "with", "let", "in-element", "link-to", "input",
      "textarea", "component", "yield", "hash", "array", "log", "debugger",
      "each-in", "get", "concat", "mut", "action", "on"
    ],
    "ember_patterns": {
      "component_rules": {
        "proper_args_usage": true,
        "tracked_properties": true,
        "action_handlers": true,
        "lifecycle_hooks": true,
        "service_injection": true
      },
      "template_rules": {
        "proper_syntax": true,
        "helper_usage": true,
        "component_invocation": true,
        "block_params": true,
        "conditional_rendering": true
      },
      "data_rules": {
        "store_injection": true,
        "model_definition": true,
        "relationship_handling": true,
        "adapter_configuration": true,
        "serializer_configuration": true
      },
      "router_rules": {
        "route_definition": true,
        "dynamic_segments": true,
        "transition_handling": true,
        "model_hooks": true,
        "loading_error_states": true
      },
      "octane_rules": {
        "tracked_properties": true,
        "class_based_components": true,
        "modifiers_usage": true,
        "args_access": true,
        "getters_over_computed": true
      }
    }
  },
  "webcomponents": {
    "language": "webcomponents",
    "field_mappings": {
      "error_type": ["name", "type"],
      "message": "message",
      "stack_trace": ["stack", "stacktrace", "stack_trace"]
    },
    "stack_trace_fields": ["stack", "stacktrace", "stack_trace"],
    "stack_trace_format": "string",
    "version_fields": ["browser_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:custom[\\s-]element)",
      "(?:customelements\\.define)",
      "(?:shadow[\\s-]dom)",
      "(?:shadowroot)",
      "(?:attachshadow)",
      "(?:slot)",
      "(?:slotchange)",
      "(?:template)",
      "(?:connectedcallback)",
      "(?:disconnectedcallback)",
      "(?:attributechangedcallback)",
      "(?:adoptedcallback)",
      "(?:observedattributes)",
      "(?:extends HTMLElement)",
      "(?:lit-element)",
      "(?:lithtml)",
      "(?:litelement)",
      "(?:stencil)",
      "(?:\\bslot\\b)",
      "(?:::part)",
      "(?:::slotted)",
      "(?:Failed to execute 'define' on 'CustomElementRegistry')"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "error": "error",
      "critical": "error",
      "fatal": "fatal"
    },
    "file_extensions": [".js", ".ts", ".html", ".jsx", ".tsx"],
    "config_files": ["package.json", "tsconfig.json", "rollup.config.js", "webpack.config.js"],
    "lifecycle_methods": [
      "constructor", "connectedCallback", "disconnectedCallback", 
      "attributeChangedCallback", "adoptedCallback", "observedAttributes"
    ],
    "custom_element_features": [
      "customElements.define", "customElements.get", "attachShadow",
      "shadowRoot", "slot", "part", "slotchange", "template", "is"
    ],
    "lit_functions": [
      "html", "css", "LitElement", "property", "state", "query", "queryAll",
      "queryAsync", "eventOptions", "customElement", "unsafeHTML", "live",
      "ref", "createRef", "when", "choose", "map", "repeat", "cache"
    ],
    "stencil_decorators": [
      "Component", "Prop", "State", "Watch", "Element", "Method",
      "Event", "Listen"
    ],
    "shadow_dom_selectors": [
      ":host", ":host()", ":host-context()", "::slotted()", "::part()"
    ],
    "webcomponent_patterns": {
      "lifecycle_rules": {
        "super_in_constructor": true,
        "implement_callbacks": true,
        "declare_observed_attributes": true,
        "handle_attribute_changes": true,
        "cleanup_in_disconnected": true
      },
      "shadow_dom_rules": {
        "proper_encapsulation": true,
        "slot_content_distribution": true,
        "style_encapsulation": true,
        "part_exposure": true,
        "event_retargeting": true
      },
      "performance_rules": {
        "efficient_property_updates": true,
        "lazy_initialization": true,
        "limit_shadow_dom_manipulations": true,
        "optimize_render": true
      },
      "lit_rules": {
        "property_declaration": true,
        "template_syntax": true,
        "directive_usage": true,
        "style_encapsulation": true
      },
      "stencil_rules": {
        "component_decorator": true,
        "prop_decorator": true,
        "watch_decorator": true,
        "event_decorator": true,
        "method_decorator": true
      }
    }
  },
  "css": {
    "language": "css",
    "field_mappings": {
      "error_type": ["name", "type", "severity"],
      "message": "message",
      "stack_trace": ["stack", "stacktrace", "stack_trace"]
    },
    "stack_trace_fields": ["stack", "stacktrace", "stack_trace"],
    "stack_trace_format": "string",
    "version_fields": ["css_version", "framework_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:tailwind)",
      "(?:styled-components)",
      "(?:emotion)",
      "(?:css module)",
      "(?:sass)",
      "(?:scss)",
      "(?:less)",
      "(?:postcss)",
      "(?:css.*error)",
      "(?:style.*error)",
      "(?:@apply)",
      "(?:css-in-js)",
      "(?:grid.*error)",
      "(?:flex.*error)",
      "(?:animation.*error)",
      "(?:transition.*error)",
      "(?:Unknown utility class)",
      "(?:class.*not.*found)",
      "(?:purged)",
      "(?:babel.*styled)",
      "(?:jsx.*pragma)",
      "(?:theme.*error)",
      "(?:ServerStyleSheet)",
      "(?:cache.*emotion)",
      "(?:grid-template)",
      "(?:justify-content)",
      "(?:align-items)",
      "(?:keyframes)",
      "(?:transform.*error)",
      "(?:\\.css:|\\..scss:|\\..sass:|\\..less:)"
    ],
    "severity_mappings": {
      "debug": "debug",
      "info": "info",
      "warning": "warn",
      "error": "error",
      "critical": "error",
      "fatal": "fatal"
    },
    "file_extensions": [".css", ".scss", ".sass", ".less", ".styl", ".js", ".jsx", ".ts", ".tsx"],
    "config_files": ["tailwind.config.js", "postcss.config.js", "package.json", ".babelrc", "babel.config.js"],
    "css_frameworks": [
      "tailwindcss", "styled-components", "emotion", "css-modules", 
      "sass", "less", "stylus", "postcss", "bootstrap", "material-ui"
    ],
    "css_patterns": {
      "tailwind_rules": {
        "check_class_spelling": true,
        "verify_purge_config": true,
        "validate_apply_directive": true,
        "proper_config_syntax": true,
        "jit_mode_support": true
      },
      "css_in_js_rules": {
        "babel_plugin_config": true,
        "ssr_setup": true,
        "theme_provider": true,
        "jsx_pragma": true,
        "template_literal_syntax": true
      },
      "layout_rules": {
        "grid_template_validation": true,
        "flexbox_alignment": true,
        "box_model_understanding": true,
        "responsive_design": true,
        "position_context": true
      },
      "animation_rules": {
        "keyframes_definition": true,
        "timing_functions": true,
        "transform_syntax": true,
        "performance_optimization": true,
        "accessibility_compliance": true
      },
      "preprocessing_rules": {
        "import_resolution": true,
        "variable_scope": true,
        "mixin_definition": true,
        "compilation_setup": true,
        "source_map_generation": true
      }
    }
  },
  "swift": {
    "language": "swift",
    "field_mappings": {
      "error_type": ["error_type", "signal", "exception_type", "type"],
      "message": "message",
      "stack_trace": ["stack_trace", "backtrace", "threads"]
    },
    "stack_trace_fields": ["stack_trace", "backtrace", "threads"],
    "stack_trace_format": "list",
    "version_fields": ["swift_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:fatal error:)",
      "(?:unexpectedly found nil while unwrapping)",
      "(?:Index out of range)",
      "(?:EXC_BAD_ACCESS)",
      "(?:Thread \\d+: signal SIGABRT)",
      "(?:\\.swift:\\d+)",
      "(?:SwiftUI)",
      "(?:UIKit)",
      "(?:Foundation)",
      "(?:Core Data)",
      "(?:Main Thread Checker:)",
      "(?:ThreadSanitizer:)",
      "(?:Task was cancelled)",
      "(?:CancellationError)",
      "(?:Actor-isolated)",
      "(?:@MainActor)",
      "(?:No such module)",
      "(?:Package\\.swift)",
      "(?:swift package)"
    ],
    "severity_mappings": {
      "debug": "DEBUG",
      "info": "INFO",
      "warning": "DEFAULT",
      "error": "ERROR",
      "critical": "FAULT",
      "fatal": "FAULT"
    },
    "platform_detection": {
      "ios": ["iOS", "iPhone", "iPad"],
      "macos": ["macOS", "Mac"],
      "watchos": ["watchOS", "Apple Watch"],
      "tvos": ["tvOS", "Apple TV"]
    },
    "file_extensions": [".swift"],
    "config_files": ["Package.swift", "*.xcodeproj", "*.xcworkspace", "Info.plist"],
    "frameworks": [
      "UIKit", "SwiftUI", "Foundation", "CoreData", "CoreAnimation",
      "AVFoundation", "MapKit", "CoreLocation", "HealthKit", "HomeKit",
      "CloudKit", "GameplayKit", "SceneKit", "Metal", "CoreML"
    ],
    "swift_patterns": {
      "optional_rules": {
        "avoid_force_unwrapping": true,
        "use_nil_coalescing": true,
        "safe_optional_chaining": true,
        "guard_let_patterns": true
      },
      "memory_rules": {
        "weak_references": true,
        "unowned_references": true,
        "arc_optimization": true,
        "retain_cycle_prevention": true
      },
      "concurrency_rules": {
        "async_await_usage": true,
        "actor_isolation": true,
        "sendable_conformance": true,
        "main_actor_usage": true,
        "task_cancellation": true
      },
      "ui_rules": {
        "main_thread_updates": true,
        "view_controller_lifecycle": true,
        "auto_layout_constraints": true,
        "interface_builder_connections": true
      },
      "core_data_rules": {
        "context_threading": true,
        "save_error_handling": true,
        "fetch_request_validation": true,
        "relationship_management": true
      },
      "performance_rules": {
        "collection_bounds_checking": true,
        "string_interpolation": true,
        "closure_capture_optimization": true,
        "image_optimization": true
      }
    },
    "spm_patterns": {
      "package_declaration": {
        "name_requirement": true,
        "platform_specification": true,
        "dependencies_format": true,
        "targets_configuration": true
      },
      "dependency_rules": {
        "version_specification": true,
        "url_validation": true,
        "local_path_validation": true,
        "conflict_resolution": true
      },
      "build_rules": {
        "swift_tools_version": true,
        "compiler_flags": true,
        "linker_settings": true,
        "resource_bundling": true
      }
    }
  },
  "kotlin": {
    "language": "kotlin",
    "field_mappings": {
      "error_type": ["exception_type", "type", "error_type"],
      "message": "message",
      "stack_trace": ["stackTrace", "stack_trace"]
    },
    "stack_trace_fields": ["stackTrace", "stack_trace"],
    "stack_trace_format": "string",
    "version_fields": ["kotlin_version", "language_version"],
    "framework_fields": ["framework"],
    "framework_version_fields": ["framework_version"],
    "detection_patterns": [
      "(?:kotlin\\.)",
      "(?:KotlinNullPointerException)",
      "(?:at [\\w\\.$]+\\([^)]+\\.kt:\\d+\\))",
      "(?:kotlinx\\.coroutines)",
      "(?:CancellationException)",
      "(?:TimeoutCancellationException)",
      "(?:androidx\\.)",
      "(?:android\\.)",
      "(?:@Composable)",
      "(?:compose)",
      "(?:room)",
      "(?:suspend fun)",
      "(?:coroutineScope)",
      "(?:launch\\s*\\{)",
      "(?:async\\s*\\{)",
      "(?:runBlocking)",
      "(?:\\.kt:\\d+)",
      "(?:Fragment.*not attached)",
      "(?:Cannot access database on the main thread)",
      "(?:expect.*actual)",
      "(?:multiplatform)"
    ],
    "severity_mappings": {
      "verbose": "debug",
      "debug": "debug",
      "info": "info", 
      "warn": "warning",
      "error": "error",
      "assert": "critical"
    },
    "platform_detection": {
      "android": ["android", "androidx", "Activity", "Fragment"],
      "jvm": ["java", "jvm", "kotlin-jvm"],
      "js": ["kotlin-js", "js"],
      "native": ["kotlin-native", "native"],
      "multiplatform": ["kotlin-multiplatform", "expect", "actual"]
    },
    "file_extensions": [".kt", ".kts"],
    "config_files": ["build.gradle.kts", "build.gradle", "gradle.properties", "settings.gradle.kts"],
    "frameworks": [
      "coroutines", "android", "compose", "room", "multiplatform", "ktor",
      "serialization", "datetime", "spring", "exposed"
    ],
    "kotlin_patterns": {
      "null_safety_rules": {
        "avoid_unsafe_cast": true,
        "use_safe_calls": true,
        "use_elvis_operator": true,
        "check_lateinit_initialization": true,
        "proper_nullable_handling": true
      },
      "coroutine_rules": {
        "handle_cancellation": true,
        "proper_dispatcher_usage": true,
        "structured_concurrency": true,
        "avoid_runblocking_main": true,
        "exception_handling": true
      },
      "android_rules": {
        "lifecycle_awareness": true,
        "context_management": true,
        "fragment_attachment": true,
        "permission_handling": true,
        "memory_leak_prevention": true
      },
      "compose_rules": {
        "remember_state": true,
        "avoid_side_effects": true,
        "proper_recomposition": true,
        "state_hoisting": true,
        "performance_optimization": true
      },
      "room_rules": {
        "background_thread_operations": true,
        "proper_migration": true,
        "transaction_handling": true,
        "type_converter_usage": true,
        "dao_annotation": true
      },
      "multiplatform_rules": {
        "expect_actual_matching": true,
        "platform_specific_dependencies": true,
        "common_source_abstraction": true,
        "target_compatibility": true,
        "native_interop": true
      },
      "performance_rules": {
        "collection_optimization": true,
        "inline_functions": true,
        "data_class_usage": true,
        "sequence_vs_list": true,
        "string_templates": true
      }
    },
    "android_lifecycle_methods": [
      "onCreate", "onStart", "onResume", "onPause", "onStop", "onDestroy",
      "onCreateView", "onViewCreated", "onDestroyView", "onAttach", "onDetach"
    ],
    "coroutine_builders": [
      "launch", "async", "runBlocking", "coroutineScope", "supervisorScope",
      "withContext", "withTimeout", "withTimeoutOrNull"
    ],
    "compose_functions": [
      "remember", "LaunchedEffect", "DisposableEffect", "SideEffect",
      "derivedStateOf", "mutableStateOf", "rememberSaveable", "produceState"
    ],
    "room_annotations": [
      "@Entity", "@Dao", "@Database", "@PrimaryKey", "@ColumnInfo", "@Embedded",
      "@Relation", "@Insert", "@Update", "@Delete", "@Query", "@Transaction"
    ]
  }
}