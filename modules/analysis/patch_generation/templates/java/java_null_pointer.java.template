/**
 * Null check template for preventing NullPointerException
 * 
 * This template provides a null check for the variable that caused the NPE.
 * Original error: ${ERROR_TYPE}: ${ERROR_MESSAGE}
 */

// Option 1: Early return pattern - check if null and handle immediately
if (${NULL_CHECK_VAR} == null) {
    // Handle null case early - choose appropriate strategy:
    // return null; // or appropriate default value
    // throw new IllegalArgumentException("${NULL_CHECK_VAR} must not be null");
    // ${NULL_CHECK_VAR} = getDefaultValue(); // provide default
}
// If we reach here, ${NULL_CHECK_VAR} is not null and safe to use

// Option 2: Safe usage pattern - check for null before accessing ${NULL_CHECK_VAR}
if (${NULL_CHECK_VAR} != null) {
    // Safe to use ${NULL_CHECK_VAR} here
    // Example: int length = ${NULL_CHECK_VAR}.length();
    // Your original code goes here
} else {
    // Handle null case - choose appropriate strategy:
    
    // Option 1: Provide a default value
    // ${NULL_CHECK_VAR} = getDefaultValue(); // Then proceed with normal flow
    
    // Option 2: Return early or a default result
    // return 0; // or other appropriate default return value
    
    // Option 3: Throw a more descriptive exception
    // throw new IllegalArgumentException("${NULL_CHECK_VAR} must not be null");
    
    // Option 4: Log and skip the operation
    // logger.warn("${NULL_CHECK_VAR} was null, skipping operation");
}

// Alternative approach using Optional (Java 8+):
// Optional.ofNullable(${NULL_CHECK_VAR})
//     .map(value -> value.length()) // Safe operation
//     .orElse(0); // Default value if null