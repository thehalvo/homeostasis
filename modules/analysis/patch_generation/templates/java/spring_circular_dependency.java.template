/**
 * Template for fixing Spring circular dependency issues
 * 
 * This template provides solutions for resolving circular dependency problems.
 * Original error: ${ERROR_TYPE}: ${ERROR_MESSAGE}
 */

// OPTION 1: Use @Lazy annotation to break the cycle
// This defers the initialization of one of the beans
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class ServiceA {
    
    private final ServiceB serviceB;
    
    @Autowired
    public ServiceA(@Lazy ServiceB serviceB) { // Add @Lazy here
        this.serviceB = serviceB;
    }
    
    // Methods using serviceB
}

@Service
public class ServiceB {
    
    private final ServiceA serviceA;
    
    @Autowired
    public ServiceB(ServiceA serviceA) {
        this.serviceA = serviceA;
    }
    
    // Methods using serviceA
}

// OPTION 2: Use setter injection instead of constructor injection
@Service
public class ServiceA {
    
    private ServiceB serviceB;
    
    // No ServiceB in constructor
    public ServiceA() {
    }
    
    @Autowired
    public void setServiceB(ServiceB serviceB) { // Setter injection
        this.serviceB = serviceB;
    }
    
    // Methods using serviceB
}

@Service
public class ServiceB {
    
    private ServiceA serviceA;
    
    // No ServiceA in constructor
    public ServiceB() {
    }
    
    @Autowired
    public void setServiceA(ServiceA serviceA) { // Setter injection
        this.serviceA = serviceA;
    }
    
    // Methods using serviceA
}

// OPTION 3: Use an ApplicationContext lookup (avoid if possible)
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Service
public class ServiceA implements ApplicationContextAware {
    
    private ApplicationContext applicationContext;
    
    @Override
    public void setApplicationContext(ApplicationContext applicationContext) {
        this.applicationContext = applicationContext;
    }
    
    // Use the applicationContext to get ServiceB when needed
    public void someMethod() {
        ServiceB serviceB = applicationContext.getBean(ServiceB.class);
        serviceB.doSomething();
    }
}

// OPTION 4: Restructure with an interface (best solution)
// Create an interface for one of the services
public interface ServiceAInterface {
    void performAction();
    // Other methods
}

@Service
public class ServiceAImpl implements ServiceAInterface {
    
    private final ServiceB serviceB;
    
    @Autowired
    public ServiceAImpl(ServiceB serviceB) {
        this.serviceB = serviceB;
    }
    
    @Override
    public void performAction() {
        // Implementation
    }
}

@Service
public class ServiceB {
    
    private final ServiceAInterface serviceA; // Using interface instead
    
    @Autowired
    public ServiceB(ServiceAInterface serviceA) {
        this.serviceA = serviceA;
    }
    
    // Methods using serviceA
}

// OPTION 5: Use an event-driven approach with Spring Events
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.ApplicationEventPublisherAware;
import org.springframework.context.event.EventListener;

@Service
public class ServiceA implements ApplicationEventPublisherAware {
    
    private ApplicationEventPublisher publisher;
    
    @Override
    public void setApplicationEventPublisher(ApplicationEventPublisher publisher) {
        this.publisher = publisher;
    }
    
    public void triggerAction() {
        // Instead of calling ServiceB directly, publish an event
        publisher.publishEvent(new ActionEvent(this, "Some data"));
    }
}

@Service
public class ServiceB {
    
    // No direct reference to ServiceA
    
    @EventListener
    public void handleAction(ActionEvent event) {
        // React to events published by ServiceA
        String data = event.getData();
        // Process data
    }
}

// Event class
public class ActionEvent {
    private final Object source;
    private final String data;
    
    public ActionEvent(Object source, String data) {
        this.source = source;
        this.data = data;
    }
    
    public Object getSource() {
        return source;
    }
    
    public String getData() {
        return data;
    }
}

// Choose the most appropriate option based on your specific scenario and design constraints