// app/services/{{service_name}}.js
import Service from '@ember/service';
import { inject as service } from '@ember/service';
import { tracked } from '@glimmer/tracking';
import { action } from '@ember/object';

/**
 * {{service_description}}
 * 
 * @service {{service_name}}
 */
export default class {{service_class_name}}Service extends Service {
  // Inject other services
  @service store;
  @service router;
  @service session;
  
  // Tracked properties
  @tracked isLoading = false;
  @tracked error = null;
  @tracked lastUpdated = null;
  @tracked items = [];
  
  // Lifecycle hooks
  constructor() {
    super(...arguments);
    this.initialize();
  }
  
  initialize() {
    // Initialize service state
    this.loadItems();
  }
  
  // Methods
  async loadItems() {
    if (this.isLoading) return;
    
    try {
      this.isLoading = true;
      this.error = null;
      
      // Fetch data from store
      const items = await this.store.findAll('{{model_name}}');
      this.items = items.toArray();
      this.lastUpdated = new Date();
      
      return this.items;
    } catch (error) {
      this.error = error;
      console.error('Error loading items:', error);
      throw error;
    } finally {
      this.isLoading = false;
    }
  }
  
  getItem(id) {
    return this.items.find(item => item.id === id);
  }
  
  // Actions
  @action
  async createItem(data) {
    try {
      const record = this.store.createRecord('{{model_name}}', {
        ...data,
        createdAt: new Date()
      });
      
      await record.save();
      await this.loadItems();
      return record;
    } catch (error) {
      this.error = error;
      console.error('Error creating item:', error);
      throw error;
    }
  }
  
  @action
  async updateItem(id, data) {
    try {
      const record = await this.store.findRecord('{{model_name}}', id);
      
      // Update properties
      Object.keys(data).forEach(key => {
        record[key] = data[key];
      });
      
      record.updatedAt = new Date();
      await record.save();
      
      // Refresh list
      await this.loadItems();
      return record;
    } catch (error) {
      this.error = error;
      console.error('Error updating item:', error);
      throw error;
    }
  }
  
  @action
  async deleteItem(id) {
    try {
      const record = await this.store.findRecord('{{model_name}}', id);
      await record.destroyRecord();
      
      // Refresh list
      await this.loadItems();
      return true;
    } catch (error) {
      this.error = error;
      console.error('Error deleting item:', error);
      throw error;
    }
  }
}