{
  "metadata": {
    "name": "Vue Common Errors",
    "description": "Common Vue.js error patterns and their fixes",
    "version": "1.0.0",
    "language": "vue",
    "framework": "vue",
    "last_updated": "2024-01-01"
  },
  "rules": [
    {
      "id": "vue_component_not_found",
      "pattern": "(?i)failed to resolve component:\\s*(.+)",
      "category": "vue",
      "subcategory": "components",
      "severity": "error",
      "confidence": "high",
      "reliability": "high",
      "root_cause": "vue_component_not_found",
      "suggestion": "Check component import and registration. Ensure the component is properly imported and declared in the components object.",
      "fix_commands": [
        "Import the component: import MyComponent from './MyComponent.vue'",
        "Register in components: { MyComponent }",
        "Check component name spelling and case sensitivity"
      ],
      "tags": [
        "vue",
        "components",
        "import",
        "registration"
      ],
      "examples": [
        "Failed to resolve component: MyButton"
      ],
      "description": "Vue Component Not Found"
    },
    {
      "id": "vue_template_compile_error",
      "pattern": "(?i)template compilation error",
      "category": "vue",
      "subcategory": "templates",
      "severity": "error",
      "confidence": "high",
      "reliability": "high",
      "root_cause": "vue_template_compilation_error",
      "suggestion": "Check Vue template syntax, directives, and bindings for errors.",
      "fix_commands": [
        "Validate template syntax",
        "Check directive usage (v-if, v-for, v-model)",
        "Ensure proper closing tags",
        "Check expression syntax in bindings"
      ],
      "tags": [
        "vue",
        "template",
        "compilation",
        "syntax"
      ],
      "examples": [
        "Template compilation error: invalid expression"
      ],
      "description": "Vue Template Compile"
    },
    {
      "id": "vue_prop_validation_failed",
      "pattern": "(?i)invalid prop:\\s*(.+)",
      "category": "vue",
      "subcategory": "props",
      "severity": "warning",
      "confidence": "high",
      "reliability": "high",
      "root_cause": "vue_prop_validation_failed",
      "suggestion": "Check prop types and validation. Ensure passed props match expected types.",
      "fix_commands": [
        "Verify prop type definition",
        "Check passed prop value type",
        "Add proper prop validation",
        "Use default values for optional props"
      ],
      "tags": [
        "vue",
        "props",
        "validation",
        "types"
      ],
      "examples": [
        "Invalid prop: type check failed for prop \"count\". Expected Number, got String."
      ],
      "description": "Vue Prop Validation Failed"
    },
    {
      "id": "vue_duplicate_keys",
      "pattern": "(?i)duplicate keys detected:\\s*(.+)",
      "category": "vue",
      "subcategory": "templates",
      "severity": "warning",
      "confidence": "high",
      "reliability": "high",
      "root_cause": "vue_duplicate_keys_in_list",
      "suggestion": "Ensure unique keys in v-for loops. Each item should have a unique key attribute.",
      "fix_commands": [
        "Add unique :key attribute to v-for elements",
        "Use item.id or unique identifier as key",
        "Avoid using array index as key if list order changes"
      ],
      "tags": [
        "vue",
        "v-for",
        "keys",
        "template"
      ],
      "examples": [
        "Duplicate keys detected: '0'. This may cause update errors."
      ],
      "description": "Vue Duplicate Keys"
    },
    {
      "id": "vue_reactivity_lost",
      "pattern": "(?i)reactivity lost|not reactive",
      "category": "vue",
      "subcategory": "reactivity",
      "severity": "warning",
      "confidence": "medium",
      "reliability": "medium",
      "root_cause": "vue_reactivity_lost",
      "suggestion": "Ensure proper use of Vue's reactivity system with ref(), reactive(), or proper data definition.",
      "fix_commands": [
        "Use ref() for primitive values",
        "Use reactive() for objects",
        "Avoid destructuring reactive objects",
        "Use toRef() or toRefs() when needed"
      ],
      "tags": [
        "vue",
        "reactivity",
        "ref",
        "reactive"
      ],
      "examples": [
        "Reactivity lost after destructuring"
      ],
      "description": "Vue Reactivity Lost"
    },
    {
      "id": "vue_lifecycle_error",
      "pattern": "(?i)error in (.+) hook",
      "category": "vue",
      "subcategory": "lifecycle",
      "severity": "error",
      "confidence": "high",
      "reliability": "high",
      "root_cause": "vue_lifecycle_hook_error",
      "suggestion": "Check lifecycle hook implementation for errors. Handle async operations properly.",
      "fix_commands": [
        "Add error handling in lifecycle hooks",
        "Check async operations",
        "Ensure proper cleanup in beforeDestroy/unmounted",
        "Validate component state"
      ],
      "tags": [
        "vue",
        "lifecycle",
        "hooks",
        "error-handling"
      ],
      "examples": [
        "Error in mounted hook: \"Cannot read property of undefined\""
      ],
      "description": "Vue Lifecycle"
    },
    {
      "id": "vue_event_handler_error",
      "pattern": "(?i)error in event handler",
      "category": "vue",
      "subcategory": "events",
      "severity": "error",
      "confidence": "high",
      "reliability": "high",
      "root_cause": "vue_event_handler_error",
      "suggestion": "Check event handler implementation and ensure proper error handling.",
      "fix_commands": [
        "Add try-catch blocks in event handlers",
        "Check method existence and parameters",
        "Validate event object usage",
        "Ensure proper this binding"
      ],
      "tags": [
        "vue",
        "events",
        "handlers",
        "error-handling"
      ],
      "examples": [
        "Error in event handler for \"click\""
      ],
      "description": "Vue Event Handler"
    },
    {
      "id": "vue_directive_error",
      "pattern": "(?i)directive (.+) error|invalid directive",
      "category": "vue",
      "subcategory": "directives",
      "severity": "error",
      "confidence": "high",
      "reliability": "high",
      "root_cause": "vue_directive_error",
      "suggestion": "Check directive usage and implementation. Ensure proper directive syntax.",
      "fix_commands": [
        "Verify directive name and syntax",
        "Check directive registration",
        "Validate directive arguments and modifiers",
        "Ensure proper directive implementation"
      ],
      "tags": [
        "vue",
        "directives",
        "custom-directives"
      ],
      "examples": [
        "Directive v-my-directive error: binding value required"
      ],
      "description": "Vue Directive"
    },
    {
      "id": "vue_memory_leak",
      "pattern": "(?i)memory leak|listeners not removed|timers not cleared",
      "category": "vue",
      "subcategory": "performance",
      "severity": "warning",
      "confidence": "medium",
      "reliability": "medium",
      "root_cause": "vue_memory_leak",
      "suggestion": "Ensure proper cleanup of event listeners, timers, and subscriptions in component lifecycle.",
      "fix_commands": [
        "Remove event listeners in beforeDestroy/unmounted",
        "Clear timers and intervals",
        "Unsubscribe from observables",
        "Clean up DOM references"
      ],
      "tags": [
        "vue",
        "memory-leak",
        "cleanup",
        "performance"
      ],
      "examples": [
        "Memory leak detected: event listeners not removed"
      ],
      "description": "Vue Memory Leak"
    },
    {
      "id": "vue_hydration_mismatch",
      "pattern": "(?i)hydration.*mismatch|ssr.*mismatch",
      "category": "vue",
      "subcategory": "ssr",
      "severity": "error",
      "confidence": "high",
      "reliability": "high",
      "root_cause": "vue_hydration_mismatch",
      "suggestion": "Ensure server and client render the same content. Check for differences in initial state.",
      "fix_commands": [
        "Ensure consistent initial state",
        "Avoid client-only content in SSR",
        "Use <ClientOnly> wrapper for client-specific components",
        "Check for async data loading differences"
      ],
      "tags": [
        "vue",
        "ssr",
        "hydration",
        "nuxt"
      ],
      "examples": [
        "Hydration failed because the initial UI does not match"
      ],
      "description": "Vue Hydration Mismatch"
    }
  ],
  "name": "Vue Common Errors"
}