{
  "name": "Swift Swift Protocols Errors",
  "version": "1.0.0",
  "description": "Swift protocol-related error detection rules",
  "rules": [
    {
      "id": "swift_protocol_conformance_missing",
      "category": "protocols",
      "type": "conformance_error",
      "pattern": "Type '.*' does not conform to protocol '.*'",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Implement all required protocol methods and properties, or provide default implementations in protocol extensions",
      "root_cause": "swift_missing_protocol_conformance",
      "tags": [
        "swift",
        "protocol",
        "conformance",
        "requirements"
      ],
      "description": "Swift Protocol Conformance Missing"
    },
    {
      "id": "swift_protocol_witness_not_found",
      "category": "protocols",
      "type": "witness_error",
      "pattern": "Protocol requirement '.*' cannot be satisfied|witness matching requirement '.*' not found",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Ensure the method/property signature exactly matches the protocol requirement, including parameter labels and types",
      "root_cause": "swift_protocol_witness_mismatch",
      "tags": [
        "swift",
        "protocol",
        "witness",
        "signature"
      ],
      "description": "Swift Protocol Witness Not Found"
    },
    {
      "id": "swift_associated_type_inference_failure",
      "category": "protocols",
      "type": "associated_type",
      "pattern": "Cannot infer associated type '.*'|Associated type '.*' could not be inferred",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Explicitly specify the associated type using typealias or provide enough context for type inference",
      "root_cause": "swift_associated_type_inference",
      "tags": [
        "swift",
        "protocol",
        "associated_type",
        "generics"
      ],
      "description": "Swift Associated Type Inference Failure"
    },
    {
      "id": "swift_protocol_extension_ambiguity",
      "category": "protocols",
      "type": "extension_conflict",
      "pattern": "Ambiguous use of '.*'|Multiple matching functions named '.*'",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Disambiguate by casting to specific type or renaming conflicting methods in protocol extensions",
      "root_cause": "swift_protocol_extension_ambiguity",
      "tags": [
        "swift",
        "protocol",
        "extension",
        "ambiguity"
      ],
      "description": "Swift Protocol Extension Ambiguity"
    },
    {
      "id": "swift_protocol_default_implementation_override",
      "category": "protocols",
      "type": "default_implementation",
      "pattern": "Method '.*' with Objective-C selector '.*' conflicts with|Default implementation of '.*' cannot be overridden",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Check protocol extension constraints and ensure proper method dispatch (static vs dynamic)",
      "root_cause": "swift_protocol_default_override",
      "tags": [
        "swift",
        "protocol",
        "extension",
        "override"
      ],
      "description": "Swift Protocol Default Implementation Override"
    },
    {
      "id": "swift_protocol_composition_error",
      "category": "protocols",
      "type": "composition",
      "pattern": "Protocol '.*' can only be used as a generic constraint|Protocol composition type '.*' cannot be used",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Use protocol composition correctly with & operator or as generic constraints",
      "root_cause": "swift_protocol_composition",
      "tags": [
        "swift",
        "protocol",
        "composition",
        "constraint"
      ],
      "description": "Swift Protocol Composition"
    },
    {
      "id": "swift_existential_type_error",
      "category": "protocols",
      "type": "existential",
      "pattern": "Protocol '.*' as a type cannot conform to itself|Cannot use protocol '.*' as a type",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Use 'any' keyword for existential types or generic constraints instead of protocol as concrete type",
      "root_cause": "swift_existential_type",
      "tags": [
        "swift",
        "protocol",
        "existential",
        "any"
      ],
      "description": "Swift Existential Type"
    },
    {
      "id": "swift_protocol_self_requirement",
      "category": "protocols",
      "type": "self_constraint",
      "pattern": "Protocol '.*' can only be used as a generic constraint because it has Self or associated type requirements",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Use the protocol as a generic constraint or create a type-erased wrapper",
      "root_cause": "swift_protocol_self_requirement",
      "tags": [
        "swift",
        "protocol",
        "self",
        "constraint"
      ],
      "description": "Swift Protocol Self Requirement"
    },
    {
      "id": "swift_protocol_init_requirement",
      "category": "protocols",
      "type": "initializer",
      "pattern": "Initializer requirement '.*' can only be satisfied by a 'required' initializer",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Mark the initializer as 'required' in the conforming class",
      "root_cause": "swift_protocol_required_init",
      "tags": [
        "swift",
        "protocol",
        "init",
        "required"
      ],
      "description": "Swift Protocol Init Requirement"
    },
    {
      "id": "swift_protocol_mutating_requirement",
      "category": "protocols",
      "type": "mutating",
      "pattern": "Cannot use mutating member on immutable value|Cannot assign to property: '.*' is immutable",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "For value types, ensure the instance is mutable (var) when calling mutating methods",
      "root_cause": "swift_protocol_mutating",
      "tags": [
        "swift",
        "protocol",
        "mutating",
        "value_type"
      ],
      "description": "Swift Protocol Mutating Requirement"
    },
    {
      "id": "swift_protocol_objc_interop",
      "category": "protocols",
      "type": "objc_interop",
      "pattern": "@objc can only be used with members of classes, @objc protocols",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Only use @objc with class protocols or consider removing @objc requirement",
      "root_cause": "swift_protocol_objc",
      "tags": [
        "swift",
        "protocol",
        "objc",
        "interop"
      ],
      "description": "Swift Protocol Objc Interop"
    },
    {
      "id": "swift_protocol_generic_where_clause",
      "category": "protocols",
      "type": "where_clause",
      "pattern": "Where clause on associatedtype '.*' cannot be satisfied",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Ensure the where clause constraints can be satisfied by the concrete types",
      "root_cause": "swift_protocol_where_clause",
      "tags": [
        "swift",
        "protocol",
        "where",
        "constraint"
      ],
      "description": "Swift Protocol Generic Where Clause"
    },
    {
      "id": "swift_protocol_retroactive_conformance",
      "category": "protocols",
      "type": "retroactive",
      "pattern": "Redundant conformance of '.*' to protocol '.*'|Extension of type '.*' cannot conform to protocol",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Check for duplicate conformances or ensure the type can be extended with the protocol",
      "root_cause": "swift_retroactive_conformance",
      "tags": [
        "swift",
        "protocol",
        "extension",
        "conformance"
      ],
      "description": "Swift Protocol Retroactive Conformance"
    },
    {
      "id": "swift_protocol_conditional_conformance",
      "category": "protocols",
      "type": "conditional",
      "pattern": "Conditional conformance of type '.*' to protocol '.*' does not imply conformance",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Understand that conditional conformances don't automatically apply - check the conditions",
      "root_cause": "swift_conditional_conformance",
      "tags": [
        "swift",
        "protocol",
        "conditional",
        "generics"
      ],
      "description": "Swift Protocol Conditional Conformance"
    },
    {
      "id": "swift_protocol_primary_associated_type",
      "category": "protocols",
      "type": "primary_associated_type",
      "pattern": "Cannot specialize protocol type '.*'|Primary associated type '.*' cannot be inferred",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Specify primary associated types in angle brackets or ensure they can be inferred",
      "root_cause": "swift_primary_associated_type",
      "tags": [
        "swift",
        "protocol",
        "associated_type",
        "primary"
      ],
      "description": "Swift Protocol Primary Associated Type"
    }
  ]
}