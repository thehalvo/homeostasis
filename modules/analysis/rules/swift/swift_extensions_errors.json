{
  "version": "1.0.0",
  "description": "Swift extension-related error detection rules",
  "rules": [
    {
      "id": "swift_extension_access_control",
      "category": "extensions",
      "type": "access_control",
      "pattern": "Extension of .* type '.*' cannot have.*access|'.*' modifier cannot be used in extensions",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Extensions cannot have stored properties or explicit access control on the extension itself. Use computed properties or methods instead",
      "root_cause": "swift_extension_access_control",
      "tags": ["swift", "extension", "access", "modifier"]
    },
    {
      "id": "swift_extension_stored_property",
      "category": "extensions",
      "type": "stored_property",
      "pattern": "Extensions must not contain stored properties|Cannot declare stored property in extension",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Use computed properties, associated objects (for classes), or static properties in extensions",
      "root_cause": "swift_extension_stored_property",
      "tags": ["swift", "extension", "property", "stored"]
    },
    {
      "id": "swift_extension_member_ambiguity",
      "category": "extensions",
      "type": "ambiguity",
      "pattern": "Ambiguous reference to member '.*'|'.*' is ambiguous for type lookup in this context",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Disambiguate by using explicit type annotations or qualifying the member access",
      "root_cause": "swift_extension_ambiguity",
      "tags": ["swift", "extension", "ambiguity", "member"]
    },
    {
      "id": "swift_extension_retroactive_conflict",
      "category": "extensions",
      "type": "retroactive_conflict",
      "pattern": "Extension declares a conformance to protocol '.*' which was already stated",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Remove duplicate protocol conformance or organize extensions to avoid conflicts",
      "root_cause": "swift_extension_duplicate_conformance",
      "tags": ["swift", "extension", "protocol", "duplicate"]
    },
    {
      "id": "swift_extension_initializer_delegation",
      "category": "extensions",
      "type": "initializer",
      "pattern": "Convenience initializer for '.*' must delegate|Designated initializer cannot be declared in extension",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Extensions can only add convenience initializers that must delegate to existing initializers",
      "root_cause": "swift_extension_init_delegation",
      "tags": ["swift", "extension", "init", "convenience"]
    },
    {
      "id": "swift_extension_conditional_member",
      "category": "extensions",
      "type": "conditional",
      "pattern": "Instance member '.*' cannot be used on type|Referencing instance method '.*' requires",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Check conditional extension constraints - the member may not be available for this specific type",
      "root_cause": "swift_conditional_extension",
      "tags": ["swift", "extension", "conditional", "constraint"]
    },
    {
      "id": "swift_extension_override_error",
      "category": "extensions",
      "type": "override",
      "pattern": "Overriding declarations in extensions is not supported|Cannot override '.*' which has been marked unavailable",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Extensions cannot override existing members. Use subclassing or protocol extensions with default implementations",
      "root_cause": "swift_extension_override",
      "tags": ["swift", "extension", "override", "inheritance"]
    },
    {
      "id": "swift_extension_generic_constraint",
      "category": "extensions",
      "type": "generic_constraint",
      "pattern": "Extension of generic type '.*' with constraints cannot have inheritance clause",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Generic extensions with where clauses cannot add protocol conformances in the same declaration",
      "root_cause": "swift_extension_generic_constraint",
      "tags": ["swift", "extension", "generic", "where"]
    },
    {
      "id": "swift_extension_computed_property_observer",
      "category": "extensions",
      "type": "property_observer",
      "pattern": "Cannot observe read-only property|Property observers cannot be added in extensions",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Property observers (willSet/didSet) cannot be added to existing properties in extensions",
      "root_cause": "swift_extension_property_observer",
      "tags": ["swift", "extension", "property", "observer"]
    },
    {
      "id": "swift_extension_nested_type",
      "category": "extensions",
      "type": "nested_type",
      "pattern": "Extension of type '.*' cannot define nested type '.*'",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Nested types must be defined in the original type declaration, not in extensions",
      "root_cause": "swift_extension_nested_type",
      "tags": ["swift", "extension", "nested", "type"]
    },
    {
      "id": "swift_extension_protocol_method_dispatch",
      "category": "extensions",
      "type": "method_dispatch",
      "pattern": "Method '.*' in protocol extension does not match any requirement",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "low",
      "suggestion": "Be aware of static vs dynamic dispatch in protocol extensions - non-required methods use static dispatch",
      "root_cause": "swift_extension_dispatch",
      "tags": ["swift", "extension", "protocol", "dispatch"]
    },
    {
      "id": "swift_extension_availability_conflict",
      "category": "extensions",
      "type": "availability",
      "pattern": "Extension member cannot be more available than|@available attribute cannot be applied in extension",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Extension members cannot have broader availability than the extended type",
      "root_cause": "swift_extension_availability",
      "tags": ["swift", "extension", "availability", "platform"]
    },
    {
      "id": "swift_extension_private_member_access",
      "category": "extensions",
      "type": "access_private",
      "pattern": "'.*' is inaccessible due to 'private' protection level|Cannot access private members from extension",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Use 'fileprivate' instead of 'private' if extension needs access to members in the same file",
      "root_cause": "swift_extension_private_access",
      "tags": ["swift", "extension", "private", "access"]
    },
    {
      "id": "swift_extension_type_constraint_mismatch",
      "category": "extensions",
      "type": "type_constraint",
      "pattern": "Type '.*' does not satisfy constraint|Extension requires that '.*' conform to '.*'",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Ensure the type meets all constraints specified in the extension's where clause",
      "root_cause": "swift_extension_constraint",
      "tags": ["swift", "extension", "constraint", "generic"]
    },
    {
      "id": "swift_extension_circular_reference",
      "category": "extensions",
      "type": "circular_reference",
      "pattern": "Circular reference|Extension of '.*' cannot reference itself",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "high",
      "suggestion": "Avoid circular dependencies between extensions and their constraints",
      "root_cause": "swift_extension_circular",
      "tags": ["swift", "extension", "circular", "reference"]
    }
  ]
}