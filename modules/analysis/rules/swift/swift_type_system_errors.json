{
  "version": "1.0.0",
  "description": "Swift type system and inference error detection rules",
  "rules": [
    {
      "id": "swift_type_inference_ambiguity",
      "category": "type_system",
      "type": "inference",
      "pattern": "Type of expression is ambiguous without more context",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Add explicit type annotation to resolve ambiguity",
      "root_cause": "swift_ambiguous_type",
      "tags": ["swift", "type", "inference", "ambiguous"]
    },
    {
      "id": "swift_property_wrapper_error",
      "category": "type_system",
      "type": "property_wrapper",
      "pattern": "Property wrapper cannot be applied to|Invalid use of property wrapper",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Check property wrapper requirements and initialization",
      "root_cause": "swift_property_wrapper",
      "tags": ["swift", "property_wrapper", "attribute", "type"]
    },
    {
      "id": "swift_result_builder_error",
      "category": "type_system",
      "type": "result_builder",
      "pattern": "Result builder '.*' does not implement|Cannot use .* in result builder",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Ensure all statements in result builder conform to builder requirements",
      "root_cause": "swift_result_builder",
      "tags": ["swift", "result_builder", "dsl", "type"]
    },
    {
      "id": "swift_enum_associated_value_extraction",
      "category": "type_system",
      "type": "enum_associated",
      "pattern": "Pattern cannot match values of type|Enum case '.*' cannot be used as an instance member",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Use pattern matching or if case to extract associated values from enums",
      "root_cause": "swift_enum_extraction",
      "tags": ["swift", "enum", "associated", "pattern"]
    },
    {
      "id": "swift_lazy_property_initialization",
      "category": "type_system",
      "type": "lazy_init",
      "pattern": "lazy' cannot be used on a let|Cannot use mutating getter on immutable value",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Lazy properties must be var, not let, as they mutate on first access",
      "root_cause": "swift_lazy_var",
      "tags": ["swift", "lazy", "property", "initialization"]
    },
    {
      "id": "swift_type_alias_cycle",
      "category": "type_system",
      "type": "typealias",
      "pattern": "Circular reference in typealias|Type alias '.*' references itself",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Remove circular dependencies in type alias definitions",
      "root_cause": "swift_typealias_cycle",
      "tags": ["swift", "typealias", "circular", "type"]
    },
    {
      "id": "swift_dynamic_member_lookup",
      "category": "type_system",
      "type": "dynamic_member",
      "pattern": "@dynamicMemberLookup attribute requires .* to have a 'subscript'",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Implement required subscript(dynamicMember:) for @dynamicMemberLookup",
      "root_cause": "swift_dynamic_member",
      "tags": ["swift", "dynamic", "member", "subscript"]
    },
    {
      "id": "swift_function_type_conversion",
      "category": "type_system",
      "type": "function_type",
      "pattern": "Cannot convert value of type '\\(.*\\) -> .*' to expected argument type '\\(.*\\) -> .*'",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Function types must match exactly including parameter types and return type",
      "root_cause": "swift_function_type",
      "tags": ["swift", "function", "type", "conversion"]
    },
    {
      "id": "swift_tuple_element_label_mismatch",
      "category": "type_system",
      "type": "tuple",
      "pattern": "Cannot convert value of type '\\(.*:.*\\)' to specified type|Tuple element labels do not match",
      "confidence": "high",
      "reliability": "high",
      "severity": "low",
      "suggestion": "Tuple types must match including element labels or use type alias",
      "root_cause": "swift_tuple_labels",
      "tags": ["swift", "tuple", "label", "type"]
    },
    {
      "id": "swift_keypaths_type_error",
      "category": "type_system",
      "type": "keypath",
      "pattern": "Cannot convert value of type 'KeyPath<.*>' to expected|Key path cannot refer to",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Ensure keypath types match and properties are accessible",
      "root_cause": "swift_keypath_type",
      "tags": ["swift", "keypath", "type", "property"]
    },
    {
      "id": "swift_never_type_unreachable",
      "category": "type_system",
      "type": "never",
      "pattern": "Code after 'return' will never be executed|Function with uninhabited return type 'Never'",
      "confidence": "high",
      "reliability": "high",
      "severity": "low",
      "suggestion": "Code after Never-returning functions (like fatalError) is unreachable",
      "root_cause": "swift_never_type",
      "tags": ["swift", "never", "unreachable", "type"]
    },
    {
      "id": "swift_type_annotation_redundant",
      "category": "type_system",
      "type": "redundant_annotation",
      "pattern": "Explicitly specified type '.*' adds unnecessary complexity",
      "confidence": "low",
      "reliability": "low",
      "severity": "low",
      "suggestion": "Consider removing redundant type annotations where type can be inferred",
      "root_cause": "swift_redundant_type",
      "tags": ["swift", "type", "annotation", "redundant"]
    },
    {
      "id": "swift_any_vs_anyobject_confusion",
      "category": "type_system",
      "type": "any_type",
      "pattern": "Cannot convert value of type 'Any' to type 'AnyObject'|Value of protocol type .* cannot conform",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Use Any for any type, AnyObject for class types only",
      "root_cause": "swift_any_anyobject",
      "tags": ["swift", "any", "anyobject", "type"]
    },
    {
      "id": "swift_static_vs_class_member",
      "category": "type_system",
      "type": "static_class",
      "pattern": "Static member '.*' cannot be used on instance|Class member '.*' cannot be used on protocol metatype",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Use 'static' for structs/enums, 'class' for overridable class members",
      "root_cause": "swift_static_class",
      "tags": ["swift", "static", "class", "member"]
    },
    {
      "id": "swift_literal_type_default",
      "category": "type_system",
      "type": "literal",
      "pattern": "Integer literal '.*' overflows when stored into|Could not infer type of literal",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Add type annotation for literals when default type inference is insufficient",
      "root_cause": "swift_literal_type",
      "tags": ["swift", "literal", "type", "inference"]
    }
  ]
}