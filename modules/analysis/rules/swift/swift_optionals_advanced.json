{
  "name": "Swift Swift Optionals Advanced",
  "version": "1.0.0",
  "description": "Advanced Swift optional handling error detection rules",
  "rules": [
    {
      "id": "swift_implicitly_unwrapped_optional_nil",
      "category": "optionals",
      "type": "implicit_unwrap",
      "pattern": "Unexpectedly found nil while implicitly unwrapping an Optional value",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Avoid implicitly unwrapped optionals (!) in property declarations. Use regular optionals with proper unwrapping",
      "root_cause": "swift_implicit_unwrap_nil",
      "tags": [
        "swift",
        "optional",
        "implicit",
        "nil"
      ],
      "description": "Swift Implicitly Unwrapped Optional Nil"
    },
    {
      "id": "swift_optional_binding_pattern_error",
      "category": "optionals",
      "type": "binding_pattern",
      "pattern": "Initializer for conditional binding must have Optional type|Cannot convert value of type '.*' to specified type '.*\\?'",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Ensure the value being bound is actually optional. Remove unnecessary optional binding for non-optional values",
      "root_cause": "swift_optional_binding_non_optional",
      "tags": [
        "swift",
        "optional",
        "binding",
        "if_let"
      ],
      "description": "Swift Optional Binding Pattern"
    },
    {
      "id": "swift_nil_coalescing_type_mismatch",
      "category": "optionals",
      "type": "nil_coalescing",
      "pattern": "Binary operator '\\?\\?' cannot be applied to operands|Result values in '\\?\\?' expression have mismatching types",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Ensure both sides of ?? operator have compatible types. The default value must match the unwrapped type",
      "root_cause": "swift_nil_coalescing_type",
      "tags": [
        "swift",
        "optional",
        "nil_coalescing",
        "type"
      ],
      "description": "Swift Nil Coalescing Type Mismatch"
    },
    {
      "id": "swift_optional_map_misuse",
      "category": "optionals",
      "type": "map_transform",
      "pattern": "Cannot convert return expression of type '.*\\?\\?' to return type|Double optional",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Use flatMap instead of map when the transform returns an optional to avoid double optionals",
      "root_cause": "swift_optional_map_flatmap",
      "tags": [
        "swift",
        "optional",
        "map",
        "flatMap"
      ],
      "description": "Swift Optional Map Misuse"
    },
    {
      "id": "swift_guard_let_scope_error",
      "category": "optionals",
      "type": "guard_scope",
      "pattern": "Variable '.*' was never used|guard body must not fall through",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "low",
      "suggestion": "Guard statements must transfer control (return, throw, break, continue) in the else block",
      "root_cause": "swift_guard_control_flow",
      "tags": [
        "swift",
        "optional",
        "guard",
        "scope"
      ],
      "description": "Swift Guard Let Scope"
    },
    {
      "id": "swift_optional_chaining_void_confusion",
      "category": "optionals",
      "type": "optional_chaining",
      "pattern": "Expression of type '.*\\?' is unused|Result of call to '.*' is unused",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "low",
      "suggestion": "Optional chaining on void methods returns Void? - use if statement or ignore with _ =",
      "root_cause": "swift_optional_chaining_void",
      "tags": [
        "swift",
        "optional",
        "chaining",
        "void"
      ],
      "description": "Swift Optional Chaining Void Confusion"
    },
    {
      "id": "swift_optional_comparison_error",
      "category": "optionals",
      "type": "comparison",
      "pattern": "Binary operator '.*' cannot be applied to two '.*\\?' operands|Comparing non-optional value",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Unwrap optionals before comparison or use nil-coalescing to provide defaults",
      "root_cause": "swift_optional_comparison",
      "tags": [
        "swift",
        "optional",
        "comparison",
        "operator"
      ],
      "description": "Swift Optional Comparison"
    },
    {
      "id": "swift_optional_try_confusion",
      "category": "optionals",
      "type": "try_optional",
      "pattern": "Call can throw but is not marked with 'try'|No calls to throwing functions occur within 'try'",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Use try? for optional result, try! for force try, or proper do-catch for error handling",
      "root_cause": "swift_optional_try",
      "tags": [
        "swift",
        "optional",
        "try",
        "error"
      ],
      "description": "Swift Optional Try Confusion"
    },
    {
      "id": "swift_multiple_optional_binding",
      "category": "optionals",
      "type": "multiple_binding",
      "pattern": "Expected expression after ',' in 'if' condition|Cannot convert value of type",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "low",
      "suggestion": "Separate multiple optional bindings with commas, ensure all are optionals",
      "root_cause": "swift_multiple_optional_binding",
      "tags": [
        "swift",
        "optional",
        "binding",
        "multiple"
      ],
      "description": "Swift Multiple Optional Binding"
    },
    {
      "id": "swift_optional_as_any_warning",
      "category": "optionals",
      "type": "any_casting",
      "pattern": "Expression implicitly coerced from '.*\\?' to 'Any'|Coercion of implicitly unwrappable value",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "low",
      "suggestion": "Explicitly handle optional before casting to Any to avoid unexpected optional wrapping",
      "root_cause": "swift_optional_any_coercion",
      "tags": [
        "swift",
        "optional",
        "any",
        "casting"
      ],
      "description": "Swift Optional As Any Warning"
    },
    {
      "id": "swift_optional_in_string_interpolation",
      "category": "optionals",
      "type": "string_interpolation",
      "pattern": "String interpolation produces a debug description for an optional value",
      "confidence": "high",
      "reliability": "high",
      "severity": "low",
      "suggestion": "Unwrap optional or use nil-coalescing (?? \"default\") in string interpolation to avoid \"Optional(...)\" output",
      "root_cause": "swift_optional_interpolation",
      "tags": [
        "swift",
        "optional",
        "string",
        "interpolation"
      ],
      "description": "Swift Optional In String Interpolation"
    },
    {
      "id": "swift_optional_closure_capture",
      "category": "optionals",
      "type": "closure_capture",
      "pattern": "Value of optional type '.*\\?' must be unwrapped|Closure captures '.*' before it is declared",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Use [weak self] or [unowned self] in closures, then safely unwrap with guard let",
      "root_cause": "swift_optional_closure_capture",
      "tags": [
        "swift",
        "optional",
        "closure",
        "capture"
      ],
      "description": "Swift Optional Closure Capture"
    },
    {
      "id": "swift_optional_collection_confusion",
      "category": "optionals",
      "type": "collection",
      "pattern": "Value of optional type '\\[.*\\]\\?' must be unwrapped|Cannot convert value of type '\\[.*\\]\\?' to expected",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Prefer empty collections over optional collections. Use nil-coalescing with empty array/dictionary",
      "root_cause": "swift_optional_collection",
      "tags": [
        "swift",
        "optional",
        "collection",
        "array"
      ],
      "description": "Swift Optional Collection Confusion"
    },
    {
      "id": "swift_optional_protocol_requirement",
      "category": "optionals",
      "type": "protocol",
      "pattern": "Property cannot be marked @objc because its type cannot be represented in Objective-C",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Optional protocol requirements require @objc, which limits types that can be used",
      "root_cause": "swift_optional_protocol",
      "tags": [
        "swift",
        "optional",
        "protocol",
        "objc"
      ],
      "description": "Swift Optional Protocol Requirement"
    },
    {
      "id": "swift_compactMap_performance",
      "category": "optionals",
      "type": "performance",
      "pattern": "Consider using 'compactMap' instead|Filtering and mapping can be combined",
      "confidence": "low",
      "reliability": "low",
      "severity": "low",
      "suggestion": "Use compactMap to filter out nils and transform in one operation for better performance",
      "root_cause": "swift_compactmap_optimization",
      "tags": [
        "swift",
        "optional",
        "compactMap",
        "performance"
      ],
      "description": "Swift Compactmap Performance"
    }
  ]
}