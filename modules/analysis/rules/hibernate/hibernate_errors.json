{
  "rules": [
    {
      "id": "hibernate_entity_not_found",
      "pattern": "org\\.hibernate\\.ObjectNotFoundException(?:.*?No row with the given identifier exists.*?|.*?entity: ([^,]+),.*?identifier: ([^\\)]+)\\)?)",
      "type": "ObjectNotFoundException",
      "description": "Entity not found with the specified identifier",
      "root_cause": "hibernate_entity_not_found",
      "suggestion": "Handle the case where the entity doesn't exist. Use Optional.ofNullable() with findById() or add explicit null checks. Consider logging the missing entity ID and provide meaningful error messages to the client.",
      "confidence": "high",
      "severity": "medium",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_query_syntax",
      "pattern": "org\\.hibernate\\.hql\\.internal\\.ast\\.QuerySyntaxException(?:.*?expecting ([^,]+), found '([^']+)'.*?|.*?expecting '([^']+)', found '([^']+)'.*?|.*?invalid path: '([^']+)'.*?|.*?(antlr\\.NoViableAltException|unexpected token).*?)",
      "type": "QuerySyntaxException",
      "description": "Syntax error in HQL/JPQL query",
      "root_cause": "hibernate_invalid_query",
      "suggestion": "Fix the syntax error in your HQL/JPQL query. Check entity names, property names, and query structure. Use named parameters or parameter binding to avoid SQL injection and syntax errors.",
      "confidence": "high",
      "severity": "medium",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_non_unique_result",
      "pattern": "org\\.hibernate\\.NonUniqueResultException(?:.*?query did not return a unique result.*?)?",
      "type": "NonUniqueResultException",
      "description": "Query expected to return a single result returned multiple results",
      "root_cause": "hibernate_multiple_results",
      "suggestion": "Use getSingleResult() only when you are certain that exactly one result will be returned. Consider using getResultList().stream().findFirst() or add additional conditions to your query to ensure uniqueness.",
      "confidence": "high",
      "severity": "medium",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_many_to_one_not_found",
      "pattern": "org\\.hibernate\\.MappingException(?:.*?Unknown entity: ([^\\s]+).*?|.*?could not resolve property: ([^ ]+) of: ([^\\)]+)\\)?)",
      "type": "MappingException",
      "description": "Entity or property not found in Hibernate mapping",
      "root_cause": "hibernate_mapping_error",
      "suggestion": "Verify entity class names and property names in mappings. Ensure all entities are properly annotated with @Entity and registered with EntityManagerFactory. Check for typos in property names referenced in queries.",
      "confidence": "high",
      "severity": "high",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_property_not_found",
      "pattern": "org\\.hibernate\\.PropertyNotFoundException(?:.*?Could not find a setter for property ([^ ]+) in class ([^\\s]+).*?|.*?Could not find a getter for property ([^ ]+) in class ([^\\s]+).*?)",
      "type": "PropertyNotFoundException",
      "description": "Property not found on entity class",
      "root_cause": "hibernate_unknown_property",
      "suggestion": "Verify property names in queries and mappings. Ensure the property exists in the entity class with proper getter/setter methods. Check for typos in property names.",
      "confidence": "high",
      "severity": "high",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_constraint_violation",
      "pattern": "org\\.hibernate\\.exception\\.ConstraintViolationException(?:.*?constraint \\[([^\\]]+)\\].*?|.*?integrity constraint violation.*?table: \"([^\"]+)\".*?|.*?cannot be null.*?)",
      "type": "ConstraintViolationException",
      "description": "Database constraint violation during entity operation",
      "root_cause": "hibernate_constraint_violation",
      "suggestion": "Ensure entity data satisfies database constraints before persisting. Add validation logic with Bean Validation (JSR 380) annotations like @NotNull, @Size, etc. Handle constraint violations gracefully with proper error messages.",
      "confidence": "high",
      "severity": "high",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_pessimistic_lock",
      "pattern": "org\\.hibernate\\.PessimisticLockException(?:.*?could not obtain pessimistic lock.*?|.*?timed out.*?|.*?dead lock.*?)",
      "type": "PessimisticLockException",
      "description": "Failed to obtain a pessimistic lock on entity",
      "root_cause": "hibernate_lock_failure",
      "suggestion": "Revisit your locking strategy. Consider using optimistic locking with @Version instead. If pessimistic locking is necessary, implement proper timeout handling and retry logic. Be mindful of the transaction isolation level.",
      "confidence": "high",
      "severity": "high",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_lazy_init",
      "pattern": "org\\.hibernate\\.LazyInitializationException(?:.*?could not initialize proxy.*?|.*?no Session.*?)",
      "type": "LazyInitializationException",
      "description": "Attempted to access a lazily-initialized collection or proxy outside of a session",
      "root_cause": "hibernate_lazy_initialization",
      "suggestion": "Ensure lazily loaded associations are accessed within an open Hibernate session. Consider using EAGER fetching for associations that are always needed, or fetch them explicitly with JOIN FETCH in your queries. Spring's OpenSessionInViewFilter can help but has its drawbacks.",
      "confidence": "high",
      "severity": "high",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_stale_state",
      "pattern": "org\\.hibernate\\.StaleStateException(?:.*?Batch update returned unexpected row count.*?|.*?optimistic lock.*?|.*?Row was updated or deleted by another transaction.*?)",
      "type": "StaleStateException",
      "description": "Concurrent modification detected during entity update",
      "root_cause": "hibernate_stale_state",
      "suggestion": "Implement optimistic locking with @Version fields to detect concurrent modifications. Provide conflict resolution logic or retry mechanisms. Consider using a pessimistic lock for critical operations where conflicts cannot be tolerated.",
      "confidence": "high",
      "severity": "high",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_data_exception",
      "pattern": "org\\.hibernate\\.exception\\.DataException(?:.*?data too long.*?|.*?value too large.*?|.*?truncation.*?|.*?incorrect.*?|.*?invalid.*?)",
      "type": "DataException",
      "description": "Data-related exception during database operation",
      "root_cause": "hibernate_invalid_data",
      "suggestion": "Validate data before persisting it to the database. Use Bean Validation constraints with appropriate limits (@Size, @Max, etc.). Ensure entity field types match database column types and sizes.",
      "confidence": "high",
      "severity": "high",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "jpa_no_transaction",
      "pattern": "javax\\.persistence\\.TransactionRequiredException(?:.*?no transaction is in progress.*?|.*?Transaction is required to perform this operation.*?)",
      "type": "TransactionRequiredException",
      "description": "Operation requires an active transaction, but none exists",
      "root_cause": "jpa_missing_transaction",
      "suggestion": "Ensure methods that modify entities are annotated with @Transactional. Check transaction boundaries and propagation settings. For Spring, verify that @EnableTransactionManagement is present and transaction manager is configured.",
      "confidence": "high",
      "severity": "high",
      "category": "jpa",
      "framework": "hibernate"
    },
    {
      "id": "jpa_entity_exists",
      "pattern": "javax\\.persistence\\.EntityExistsException(?:.*?entity with the same identifier value is already associated with the session.*?|.*?duplicate entry.*?|.*?already exists.*?)",
      "type": "EntityExistsException",
      "description": "Attempted to persist an entity that already exists",
      "root_cause": "jpa_duplicate_entity",
      "suggestion": "Check if the entity exists before persisting it. Use merge() instead of persist() when appropriate. For new entities, ensure they have unique IDs or let the database generate them.",
      "confidence": "high",
      "severity": "medium",
      "category": "jpa",
      "framework": "hibernate"
    },
    {
      "id": "jpa_entity_not_found",
      "pattern": "javax\\.persistence\\.EntityNotFoundException(?:.*?Unable to find ([^\\s]+) with id ([^\\s]+).*?)",
      "type": "EntityNotFoundException",
      "description": "Referenced entity does not exist in the database",
      "root_cause": "jpa_missing_entity",
      "suggestion": "Check if entities exist before referencing them. Use Optional<Entity> with findById() and handle empty results gracefully. Consider adding foreign key constraints in the database.",
      "confidence": "high",
      "severity": "medium",
      "category": "jpa",
      "framework": "hibernate"
    },
    {
      "id": "jpa_optimistic_lock",
      "pattern": "javax\\.persistence\\.OptimisticLockException(?:.*?optimistic locking failed.*?|.*?Row was updated or deleted by another transaction.*?)",
      "type": "OptimisticLockException",
      "description": "Optimistic locking failed due to concurrent modification",
      "root_cause": "jpa_concurrent_modification",
      "suggestion": "Implement proper conflict resolution strategy for concurrent modifications. Refresh the entity and attempt the operation again, or present the conflict to the user. Consider using pessimistic locking for highly-contended resources.",
      "confidence": "high",
      "severity": "high",
      "category": "jpa",
      "framework": "hibernate"
    },
    {
      "id": "jpa_query_timeout",
      "pattern": "javax\\.persistence\\.QueryTimeoutException(?:.*?Query execution was interrupted.*?|.*?timed out.*?)",
      "type": "QueryTimeoutException",
      "description": "Query execution timed out",
      "root_cause": "jpa_query_timeout",
      "suggestion": "Optimize the query for better performance. Add appropriate indexes on queried columns. Consider paginating results or using projections to fetch only needed data. Increase the query timeout if appropriate.",
      "confidence": "high",
      "severity": "high",
      "category": "jpa",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_session_closed",
      "pattern": "org\.hibernate\.SessionException(?:.*?Session is closed.*?|.*?Session was already closed.*?)",
      "type": "SessionException", 
      "description": "Attempted to use a closed Hibernate session",
      "root_cause": "hibernate_session_closed",
      "suggestion": "Ensure the session is open before using it. Check session lifecycle management and avoid using sessions after they have been closed. Consider using session-per-request pattern or proper session management.",
      "confidence": "high",
      "severity": "high",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_session_factory_closed",
      "pattern": "org\.hibernate\.HibernateException(?:.*?SessionFactory is closed.*?|.*?Cannot create session.*?factory.*?closed.*?)",
      "type": "HibernateException",
      "description": "Attempted to use a closed SessionFactory",
      "root_cause": "hibernate_session_factory_closed",
      "suggestion": "Ensure the SessionFactory is properly initialized and not closed before use. Check application lifecycle management and avoid closing SessionFactory prematurely.",
      "confidence": "high",
      "severity": "high",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_flush_exception",
      "pattern": "org\.hibernate\.exception\.GenericJDBCException(?:.*?could not execute statement.*?|.*?flush.*?|.*?batch.*?)",
      "type": "GenericJDBCException",
      "description": "Exception occurred during session flush operation",
      "root_cause": "hibernate_flush_error",
      "suggestion": "Check for constraint violations, SQL syntax errors, or data integrity issues. Use explicit flush() calls strategically and handle batch operations properly.",
      "confidence": "medium",
      "severity": "high",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_detached_instance",
      "pattern": "org\.hibernate\.PersistentObjectException(?:.*?detached instance passed to persist.*?|.*?detached entity passed to persist.*?)",
      "type": "PersistentObjectException",
      "description": "Attempted to persist a detached entity instance",
      "root_cause": "hibernate_detached_entity",
      "suggestion": "Use merge() instead of persist() for detached entities, or reattach the entity to the current session before persisting. Check entity state management.",
      "confidence": "high",
      "severity": "medium",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_identifier_generation",
      "pattern": "org\.hibernate\.id\.IdentifierGenerationException(?:.*?identifier generation failed.*?|.*?could not generate identifier.*?)",
      "type": "IdentifierGenerationException",
      "description": "Failed to generate entity identifier",
      "root_cause": "hibernate_id_generation_error",
      "suggestion": "Check identifier generation strategy (@GeneratedValue). Ensure sequence or table exists for SEQUENCE/TABLE strategies. Verify database permissions and identifier generator configuration.",
      "confidence": "high",
      "severity": "high",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_configuration_error",
      "pattern": "org\.hibernate\.boot\.registry\.classloading\.spi\.ClassLoadingException(?:.*?Unable to load class.*?|.*?class not found.*?)",
      "type": "ClassLoadingException",
      "description": "Unable to load required class during Hibernate configuration",
      "root_cause": "hibernate_class_loading_error",
      "suggestion": "Ensure all required dependencies are on the classpath. Check entity class names in configuration. Verify package scanning configuration and classpath setup.",
      "confidence": "high",
      "severity": "high",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_dialect_error",
      "pattern": "org\.hibernate\.HibernateException(?:.*?Access to DialectResolutionInfo cannot be null.*?|.*?dialect.*?not found.*?|.*?Unable to determine Dialect.*?)",
      "type": "HibernateException",
      "description": "Unable to determine or configure database dialect",
      "root_cause": "hibernate_dialect_configuration_error",
      "suggestion": "Explicitly configure the database dialect in hibernate.cfg.xml or application.properties. Ensure the database URL is correct and accessible for dialect auto-detection.",
      "confidence": "high",
      "severity": "high",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_schema_management_error",
      "pattern": "org\.hibernate\.tool\.schema\.spi\.SchemaManagementException(?:.*?Unable to execute schema management.*?|.*?schema creation failed.*?)",
      "type": "SchemaManagementException",
      "description": "Error during schema creation or management",
      "root_cause": "hibernate_schema_management_error",
      "suggestion": "Check database permissions for DDL operations. Verify hibernate.hbm2ddl.auto setting. Ensure database user has CREATE/ALTER/DROP privileges if schema management is enabled.",
      "confidence": "high",
      "severity": "high",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_connection_pool_error",
      "pattern": "(?:org\.hibernate\.exception\.JDBCConnectionException|java\.sql\.SQLException)(?:.*?Unable to acquire JDBC Connection.*?|.*?Connection pool exhausted.*?|.*?timeout.*?connection.*?)",
      "type": "JDBCConnectionException",
      "description": "Database connection pool exhausted or connection timeout",
      "root_cause": "hibernate_connection_pool_exhausted",
      "suggestion": "Increase connection pool size, reduce connection timeout, or optimize connection usage. Check for connection leaks and ensure proper session/connection cleanup.",
      "confidence": "high",
      "severity": "high",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_transaction_rollback",
      "pattern": "org\.hibernate\.TransactionException(?:.*?Transaction not successfully started.*?|.*?rollback.*?|.*?Transaction was marked for rollback only.*?)",
      "type": "TransactionException",
      "description": "Transaction rollback or transaction state error",
      "root_cause": "hibernate_transaction_rollback",
      "suggestion": "Handle transaction boundaries properly. Check for exceptions that caused rollback. Use @Transactional(rollbackFor) to specify rollback conditions. Implement proper error handling.",
      "confidence": "high",
      "severity": "high",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_batch_update_exception",
      "pattern": "java\.sql\.BatchUpdateException(?:.*?Batch entry.*?was aborted.*?|.*?batch update.*?failed.*?)",
      "type": "BatchUpdateException",
      "description": "Batch operation failed during execution",
      "root_cause": "hibernate_batch_operation_failed",
      "suggestion": "Check individual operations in the batch for constraint violations or data issues. Consider reducing batch size or handling batch failures gracefully. Use hibernate.order_inserts and hibernate.order_updates for better batching.",
      "confidence": "high",
      "severity": "medium",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_cache_exception",
      "pattern": "org\.hibernate\.cache\.CacheException(?:.*?Unable to.*?cache.*?|.*?cache provider.*?|.*?cache region.*?)",
      "type": "CacheException",
      "description": "Error with second-level cache configuration or operation",
      "root_cause": "hibernate_cache_error",
      "suggestion": "Check cache provider configuration and dependencies. Verify cache region settings and ensure cache provider is properly configured in hibernate.cfg.xml.",
      "confidence": "high",
      "severity": "medium",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_criteria_exception",
      "pattern": "org\.hibernate\.QueryException(?:.*?could not resolve property.*?criteria.*?|.*?criteria.*?invalid.*?|.*?unknown entity.*?criteria.*?)",
      "type": "QueryException",
      "description": "Error in Criteria API query construction",
      "root_cause": "hibernate_criteria_api_error",
      "suggestion": "Verify property names used in Criteria queries. Check entity metamodel and ensure properties exist. Use type-safe Criteria API with metamodel generation.",
      "confidence": "high",
      "severity": "medium",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_validation_exception",
      "pattern": "javax\.validation\.ConstraintViolationException(?:.*?Validation failed.*?|.*?constraint.*?violated.*?)",
      "type": "ConstraintViolationException",
      "description": "Bean Validation constraint violation",
      "root_cause": "hibernate_validation_failed",
      "suggestion": "Check entity validation constraints (@NotNull, @Size, etc.). Validate data before persisting. Handle validation errors gracefully and provide meaningful error messages.",
      "confidence": "high",
      "severity": "medium",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_metamodel_exception",
      "pattern": "javax\.persistence\.metamodel\.IllegalArgumentException(?:.*?Unable to locate Attribute.*?|.*?metamodel.*?not found.*?)",
      "type": "IllegalArgumentException",
      "description": "Error accessing JPA metamodel",
      "root_cause": "hibernate_metamodel_error",
      "suggestion": "Ensure metamodel generation is enabled and working correctly. Check entity attribute names and metamodel class generation. Verify annotation processor configuration.",
      "confidence": "high",
      "severity": "medium",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_proxy_exception",
      "pattern": "org\.hibernate\.proxy\.HibernateProxy(?:.*?proxy.*?failed.*?|.*?could not initialize proxy.*?)",
      "type": "HibernateException",
      "description": "Error with Hibernate proxy initialization",
      "root_cause": "hibernate_proxy_error",
      "suggestion": "Ensure session is open when accessing proxy properties. Use Hibernate.initialize() to force proxy loading. Consider eager fetching for frequently accessed associations.",
      "confidence": "medium",
      "severity": "medium",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_statistics_exception",
      "pattern": "org\.hibernate\.stat\.Statistics(?:.*?statistics.*?not enabled.*?|.*?unable to collect statistics.*?)",
      "type": "HibernateException",
      "description": "Error with Hibernate statistics collection",
      "root_cause": "hibernate_statistics_error",
      "suggestion": "Enable Hibernate statistics with hibernate.generate_statistics=true. Check performance monitoring configuration and ensure statistics collection is properly configured.",
      "confidence": "low",
      "severity": "low",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_envers_exception",
      "pattern": "org\.hibernate\.envers\.exception\.AuditException(?:.*?audit.*?failed.*?|.*?revision.*?error.*?)",
      "type": "AuditException",
      "description": "Error with Hibernate Envers auditing",
      "root_cause": "hibernate_envers_error",
      "suggestion": "Check Envers configuration and audit table setup. Ensure revision entity is properly configured. Verify auditing annotations and audit strategy settings.",
      "confidence": "high",
      "severity": "medium",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_search_exception",
      "pattern": "org\.hibernate\.search\.exception\.SearchException(?:.*?search.*?failed.*?|.*?index.*?error.*?)",
      "type": "SearchException",
      "description": "Error with Hibernate Search indexing",
      "root_cause": "hibernate_search_error",
      "suggestion": "Check Hibernate Search configuration and Lucene/Elasticsearch setup. Verify index directory permissions and search provider configuration.",
      "confidence": "high",
      "severity": "medium",
      "category": "hibernate",
      "framework": "hibernate"
    },
    {
      "id": "hibernate_spatial_exception",
      "pattern": "org\.hibernate\.spatial\.SpatialException(?:.*?spatial.*?operation.*?failed.*?|.*?geometry.*?error.*?)",
      "type": "SpatialException",
      "description": "Error with Hibernate Spatial operations",
      "root_cause": "hibernate_spatial_error",
      "suggestion": "Check spatial data types and functions. Ensure database supports spatial operations. Verify geometry data format and spatial reference system configuration.",
      "confidence": "high",
      "severity": "medium",
      "category": "hibernate",
      "framework": "hibernate"
    }
  ]
}