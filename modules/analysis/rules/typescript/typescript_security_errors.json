{
  "name": "TypeScript Security Vulnerability Patterns",
  "description": "Security vulnerability patterns for TypeScript applications",
  "version": "1.0.0",
  "rules": [
    {
      "id": "typescript_security_eval_usage",
      "pattern": "eval\\(|Function\\(.*\\)|setTimeout\\(.*string|setInterval\\(.*string",
      "type": "SecurityError",
      "description": "Dynamic code execution vulnerability using eval or Function constructor",
      "root_cause": "code_injection",
      "suggestion": "Avoid eval() and Function constructor, use JSON.parse() for data, pass functions not strings to setTimeout/setInterval",
      "category": "typescript",
      "subcategory": "injection",
      "severity": "critical",
      "confidence": "high",
      "tags": ["security", "eval", "injection"]
    },
    {
      "id": "typescript_security_innerHTML",
      "pattern": "innerHTML\\s*=|insertAdjacentHTML|outerHTML\\s*=|document\\.write",
      "type": "SecurityError",
      "description": "Potential XSS vulnerability through innerHTML or document.write",
      "root_cause": "xss_vulnerability",
      "suggestion": "Use textContent for text, createElement for HTML, or sanitize HTML with DOMPurify",
      "category": "typescript",
      "subcategory": "xss",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "xss", "dom"]
    },
    {
      "id": "typescript_security_open_redirect",
      "pattern": "window\\.location\\s*=.*user|location\\.href\\s*=.*input|redirect.*unvalidated",
      "type": "SecurityError",
      "description": "Open redirect vulnerability through unvalidated URL redirection",
      "root_cause": "open_redirect",
      "suggestion": "Validate redirect URLs against whitelist, use relative paths, check URL origin",
      "category": "typescript",
      "subcategory": "redirect",
      "severity": "medium",
      "confidence": "medium",
      "tags": ["security", "redirect", "validation"]
    },
    {
      "id": "typescript_security_prototype_pollution",
      "pattern": "__proto__|constructor\\.prototype|Object\\.prototype.*=|merge.*deep.*unsafe",
      "type": "SecurityError",
      "description": "Prototype pollution vulnerability through unsafe object manipulation",
      "root_cause": "prototype_pollution",
      "suggestion": "Avoid modifying prototypes, use Object.create(null) for dictionaries, validate object keys",
      "category": "typescript",
      "subcategory": "prototype",
      "severity": "high",
      "confidence": "medium",
      "tags": ["security", "prototype", "pollution"]
    },
    {
      "id": "typescript_security_regex_dos",
      "pattern": "RegExp\\(.*\\+\\+|new RegExp.*\\{\\d+,\\}\\{\\d+,|exponential.*regex",
      "type": "SecurityError",
      "description": "Regular expression vulnerable to ReDoS attacks",
      "root_cause": "regex_dos",
      "suggestion": "Avoid nested quantifiers, use non-backtracking regex, set timeouts for regex operations",
      "category": "typescript",
      "subcategory": "dos",
      "severity": "medium",
      "confidence": "medium",
      "tags": ["security", "regex", "dos"]
    },
    {
      "id": "typescript_security_localStorage_sensitive",
      "pattern": "localStorage.*password|localStorage.*token|sessionStorage.*secret|localStorage.*key",
      "type": "SecurityError",
      "description": "Storing sensitive data in localStorage/sessionStorage",
      "root_cause": "insecure_storage",
      "suggestion": "Never store sensitive data in localStorage, use secure httpOnly cookies or server-side sessions",
      "category": "typescript",
      "subcategory": "storage",
      "severity": "high",
      "confidence": "medium",
      "tags": ["security", "storage", "sensitive"]
    },
    {
      "id": "typescript_security_postMessage_origin",
      "pattern": "postMessage.*\\*|addEventListener.*message.*origin check missing|message.*no origin validation",
      "type": "SecurityError",
      "description": "Missing origin validation in postMessage communication",
      "root_cause": "origin_validation",
      "suggestion": "Always validate event.origin in message handlers, specify target origin in postMessage",
      "category": "typescript",
      "subcategory": "communication",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "postMessage", "origin"]
    },
    {
      "id": "typescript_security_insecure_random",
      "pattern": "Math\\.random\\(\\).*password|Math\\.random.*token|Math\\.random.*key",
      "type": "SecurityError",
      "description": "Using Math.random() for security-sensitive operations",
      "root_cause": "weak_randomness",
      "suggestion": "Use crypto.getRandomValues() or crypto.randomUUID() for cryptographic randomness",
      "category": "typescript",
      "subcategory": "cryptography",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "random", "cryptography"]
    },
    {
      "id": "typescript_security_unsafe_type_assertion",
      "pattern": "as any.*user.*input|as any.*external.*data|type assertion.*untrusted",
      "type": "SecurityError",
      "description": "Unsafe type assertion on untrusted data",
      "root_cause": "type_safety_bypass",
      "suggestion": "Validate external data with type guards, use unknown type and proper validation",
      "category": "typescript",
      "subcategory": "types",
      "severity": "medium",
      "confidence": "medium",
      "tags": ["security", "types", "validation"]
    },
    {
      "id": "typescript_security_sql_injection",
      "pattern": "query.*\\$\\{|raw.*sql.*concatenation|sql.*\\+.*user.*input",
      "type": "SecurityError",
      "description": "Potential SQL injection through string concatenation",
      "root_cause": "sql_injection",
      "suggestion": "Use parameterized queries, prepared statements, or query builders with proper escaping",
      "category": "typescript",
      "subcategory": "injection",
      "severity": "critical",
      "confidence": "high",
      "tags": ["security", "sql", "injection"]
    },
    {
      "id": "typescript_security_command_injection",
      "pattern": "exec\\(.*\\$\\{|spawn.*user.*input|child_process.*concatenation",
      "type": "SecurityError",
      "description": "Command injection vulnerability through user input",
      "root_cause": "command_injection",
      "suggestion": "Use array arguments for spawn, validate and sanitize inputs, avoid shell execution",
      "category": "typescript",
      "subcategory": "injection",
      "severity": "critical",
      "confidence": "high",
      "tags": ["security", "command", "injection"]
    },
    {
      "id": "typescript_security_path_traversal",
      "pattern": "path\\.join.*\\.\\.|readFile.*user.*input|fs\\..*\\.\\..*traversal",
      "type": "SecurityError",
      "description": "Path traversal vulnerability in file operations",
      "root_cause": "path_traversal",
      "suggestion": "Validate file paths, use path.resolve() and check against base directory",
      "category": "typescript",
      "subcategory": "file_access",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "path", "traversal"]
    },
    {
      "id": "typescript_security_csrf_missing",
      "pattern": "fetch.*POST.*no.*csrf|axios.*put.*missing.*token|csrf.*protection.*disabled",
      "type": "SecurityError",
      "description": "Missing CSRF protection on state-changing requests",
      "root_cause": "csrf_vulnerability",
      "suggestion": "Include CSRF tokens in requests, use SameSite cookies, implement double-submit pattern",
      "category": "typescript",
      "subcategory": "csrf",
      "severity": "high",
      "confidence": "medium",
      "tags": ["security", "csrf", "request"]
    },
    {
      "id": "typescript_security_hardcoded_secret",
      "pattern": "apiKey\\s*[:=]\\s*[\"'][\\w-]{20,}|secret\\s*[:=]\\s*[\"']|private.*key.*=.*[\"']",
      "type": "SecurityError",
      "description": "Hardcoded secrets or API keys in source code",
      "root_cause": "hardcoded_secrets",
      "suggestion": "Use environment variables, configuration files, or secret management services",
      "category": "typescript",
      "subcategory": "secrets",
      "severity": "critical",
      "confidence": "medium",
      "tags": ["security", "secrets", "credentials"]
    },
    {
      "id": "typescript_security_weak_crypto",
      "pattern": "crypto\\.createHash\\([\"']md5|crypto.*sha1|weak.*algorithm|deprecated.*crypto",
      "type": "SecurityError",
      "description": "Using weak cryptographic algorithms",
      "root_cause": "weak_cryptography",
      "suggestion": "Use SHA-256 or stronger, bcrypt/scrypt/argon2 for passwords, avoid MD5 and SHA1",
      "category": "typescript",
      "subcategory": "cryptography",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "crypto", "hash"]
    }
  ]
}