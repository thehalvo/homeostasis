{
  "description": "Common Go error patterns and fixes",
  "version": "0.1.0",
  "rules": [
    {
      "id": "go_nil_pointer",
      "pattern": "(?:nil pointer dereference|invalid memory address)",
      "type": "runtime error",
      "description": "Attempted to dereference a nil pointer",
      "root_cause": "go_nil_pointer",
      "suggestion": "Add nil checks before accessing pointers. Use safe accessor patterns.",
      "confidence": "high",
      "severity": "high",
      "category": "runtime"
    },
    {
      "id": "go_index_out_of_range",
      "pattern": "index out of range \\[(\\d+)\\] with length (\\d+)",
      "type": "runtime error",
      "description": "Array or slice index out of bounds",
      "root_cause": "go_index_out_of_range",
      "suggestion": "Add bounds checking before accessing arrays or slices. Use len() to verify index is valid.",
      "confidence": "high",
      "severity": "medium",
      "category": "runtime"
    },
    {
      "id": "go_nil_map",
      "pattern": "assignment to entry in nil map",
      "type": "runtime error",
      "description": "Attempted to write to a nil map",
      "root_cause": "go_nil_map",
      "suggestion": "Initialize maps with make(map[KeyType]ValueType) before use.",
      "confidence": "high",
      "severity": "medium",
      "category": "runtime"
    },
    {
      "id": "go_slice_bounds",
      "pattern": "slice bounds out of range",
      "type": "runtime error",
      "description": "Attempted to create a slice with invalid bounds",
      "root_cause": "go_slice_bounds",
      "suggestion": "Ensure slice bounds are within the valid range (0 <= low <= high <= cap).",
      "confidence": "high",
      "severity": "medium",
      "category": "runtime"
    },
    {
      "id": "go_divide_by_zero",
      "pattern": "(?:divide by zero|division by zero)",
      "type": "runtime error",
      "description": "Division by zero error",
      "root_cause": "go_divide_by_zero",
      "suggestion": "Add checks to prevent division by zero. Validate denominators before division operations.",
      "confidence": "high",
      "severity": "medium",
      "category": "runtime"
    },
    {
      "id": "go_interface_nil",
      "pattern": "interface conversion: (?:[\\w\\.]+) is nil, not ([\\w\\.]+)",
      "type": "runtime error",
      "description": "Attempted to type-assert a nil interface to a concrete type",
      "root_cause": "go_nil_interface_conversion",
      "suggestion": "Check if the interface is nil before performing type assertion. Use comma-ok syntax (value, ok := x.(Type)) to safely perform type assertions.",
      "confidence": "high",
      "severity": "medium",
      "category": "runtime"
    },
    {
      "id": "go_type_assertion",
      "pattern": "interface conversion: (?:[\\w\\.]+) is ([\\w\\.]+), not ([\\w\\.]+)",
      "type": "runtime error",
      "description": "Type assertion to incorrect type",
      "root_cause": "go_invalid_type_assertion",
      "suggestion": "Use comma-ok syntax (value, ok := x.(Type)) to safely perform type assertions, or confirm the concrete type using reflection before asserting.",
      "confidence": "high",
      "severity": "medium",
      "category": "runtime"
    },
    {
      "id": "go_context_canceled",
      "pattern": "context canceled",
      "type": "context.Canceled",
      "description": "Operation canceled due to context cancellation",
      "root_cause": "go_context_canceled",
      "suggestion": "Handle context cancellation explicitly in your code. This is often part of normal operation.",
      "confidence": "high",
      "severity": "low",
      "category": "core"
    },
    {
      "id": "go_context_deadline_exceeded",
      "pattern": "context deadline exceeded",
      "type": "context.DeadlineExceeded",
      "description": "Operation took too long and exceeded context deadline",
      "root_cause": "go_context_deadline",
      "suggestion": "Increase timeout duration or optimize the operation. Add appropriate error handling for timeouts.",
      "confidence": "high",
      "severity": "medium",
      "category": "core"
    },
    {
      "id": "go_file_not_exist",
      "pattern": "no such file or directory",
      "type": "os.PathError",
      "description": "Attempt to access a file that doesn't exist",
      "root_cause": "go_file_not_exist",
      "suggestion": "Check if the file exists before attempting to access it. Use os.Stat() or similar functions to verify file existence.",
      "confidence": "high",
      "severity": "medium",
      "category": "io"
    },
    {
      "id": "go_permission_denied",
      "pattern": "permission denied",
      "type": "os.PathError",
      "description": "Insufficient permissions to access a file or directory",
      "root_cause": "go_permission_denied",
      "suggestion": "Check file permissions. Ensure the application has the necessary permissions to access the resource.",
      "confidence": "high",
      "severity": "medium",
      "category": "io"
    },
    {
      "id": "go_panic_recovered",
      "pattern": "recovered from panic: (.*)",
      "type": "panic",
      "description": "Panic was caught and recovered",
      "root_cause": "go_panic",
      "suggestion": "Investigate the panic cause. Add proper error handling to prevent panics. Use recover() carefully.",
      "confidence": "high",
      "severity": "high",
      "category": "panic"
    },
    {
      "id": "go_panic_goroutine",
      "pattern": "panic: (.*) goroutine \\d+ \\[running\\]",
      "type": "panic",
      "description": "Unrecovered panic in goroutine",
      "root_cause": "go_goroutine_panic",
      "suggestion": "Add defer/recover in goroutines to handle panics. Ensure goroutines don't crash the program.",
      "confidence": "high",
      "severity": "critical",
      "category": "panic"
    },
    {
      "id": "go_string_index_out_of_range",
      "pattern": "panic: runtime error: index out of range \\[(\\d+)\\] with length (\\d+).*string",
      "type": "runtime error",
      "description": "String index out of bounds",
      "root_cause": "go_string_bounds",
      "suggestion": "Check string length before indexing. Use len() to validate indices. Consider using rune iteration for Unicode.",
      "confidence": "high",
      "severity": "medium",
      "category": "runtime"
    },
    {
      "id": "go_make_negative_size",
      "pattern": "panic: runtime error: makeslice: len out of range",
      "type": "runtime error",
      "description": "Attempting to make slice with negative or too large size",
      "root_cause": "go_make_size",
      "suggestion": "Validate size parameters before calling make(). Ensure sizes are non-negative and within memory limits.",
      "confidence": "high",
      "severity": "high",
      "category": "runtime"
    },
    {
      "id": "go_closed_network_connection",
      "pattern": "use of closed network connection",
      "type": "net.OpError",
      "description": "Attempting to use a closed network connection",
      "root_cause": "go_closed_connection",
      "suggestion": "Check connection state before use. Handle connection lifecycle properly. Implement reconnection logic.",
      "confidence": "high",
      "severity": "medium",
      "category": "network"
    },
    {
      "id": "go_http_handler_panic",
      "pattern": "http: panic serving.*runtime error",
      "type": "http panic",
      "description": "Panic in HTTP handler",
      "root_cause": "go_http_panic",
      "suggestion": "Add recover() in HTTP handlers. Validate inputs and handle errors gracefully in handlers.",
      "confidence": "high",
      "severity": "high",
      "category": "http"
    },
    {
      "id": "go_json_unmarshal_error",
      "pattern": "json: cannot unmarshal (.*) into Go (?:struct field|value) of type (.*)",
      "type": "json.UnmarshalTypeError",
      "description": "JSON type mismatch during unmarshaling",
      "root_cause": "go_json_type_mismatch",
      "suggestion": "Ensure JSON structure matches Go struct. Use appropriate types or json.RawMessage for flexible handling.",
      "confidence": "high",
      "severity": "medium",
      "category": "serialization"
    },
    {
      "id": "go_template_exec_error",
      "pattern": "template: (.*): executing .* at <(.*)>: (.*)",
      "type": "template error",
      "description": "Error executing Go template",
      "root_cause": "go_template_error",
      "suggestion": "Check template syntax and data structure. Ensure all referenced fields exist in the data.",
      "confidence": "high",
      "severity": "medium",
      "category": "template"
    },
    {
      "id": "go_regexp_compile_error",
      "pattern": "error parsing regexp: (.*)",
      "type": "regexp error",
      "description": "Invalid regular expression",
      "root_cause": "go_regexp_invalid",
      "suggestion": "Validate regex syntax. Use regexp.MustCompile() only with known-good patterns.",
      "confidence": "high",
      "severity": "medium",
      "category": "regexp"
    },
    {
      "id": "go_url_parse_error",
      "pattern": "parse (.*): (.*)",
      "type": "url.Error",
      "description": "URL parsing error",
      "root_cause": "go_url_invalid",
      "suggestion": "Validate URL format before parsing. Handle special characters properly. Use url.QueryEscape() when needed.",
      "confidence": "high",
      "severity": "low",
      "category": "network"
    }
  ]
}