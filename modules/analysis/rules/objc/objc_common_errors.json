{
  "name": "Objective-C Common Errors",
  "description": "Rules for detecting common Objective-C runtime and compilation errors",
  "rules": [
    {
      "id": "objc_unrecognized_selector",
      "pattern": "unrecognized selector sent to (?:instance|class)|\\-\\[\\w+ \\w+\\]: unrecognized selector",
      "type": "UnrecognizedSelector",
      "description": "Method called on object that doesn't implement it",
      "root_cause": "objc_selector_not_found",
      "suggestion": "Check method name spelling, verify object type, ensure method is implemented. Use respondsToSelector: to check.",
      "category": "objc",
      "severity": "critical",
      "confidence": "high",
      "tags": ["objc", "selector", "runtime", "method"],
      "examples": [
        "-[NSString count]: unrecognized selector sent to instance",
        "unrecognized selector sent to class 0x1234"
      ],
      "metadata": {},
      "criticality": "critical",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "objc_nil_insertion",
      "pattern": "attempt to insert nil|cannot insert nil|\\[__NSPlaceholder.* initWithObjects:count:\\]: attempt to insert nil",
      "type": "NilInsertionError",
      "description": "Attempting to insert nil into collection",
      "root_cause": "objc_nil_in_collection",
      "suggestion": "Check for nil before adding to NSArray, NSDictionary, or NSSet. Use NSNull for placeholder.",
      "category": "objc",
      "severity": "high",
      "confidence": "high",
      "tags": ["objc", "nil", "collection", "nsarray"],
      "examples": [
        "*** -[__NSPlaceholderArray initWithObjects:count:]: attempt to insert nil object",
        "cannot insert nil into NSMutableDictionary"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "low",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "objc_index_beyond_bounds",
      "pattern": "index \\d+ beyond bounds|NSRangeException.*index.*beyond bounds|objectAtIndex:]: index.*beyond bounds",
      "type": "IndexOutOfBounds",
      "description": "Array index out of bounds",
      "root_cause": "objc_array_bounds",
      "suggestion": "Check array count before accessing. Use firstObject/lastObject for safe access.",
      "category": "objc",
      "severity": "high",
      "confidence": "high",
      "tags": ["objc", "array", "bounds", "index"],
      "examples": [
        "*** -[__NSArrayI objectAtIndex:]: index 5 beyond bounds [0 .. 2]",
        "NSRangeException: index beyond bounds"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "low",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "objc_kvc_undefined_key",
      "pattern": "valueForUndefinedKey:|setValue:forUndefinedKey:|this class is not key value coding-compliant for the key",
      "type": "KVCUndefinedKey",
      "description": "Key-Value Coding undefined key error",
      "root_cause": "objc_kvc_undefined_key",
      "suggestion": "Check property/key name spelling. Ensure @property is declared or implement KVC methods.",
      "category": "objc",
      "severity": "high",
      "confidence": "high",
      "tags": ["objc", "kvc", "property", "key-value"],
      "examples": [
        "this class is not key value coding-compliant for the key 'name'",
        "valueForUndefinedKey: key not found"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "objc_dealloc_notification",
      "pattern": "deallocated while key value observers were still registered|NSKVODeallocateBreak|observation info was leaked",
      "type": "KVODeallocError",
      "description": "Object deallocated with active KVO observers",
      "root_cause": "objc_kvo_not_removed",
      "suggestion": "Remove all observers in dealloc. Balance addObserver: with removeObserver: calls.",
      "category": "objc",
      "severity": "high",
      "confidence": "high",
      "tags": ["objc", "kvo", "memory", "observer"],
      "examples": [
        "An instance was deallocated while key value observers were still registered",
        "observation info was leaked, and may even become mistakenly attached"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "objc_autorelease_pool",
      "pattern": "autoreleased with no pool|no autorelease pool|NSAutoreleaseNoPool",
      "type": "AutoreleasePoolError",
      "description": "Object autoreleased without autorelease pool",
      "root_cause": "objc_no_autorelease_pool",
      "suggestion": "Wrap code in @autoreleasepool {} block, especially in background threads.",
      "category": "objc",
      "severity": "high",
      "confidence": "high",
      "tags": ["objc", "autorelease", "memory", "pool"],
      "examples": [
        "autoreleased with no pool in place",
        "NSAutoreleaseNoPool(): Object autoreleased with no pool"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "objc_retain_cycle",
      "pattern": "retain cycle|circular reference|strong reference cycle detected",
      "type": "RetainCycle",
      "description": "Retain cycle causing memory leak",
      "root_cause": "objc_retain_cycle",
      "suggestion": "Use weak or unowned references to break cycles. Check delegate patterns and block captures.",
      "category": "objc",
      "severity": "high",
      "confidence": "medium",
      "tags": ["objc", "memory", "retain", "cycle"],
      "examples": [
        "retain cycle detected",
        "circular reference between objects"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "high",
      "reliability": "medium",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "objc_mutation_during_enumeration",
      "pattern": "was mutated while being enumerated|Collection.*was mutated|NSGenericException.*mutation",
      "type": "MutationDuringEnumeration",
      "description": "Collection modified during enumeration",
      "root_cause": "objc_concurrent_modification",
      "suggestion": "Don't modify collections during enumeration. Create a copy or collect changes for later.",
      "category": "objc",
      "severity": "high",
      "confidence": "high",
      "tags": ["objc", "collection", "enumeration", "mutation"],
      "examples": [
        "*** Collection was mutated while being enumerated",
        "NSGenericException: mutation during enumeration"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "objc_nil_block_execution",
      "pattern": "EXC_BAD_ACCESS.*block.*nil|calling nil block|block is nil",
      "type": "NilBlockExecution",
      "description": "Attempting to execute nil block",
      "root_cause": "objc_nil_block",
      "suggestion": "Check blocks for nil before execution. Use if (block) { block(); } pattern.",
      "category": "objc",
      "severity": "critical",
      "confidence": "high",
      "tags": ["objc", "block", "nil", "crash"],
      "examples": [
        "EXC_BAD_ACCESS when calling nil block",
        "attempted to execute nil block"
      ],
      "metadata": {},
      "criticality": "critical",
      "complexity": "low",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "objc_category_method_conflict",
      "pattern": "category is implementing a method which will also be implemented|method.*already implemented|category override",
      "type": "CategoryMethodConflict",
      "description": "Category overriding existing method",
      "root_cause": "objc_category_conflict",
      "suggestion": "Avoid overriding methods in categories. Use method swizzling carefully or create subclass.",
      "category": "objc",
      "severity": "medium",
      "confidence": "high",
      "tags": ["objc", "category", "method", "override"],
      "examples": [
        "Category is implementing a method which will also be implemented by its primary class",
        "method 'description' already implemented"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    }
  ]
}