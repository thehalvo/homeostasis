{
  "name": "Clojure Macro Errors",
  "version": "1.0.0",
  "description": "Clojure macro expansion and hygiene error detection rules",
  "rules": [
    {
      "id": "clojure_macro_expansion_error",
      "category": "macros",
      "type": "expansion",
      "pattern": "Can't take value of a macro|Attempting to call unbound fn.*during macroexpansion|CompilerException.*macroexpand",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Macros are expanded at compile time. Ensure macro is defined before use and returns valid code",
      "root_cause": "clojure_macro_expansion_failed",
      "tags": [
        "clojure",
        "macro",
        "expansion",
        "compile"
      ],
      "description": "Clojure Macro Expansion"
    },
    {
      "id": "clojure_macro_hygiene_violation",
      "category": "macros",
      "type": "hygiene",
      "pattern": "Can't let qualified name|Local name .* conflicts with namespace|variable capture in macro",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "high",
      "suggestion": "Use gensym or auto-gensym (name#) to avoid variable capture in macros",
      "root_cause": "clojure_macro_variable_capture",
      "tags": [
        "clojure",
        "macro",
        "hygiene",
        "gensym"
      ],
      "description": "Clojure Macro Hygiene Violation"
    },
    {
      "id": "clojure_macro_argument_evaluation",
      "category": "macros",
      "type": "evaluation",
      "pattern": "Don't know how to create ISeq from|Wrong number of args.*passed to macro|macro expecting.*args",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Remember macros receive unevaluated forms. Use ~arg to evaluate arguments when needed",
      "root_cause": "clojure_macro_arg_evaluation",
      "tags": [
        "clojure",
        "macro",
        "argument",
        "evaluation"
      ],
      "description": "Clojure Macro Argument Evaluation"
    },
    {
      "id": "clojure_syntax_quote_error",
      "category": "macros",
      "type": "syntax_quote",
      "pattern": "Syntax quote.*illegal|Unquote.*not in syntax-quote|splice not in list",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Use ` for syntax-quote, ~ for unquote, and ~@ for unquote-splicing correctly",
      "root_cause": "clojure_syntax_quote_misuse",
      "tags": [
        "clojure",
        "macro",
        "syntax_quote",
        "unquote"
      ],
      "description": "Clojure Syntax Quote"
    },
    {
      "id": "clojure_macro_recursive_expansion",
      "category": "macros",
      "type": "recursion",
      "pattern": "StackOverflowError.*macroexpand|Recursive macro expansion|macro expansion depth exceeded",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "critical",
      "suggestion": "Avoid infinite recursive macro expansion. Ensure base case or use recur for tail recursion",
      "root_cause": "clojure_macro_infinite_recursion",
      "tags": [
        "clojure",
        "macro",
        "recursion",
        "stackoverflow"
      ],
      "description": "Clojure Macro Recursive Expansion"
    },
    {
      "id": "clojure_compile_time_runtime_confusion",
      "category": "macros",
      "type": "phase_confusion",
      "pattern": "Unable to resolve symbol.*in this context|compile time.*runtime|def.*inside macro",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Distinguish compile-time (macro expansion) from runtime. Use eval carefully if needed",
      "root_cause": "clojure_macro_phase_confusion",
      "tags": [
        "clojure",
        "macro",
        "compile_time",
        "runtime"
      ],
      "description": "Clojure Compile Time Runtime Confusion"
    },
    {
      "id": "clojure_anaphoric_macro_error",
      "category": "macros",
      "type": "anaphoric",
      "pattern": "Unable to resolve symbol: it|Unbound anaphoric variable|implicit variable not found",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Anaphoric macros introduce implicit bindings. Document and use them correctly",
      "root_cause": "clojure_anaphoric_macro",
      "tags": [
        "clojure",
        "macro",
        "anaphoric",
        "implicit"
      ],
      "description": "Clojure Anaphoric Macro"
    },
    {
      "id": "clojure_macro_symbol_resolution",
      "category": "macros",
      "type": "symbol_resolution",
      "pattern": "Can't resolve symbol.*in macro|namespace qualification.*in syntax quote|symbol.*resolved to wrong namespace",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Use namespace-qualified symbols or ~'symbol to prevent namespace resolution in macros",
      "root_cause": "clojure_macro_symbol_resolution",
      "tags": [
        "clojure",
        "macro",
        "symbol",
        "namespace"
      ],
      "description": "Clojure Macro Symbol Resolution"
    },
    {
      "id": "clojure_macro_metadata_loss",
      "category": "macros",
      "type": "metadata",
      "pattern": "metadata lost during macro expansion|type hint disappeared|:tag metadata missing",
      "confidence": "low",
      "reliability": "low",
      "severity": "low",
      "suggestion": "Preserve metadata using with-meta or ^:preserve metadata annotation",
      "root_cause": "clojure_macro_metadata_loss",
      "tags": [
        "clojure",
        "macro",
        "metadata",
        "type_hint"
      ],
      "description": "Clojure Macro Metadata Loss"
    },
    {
      "id": "clojure_macro_multiple_evaluation",
      "category": "macros",
      "type": "multiple_eval",
      "pattern": "side effect evaluated multiple times|expression evaluated more than once in macro",
      "confidence": "low",
      "reliability": "low",
      "severity": "medium",
      "suggestion": "Use let bindings in macro to ensure arguments are evaluated only once",
      "root_cause": "clojure_macro_multiple_eval",
      "tags": [
        "clojure",
        "macro",
        "evaluation",
        "side_effect"
      ],
      "description": "Clojure Macro Multiple Evaluation"
    },
    {
      "id": "clojure_defmacro_wrong_context",
      "category": "macros",
      "type": "definition",
      "pattern": "defmacro.*not at top level|macro definition inside.*function|conditional macro definition",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Define macros at top level, not inside functions or conditionals",
      "root_cause": "clojure_defmacro_context",
      "tags": [
        "clojure",
        "macro",
        "defmacro",
        "top_level"
      ],
      "description": "Clojure Defmacro Wrong Context"
    },
    {
      "id": "clojure_macroexpand_debugging",
      "category": "macros",
      "type": "debugging",
      "pattern": "macroexpand-1.*failed|unable to debug macro expansion|macro debugging error",
      "confidence": "low",
      "reliability": "low",
      "severity": "low",
      "suggestion": "Use macroexpand-1, macroexpand, or macroexpand-all for debugging macro issues",
      "root_cause": "clojure_macro_debugging",
      "tags": [
        "clojure",
        "macro",
        "debugging",
        "expand"
      ],
      "description": "Clojure Macroexpand Debugging"
    },
    {
      "id": "clojure_reader_macro_error",
      "category": "macros",
      "type": "reader_macro",
      "pattern": "No reader macro.*for|Invalid reader macro|Reader macro.*not supported",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Use standard reader macros correctly: #() for anonymous fn, #{} for sets, etc.",
      "root_cause": "clojure_reader_macro_invalid",
      "tags": [
        "clojure",
        "macro",
        "reader",
        "syntax"
      ],
      "description": "Clojure Reader Macro"
    },
    {
      "id": "clojure_macro_arity_error",
      "category": "macros",
      "type": "arity",
      "pattern": "Macro.*wrong number of forms|macro arity mismatch|variadic macro called incorrectly",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Check macro signature and provide correct number of arguments",
      "root_cause": "clojure_macro_arity",
      "tags": [
        "clojure",
        "macro",
        "arity",
        "arguments"
      ],
      "description": "Clojure Macro Arity"
    },
    {
      "id": "clojure_macro_spec_failure",
      "category": "macros",
      "type": "spec",
      "pattern": "Macro spec.*failed|fdef.*macro.*did not conform|Invalid macro args per spec",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Ensure macro arguments conform to defined spec using s/fdef",
      "root_cause": "clojure_macro_spec_violation",
      "tags": [
        "clojure",
        "macro",
        "spec",
        "validation"
      ],
      "description": "Clojure Macro Spec Failure"
    }
  ]
}