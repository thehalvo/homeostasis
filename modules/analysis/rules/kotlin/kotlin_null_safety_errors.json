{
  "version": "1.0.0",
  "description": "Kotlin null safety error detection rules",
  "rules": [
    {
      "id": "kotlin_smart_cast_impossible",
      "category": "null_safety",
      "type": "smart_cast",
      "pattern": "Smart cast to '.*' is impossible|Variable '.*' is mutable and could have been changed",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Use immutable val instead of var, or perform null check closer to usage",
      "root_cause": "kotlin_smart_cast_failure",
      "tags": ["kotlin", "null_safety", "smart_cast", "mutable"]
    },
    {
      "id": "kotlin_platform_type_null",
      "category": "null_safety",
      "type": "platform_type",
      "pattern": "NullPointerException.*Java.*platform type|Method invocation '.*' may produce 'NullPointerException'",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Add explicit null checks or @Nullable/@NotNull annotations for Java interop",
      "root_cause": "kotlin_platform_type_npe",
      "tags": ["kotlin", "null_safety", "java_interop", "platform"]
    },
    {
      "id": "kotlin_nullable_receiver_extension",
      "category": "null_safety",
      "type": "extension_receiver",
      "pattern": "Only safe \\(\\?\\.\\) or non-null asserted \\(!!\\) calls are allowed on a nullable receiver",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Use safe call (?.) or null check before calling extension on nullable receiver",
      "root_cause": "kotlin_nullable_extension_call",
      "tags": ["kotlin", "null_safety", "extension", "receiver"]
    },
    {
      "id": "kotlin_elvis_operator_misuse",
      "category": "null_safety",
      "type": "elvis_operator",
      "pattern": "Type mismatch.*required:.*found:.*\\?:|Elvis operator always returns the left operand",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Ensure elvis operator (?:) right side matches expected type or left side is nullable",
      "root_cause": "kotlin_elvis_type_mismatch",
      "tags": ["kotlin", "null_safety", "elvis", "operator"]
    },
    {
      "id": "kotlin_safe_call_chain_null",
      "category": "null_safety",
      "type": "safe_call_chain",
      "pattern": "Safe call on a non-null receiver|Unnecessary safe call on a non-null receiver",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "low",
      "suggestion": "Remove unnecessary safe calls on non-null types for cleaner code",
      "root_cause": "kotlin_redundant_safe_call",
      "tags": ["kotlin", "null_safety", "safe_call", "redundant"]
    },
    {
      "id": "kotlin_not_null_assertion_npe",
      "category": "null_safety",
      "type": "not_null_assertion",
      "pattern": "NullPointerException.*!!|KotlinNullPointerException",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Replace !! with safe call (?.) or proper null handling",
      "root_cause": "kotlin_not_null_assertion",
      "tags": ["kotlin", "null_safety", "assertion", "npe"]
    },
    {
      "id": "kotlin_nullable_collection_operation",
      "category": "null_safety",
      "type": "collection",
      "pattern": "Type inference failed.*List<.*\\?>|Cannot iterate over nullable collection",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Use safe calls or null checks before collection operations, or use orEmpty()",
      "root_cause": "kotlin_nullable_collection",
      "tags": ["kotlin", "null_safety", "collection", "iteration"]
    },
    {
      "id": "kotlin_let_scope_null_confusion",
      "category": "null_safety",
      "type": "scope_function",
      "pattern": "Variable '.*' must be initialized|Smart cast to '.*' is impossible.*let",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Inside let block, 'it' is non-null. Use let for null-safe operations",
      "root_cause": "kotlin_let_null_safety",
      "tags": ["kotlin", "null_safety", "let", "scope"]
    },
    {
      "id": "kotlin_lateinit_not_initialized",
      "category": "null_safety",
      "type": "lateinit",
      "pattern": "lateinit property .* has not been initialized",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Initialize lateinit property before use or use nullable type with null check",
      "root_cause": "kotlin_lateinit_uninitialized",
      "tags": ["kotlin", "null_safety", "lateinit", "initialization"]
    },
    {
      "id": "kotlin_nullable_generic_variance",
      "category": "null_safety",
      "type": "generic_nullable",
      "pattern": "Type argument is not within its bounds.*should be subtype of.*\\?",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Consider nullability when using generic type parameters with bounds",
      "root_cause": "kotlin_generic_nullable_bound",
      "tags": ["kotlin", "null_safety", "generic", "variance"]
    },
    {
      "id": "kotlin_nullable_property_delegation",
      "category": "null_safety",
      "type": "delegation",
      "pattern": "Type 'T\\?' is not supported by delegate|Delegated property cannot be nullable",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Some delegates don't support nullable types. Check delegate documentation",
      "root_cause": "kotlin_nullable_delegate",
      "tags": ["kotlin", "null_safety", "delegate", "property"]
    },
    {
      "id": "kotlin_safe_cast_null_result",
      "category": "null_safety",
      "type": "safe_cast",
      "pattern": "Safe cast \\(as\\?\\) will always be null|Useless cast to nullable type",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "low",
      "suggestion": "Review safe cast usage - it may always return null for incompatible types",
      "root_cause": "kotlin_safe_cast_always_null",
      "tags": ["kotlin", "null_safety", "cast", "as_safe"]
    },
    {
      "id": "kotlin_null_comparison_always_false",
      "category": "null_safety",
      "type": "comparison",
      "pattern": "Condition '.*!= null' is always .*(true|false)|Unnecessary non-null assertion",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "low",
      "suggestion": "Remove redundant null checks on non-null types",
      "root_cause": "kotlin_redundant_null_check",
      "tags": ["kotlin", "null_safety", "comparison", "redundant"]
    },
    {
      "id": "kotlin_nullable_lambda_parameter",
      "category": "null_safety",
      "type": "lambda",
      "pattern": "Parameter '.*' of lambda is nullable|Type mismatch.*\\(.*\\?\\) -> .*required",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Handle nullable lambda parameters appropriately or adjust function signature",
      "root_cause": "kotlin_nullable_lambda_param",
      "tags": ["kotlin", "null_safety", "lambda", "parameter"]
    },
    {
      "id": "kotlin_contract_null_assertion",
      "category": "null_safety",
      "type": "contract",
      "pattern": "Contract violation.*returns implies.*!= null|Smart cast is impossible despite contract",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Ensure contract conditions are met or use explicit null checks",
      "root_cause": "kotlin_contract_null_violation",
      "tags": ["kotlin", "null_safety", "contract", "assertion"]
    }
  ]
}