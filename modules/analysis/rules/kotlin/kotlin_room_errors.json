{
  "description": "Room database and persistence-specific errors",
  "version": "1.0.0",
  "rules": [
    {
      "id": "kotlin_room_database_not_initialized",
      "pattern": ".*Room.*database.*not.*initialized.*|.*database.*instance.*null.*",
      "error_type": "IllegalStateException",
      "description": "Room database accessed before proper initialization",
      "root_cause": "kotlin_room_not_initialized",
      "suggestion": "Initialize Room database instance using Room.databaseBuilder() before accessing DAOs",
      "confidence": "high",
      "severity": "high",
      "category": "room",
      "framework": "room"
    },
    {
      "id": "kotlin_room_main_thread_query",
      "pattern": ".*Cannot access database on the main thread.*|.*main thread.*database.*query.*",
      "error_type": "IllegalStateException",
      "description": "Database query executed on main UI thread",
      "root_cause": "kotlin_room_main_thread_access",
      "suggestion": "Execute database operations in background thread using coroutines with Dispatchers.IO or allowMainThreadQueries() for testing only",
      "confidence": "high",
      "severity": "high",
      "category": "room",
      "framework": "room"
    },
    {
      "id": "kotlin_room_migration_missing",
      "pattern": ".*Migration.*not found.*|.*database.*version.*migration.*missing.*",
      "error_type": "IllegalStateException",
      "description": "Database migration path not found for schema version change",
      "root_cause": "kotlin_room_migration_missing",
      "suggestion": "Implement Migration objects for database schema changes or use fallbackToDestructiveMigration() for development",
      "confidence": "high",
      "severity": "high",
      "category": "room",
      "framework": "room"
    },
    {
      "id": "kotlin_room_entity_not_found",
      "pattern": ".*Entity.*not found.*|.*table.*does not exist.*",
      "error_type": "SQLiteException",
      "description": "Database table/entity not found",
      "root_cause": "kotlin_room_entity_not_found",
      "suggestion": "Ensure entity classes are properly annotated with @Entity and included in database entities array",
      "confidence": "high",
      "severity": "high",
      "category": "room",
      "framework": "room"
    },
    {
      "id": "kotlin_room_dao_not_annotated",
      "pattern": ".*DAO.*not.*annotated.*|.*@Dao.*missing.*",
      "error_type": "CompilationError",
      "description": "DAO interface not properly annotated",
      "root_cause": "kotlin_room_dao_not_annotated",
      "suggestion": "Annotate DAO interfaces with @Dao annotation and ensure all query methods have proper annotations",
      "confidence": "high",
      "severity": "medium",
      "category": "room",
      "framework": "room"
    },
    {
      "id": "kotlin_room_query_syntax_error",
      "pattern": ".*SQL.*syntax.*error.*|.*malformed.*query.*",
      "error_type": "SQLiteException",
      "description": "SQL syntax error in Room query",
      "root_cause": "kotlin_room_query_syntax_error",
      "suggestion": "Check SQL query syntax in @Query annotations, verify table and column names match entity definitions",
      "confidence": "high",
      "severity": "medium",
      "category": "room",
      "framework": "room"
    },
    {
      "id": "kotlin_room_foreign_key_constraint",
      "pattern": ".*foreign key constraint.*failed.*|.*FOREIGN KEY constraint.*",
      "error_type": "SQLiteConstraintException",
      "description": "Foreign key constraint violation in Room database",
      "root_cause": "kotlin_room_foreign_key_constraint",
      "suggestion": "Ensure referenced entities exist before inserting, check foreign key relationships in entity definitions",
      "confidence": "high",
      "severity": "medium",
      "category": "room",
      "framework": "room"
    },
    {
      "id": "kotlin_room_unique_constraint",
      "pattern": ".*unique constraint.*failed.*|.*UNIQUE constraint.*",
      "error_type": "SQLiteConstraintException",
      "description": "Unique constraint violation in Room database",
      "root_cause": "kotlin_room_unique_constraint",
      "suggestion": "Check for duplicate values before insertion, use @Insert(onConflict = OnConflictStrategy.REPLACE) to handle conflicts",
      "confidence": "high",
      "severity": "medium",
      "category": "room",
      "framework": "room"
    },
    {
      "id": "kotlin_room_transaction_deadlock",
      "pattern": ".*transaction.*deadlock.*|.*database.*lock.*deadlock.*",
      "error_type": "SQLiteException",
      "description": "Database transaction deadlock occurred",
      "root_cause": "kotlin_room_transaction_deadlock",
      "suggestion": "Minimize transaction scope, avoid nested transactions, use @Transaction annotation for atomic operations",
      "confidence": "medium",
      "severity": "high",
      "category": "room",
      "framework": "room"
    },
    {
      "id": "kotlin_room_database_locked",
      "pattern": ".*database.*locked.*|.*SQLite.*busy.*",
      "error_type": "SQLiteException",
      "description": "Database is locked by another operation",
      "root_cause": "kotlin_room_database_locked",
      "suggestion": "Ensure proper connection management, close database connections when done, use connection pooling",
      "confidence": "medium",
      "severity": "medium",
      "category": "room",
      "framework": "room"
    },
    {
      "id": "kotlin_room_type_converter_error",
      "pattern": ".*TypeConverter.*error.*|.*converter.*not found.*",
      "error_type": "IllegalArgumentException",
      "description": "Type converter error for custom data types",
      "root_cause": "kotlin_room_type_converter_error",
      "suggestion": "Implement @TypeConverter methods for custom types and register them with @TypeConverters annotation",
      "confidence": "high",
      "severity": "medium",
      "category": "room",
      "framework": "room"
    },
    {
      "id": "kotlin_room_cursor_window_allocation",
      "pattern": ".*Cursor window allocation.*failed.*|.*CursorWindow.*allocation.*",
      "error_type": "SQLiteException",
      "description": "Failed to allocate cursor window for large result set",
      "root_cause": "kotlin_room_cursor_window_allocation",
      "suggestion": "Limit query result size with LIMIT clause, implement pagination for large datasets",
      "confidence": "medium",
      "severity": "medium",
      "category": "room",
      "framework": "room"
    },
    {
      "id": "kotlin_room_autovalue_error",
      "pattern": ".*AutoValue.*Room.*error.*|.*@AutoValue.*entity.*",
      "error_type": "CompilationError",
      "description": "AutoValue integration error with Room entity",
      "root_cause": "kotlin_room_autovalue_error",
      "suggestion": "Ensure AutoValue classes are properly configured for Room, check processor dependencies",
      "confidence": "medium",
      "severity": "medium",
      "category": "room",
      "framework": "room"
    },
    {
      "id": "kotlin_room_primarykey_missing",
      "pattern": ".*primary key.*missing.*|.*@PrimaryKey.*required.*",
      "error_type": "CompilationError",
      "description": "Entity missing primary key annotation",
      "root_cause": "kotlin_room_primarykey_missing",
      "suggestion": "Add @PrimaryKey annotation to at least one field in entity class",
      "confidence": "high",
      "severity": "medium",
      "category": "room",
      "framework": "room"
    },
    {
      "id": "kotlin_room_database_version_mismatch",
      "pattern": ".*database version.*mismatch.*|.*expected version.*actual version.*",
      "error_type": "IllegalStateException",
      "description": "Database version mismatch between expected and actual",
      "root_cause": "kotlin_room_version_mismatch",
      "suggestion": "Update database version number in @Database annotation when schema changes, implement proper migrations",
      "confidence": "high",
      "severity": "high",
      "category": "room",
      "framework": "room"
    }
  ]
}