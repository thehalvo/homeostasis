{
  "name": "Kotlin Kotlin Extension Errors",
  "version": "1.0.0",
  "description": "Kotlin extension function error detection rules",
  "rules": [
    {
      "id": "kotlin_extension_resolution_ambiguity",
      "category": "extensions",
      "type": "resolution",
      "pattern": "Overload resolution ambiguity|None of the following functions can be called",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Disambiguate by explicit imports, qualified calls, or type annotations",
      "root_cause": "kotlin_extension_ambiguity",
      "tags": [
        "kotlin",
        "extension",
        "resolution",
        "ambiguity"
      ],
      "description": "Kotlin Extension Resolution Ambiguity"
    },
    {
      "id": "kotlin_extension_property_initialization",
      "category": "extensions",
      "type": "property",
      "pattern": "Extension property cannot be initialized|Extension property must have accessors",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Extension properties cannot have backing fields. Use custom getter/setter",
      "root_cause": "kotlin_extension_property_init",
      "tags": [
        "kotlin",
        "extension",
        "property",
        "initialization"
      ],
      "description": "Kotlin Extension Property Initialization"
    },
    {
      "id": "kotlin_member_extension_visibility",
      "category": "extensions",
      "type": "member_extension",
      "pattern": "Cannot access '.*': it is '.*' in|Member extension function '.*' can only be called",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Member extensions are only visible within the declaring class",
      "root_cause": "kotlin_member_extension_access",
      "tags": [
        "kotlin",
        "extension",
        "member",
        "visibility"
      ],
      "description": "Kotlin Member Extension Visibility"
    },
    {
      "id": "kotlin_extension_receiver_type_mismatch",
      "category": "extensions",
      "type": "receiver_type",
      "pattern": "Unresolved reference.*None of the following candidates is applicable|Type mismatch.*receiver type",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Extension function receiver type must match the object it's called on",
      "root_cause": "kotlin_extension_receiver_mismatch",
      "tags": [
        "kotlin",
        "extension",
        "receiver",
        "type"
      ],
      "description": "Kotlin Extension Receiver Type Mismatch"
    },
    {
      "id": "kotlin_static_extension_confusion",
      "category": "extensions",
      "type": "static_confusion",
      "pattern": "Unresolved reference.*on companion object|Extension function '.*' should be called on instance",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Extensions are resolved statically. Cannot override member functions",
      "root_cause": "kotlin_extension_static_dispatch",
      "tags": [
        "kotlin",
        "extension",
        "static",
        "dispatch"
      ],
      "description": "Kotlin Static Extension Confusion"
    },
    {
      "id": "kotlin_generic_extension_inference",
      "category": "extensions",
      "type": "generic",
      "pattern": "Type inference failed.*Not enough information to infer parameter",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Provide explicit type parameters for generic extension functions",
      "root_cause": "kotlin_generic_extension_inference",
      "tags": [
        "kotlin",
        "extension",
        "generic",
        "inference"
      ],
      "description": "Kotlin Generic Extension Inference"
    },
    {
      "id": "kotlin_scope_function_misuse",
      "category": "extensions",
      "type": "scope_function",
      "pattern": "Type mismatch.*this.*it|Cannot use '.*' in this context.*scope function",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "low",
      "suggestion": "Use appropriate scope function: apply/also (return receiver), let/run (return result)",
      "root_cause": "kotlin_scope_function_confusion",
      "tags": [
        "kotlin",
        "extension",
        "scope",
        "function"
      ],
      "description": "Kotlin Scope Function Misuse"
    },
    {
      "id": "kotlin_extension_import_missing",
      "category": "extensions",
      "type": "import",
      "pattern": "Unresolved reference.*extension function|Import '.*' is required for extension",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Import extension functions explicitly when defined in different packages",
      "root_cause": "kotlin_extension_import",
      "tags": [
        "kotlin",
        "extension",
        "import",
        "unresolved"
      ],
      "description": "Kotlin Extension Import Missing"
    },
    {
      "id": "kotlin_companion_extension_access",
      "category": "extensions",
      "type": "companion",
      "pattern": "Unresolved reference.*Companion extension|Cannot access extension on companion object",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Extensions on companion objects need special syntax: ClassName.Companion.extension()",
      "root_cause": "kotlin_companion_extension",
      "tags": [
        "kotlin",
        "extension",
        "companion",
        "access"
      ],
      "description": "Kotlin Companion Extension Access"
    },
    {
      "id": "kotlin_extension_lambda_receiver",
      "category": "extensions",
      "type": "lambda_receiver",
      "pattern": "'this' is not defined in this context|Cannot use receiver in lambda without extension",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Use function types with receiver: T.() -> R for extension lambdas",
      "root_cause": "kotlin_extension_lambda_receiver",
      "tags": [
        "kotlin",
        "extension",
        "lambda",
        "receiver"
      ],
      "description": "Kotlin Extension Lambda Receiver"
    },
    {
      "id": "kotlin_infix_extension_error",
      "category": "extensions",
      "type": "infix",
      "pattern": "Modifier 'infix' is not applicable|Infix function must have single parameter",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Infix extensions must have exactly one parameter with no default value",
      "root_cause": "kotlin_infix_extension",
      "tags": [
        "kotlin",
        "extension",
        "infix",
        "modifier"
      ],
      "description": "Kotlin Infix Extension"
    },
    {
      "id": "kotlin_extension_shadowing",
      "category": "extensions",
      "type": "shadowing",
      "pattern": "Extension is shadowed by member|Member always wins over extension",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "low",
      "suggestion": "Member functions always take precedence over extension functions",
      "root_cause": "kotlin_extension_shadowing",
      "tags": [
        "kotlin",
        "extension",
        "shadowing",
        "member"
      ],
      "description": "Kotlin Extension Shadowing"
    },
    {
      "id": "kotlin_protected_extension_error",
      "category": "extensions",
      "type": "visibility",
      "pattern": "Protected extension can only be declared in class|Cannot have protected extension at top level",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Protected extensions are only allowed as members of a class",
      "root_cause": "kotlin_protected_extension",
      "tags": [
        "kotlin",
        "extension",
        "protected",
        "visibility"
      ],
      "description": "Kotlin Protected Extension"
    },
    {
      "id": "kotlin_extension_operator_overload",
      "category": "extensions",
      "type": "operator",
      "pattern": "Operator extension function must be marked with 'operator'|'operator' modifier is required",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Add 'operator' modifier to extension functions that overload operators",
      "root_cause": "kotlin_extension_operator",
      "tags": [
        "kotlin",
        "extension",
        "operator",
        "overload"
      ],
      "description": "Kotlin Extension Operator Overload"
    },
    {
      "id": "kotlin_extension_recursive_call",
      "category": "extensions",
      "type": "recursion",
      "pattern": "Recursive call in extension|StackOverflowError in extension function",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "high",
      "suggestion": "Avoid infinite recursion in extension functions, check base cases",
      "root_cause": "kotlin_extension_recursion",
      "tags": [
        "kotlin",
        "extension",
        "recursion",
        "stackoverflow"
      ],
      "description": "Kotlin Extension Recursive Call"
    }
  ]
}