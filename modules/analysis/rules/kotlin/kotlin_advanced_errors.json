{
  "version": "1.0.0",
  "description": "Advanced Kotlin language feature error detection rules",
  "rules": [
    {
      "id": "kotlin_delegation_lazy_thread_safety",
      "category": "delegation",
      "type": "lazy",
      "pattern": "lazy delegate is not thread-safe|LazyThreadSafetyMode required|Concurrent access to lazy property",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Use appropriate LazyThreadSafetyMode: SYNCHRONIZED (default), PUBLICATION, or NONE",
      "root_cause": "kotlin_lazy_thread_safety",
      "tags": ["kotlin", "delegation", "lazy", "thread_safety"]
    },
    {
      "id": "kotlin_observable_delegate_error",
      "category": "delegation",
      "type": "observable",
      "pattern": "Observable delegate callback error|Property change listener threw exception",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Handle exceptions in observable delegate callbacks",
      "root_cause": "kotlin_observable_callback_error",
      "tags": ["kotlin", "delegation", "observable", "callback"]
    },
    {
      "id": "kotlin_sealed_class_exhaustive",
      "category": "sealed",
      "type": "exhaustiveness",
      "pattern": "'when' expression must be exhaustive|Add .* branch or 'else' branch",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Cover all sealed class/interface subtypes in when expression or add else branch",
      "root_cause": "kotlin_sealed_not_exhaustive",
      "tags": ["kotlin", "sealed", "when", "exhaustive"]
    },
    {
      "id": "kotlin_inline_function_non_local_return",
      "category": "inline",
      "type": "non_local_return",
      "pattern": "Non-local return not allowed|'return' is not allowed here|crossinline parameter",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Use crossinline for lambda parameters that shouldn't allow non-local returns",
      "root_cause": "kotlin_inline_non_local_return",
      "tags": ["kotlin", "inline", "return", "crossinline"]
    },
    {
      "id": "kotlin_reified_type_erasure",
      "category": "inline",
      "type": "reified",
      "pattern": "Cannot use 'T' as reified type parameter|Type parameter .* is not reified",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Mark type parameter as reified and function as inline",
      "root_cause": "kotlin_reified_not_inline",
      "tags": ["kotlin", "inline", "reified", "generics"]
    },
    {
      "id": "kotlin_operator_overload_signature",
      "category": "operator",
      "type": "signature",
      "pattern": "'operator' modifier is inapplicable|Function '.*' must have .* parameter",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Operator functions must have specific signatures defined by convention",
      "root_cause": "kotlin_operator_signature_wrong",
      "tags": ["kotlin", "operator", "overload", "signature"]
    },
    {
      "id": "kotlin_destructuring_component_missing",
      "category": "destructuring",
      "type": "component",
      "pattern": "Destructuring declaration initializer of type .* must have a 'component.*' function",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Add componentN() functions or use data class for automatic destructuring",
      "root_cause": "kotlin_destructuring_no_component",
      "tags": ["kotlin", "destructuring", "component", "declaration"]
    },
    {
      "id": "kotlin_typealias_recursive",
      "category": "typealias",
      "type": "recursive",
      "pattern": "Typealias expands to infinite recursion|Recursive typealias definition",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Remove circular references in typealias definitions",
      "root_cause": "kotlin_typealias_recursive",
      "tags": ["kotlin", "typealias", "recursive", "circular"]
    },
    {
      "id": "kotlin_annotation_target_wrong",
      "category": "annotation",
      "type": "target",
      "pattern": "This annotation is not applicable to target|Wrong annotation target",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Check @Target annotation on custom annotations or use appropriate use-site target",
      "root_cause": "kotlin_annotation_wrong_target",
      "tags": ["kotlin", "annotation", "target", "meta"]
    },
    {
      "id": "kotlin_reflection_not_available",
      "category": "reflection",
      "type": "availability",
      "pattern": "kotlin-reflect.jar is not in the classpath|KClass .* cannot be cast",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Add kotlin-reflect dependency for reflection API usage",
      "root_cause": "kotlin_reflection_missing_dependency",
      "tags": ["kotlin", "reflection", "dependency", "classpath"]
    },
    {
      "id": "kotlin_contract_violation",
      "category": "contract",
      "type": "violation",
      "pattern": "Contract violation|Effect .* is not satisfied|CallsInPlace contract broken",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Ensure function implementation matches its contract declaration",
      "root_cause": "kotlin_contract_not_satisfied",
      "tags": ["kotlin", "contract", "effect", "violation"]
    },
    {
      "id": "kotlin_value_class_boxing",
      "category": "value_class",
      "type": "boxing",
      "pattern": "Value class is boxed|Inline class boxing overhead|Performance degradation from boxing",
      "confidence": "low",
      "reliability": "low",
      "severity": "low",
      "suggestion": "Be aware of value class boxing in generic contexts or when used as nullable",
      "root_cause": "kotlin_value_class_boxed",
      "tags": ["kotlin", "value_class", "inline_class", "boxing"]
    },
    {
      "id": "kotlin_companion_const_required",
      "category": "companion",
      "type": "const",
      "pattern": "Const 'val' are only allowed on top level or in objects|Cannot be used in companion without const",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Use const val for compile-time constants in companion objects",
      "root_cause": "kotlin_companion_const",
      "tags": ["kotlin", "companion", "const", "compile_time"]
    },
    {
      "id": "kotlin_delegation_class_conflict",
      "category": "delegation",
      "type": "class_delegation",
      "pattern": "Class '.*' must override|Delegation and inheritance conflict|Multiple delegates",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Explicitly override conflicting members when using class delegation",
      "root_cause": "kotlin_delegation_conflict",
      "tags": ["kotlin", "delegation", "class", "conflict"]
    },
    {
      "id": "kotlin_sam_conversion_ambiguity",
      "category": "sam",
      "type": "conversion",
      "pattern": "SAM conversion is not applicable|Functional interface expected|Multiple SAM candidates",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Use explicit SAM constructor or ensure single abstract method interface",
      "root_cause": "kotlin_sam_ambiguity",
      "tags": ["kotlin", "sam", "functional_interface", "conversion"]
    }
  ]
}