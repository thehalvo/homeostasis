{
  "description": "Kotlin Coroutines-specific errors and concurrency issues",
  "version": "1.0.0",
  "rules": [
    {
      "id": "kotlin_cancellation_exception",
      "pattern": "kotlinx\\.coroutines\\.CancellationException.*",
      "error_type": "CancellationException",
      "description": "Coroutine was cancelled during execution",
      "root_cause": "kotlin_coroutine_cancelled",
      "suggestion": "Handle CancellationException properly by cleaning up resources and re-throwing, or check Job.isActive before operations",
      "confidence": "high",
      "severity": "medium",
      "category": "coroutines",
      "framework": "coroutines"
    },
    {
      "id": "kotlin_timeout_cancellation",
      "pattern": "kotlinx\\.coroutines\\.TimeoutCancellationException.*",
      "error_type": "TimeoutCancellationException",
      "description": "Coroutine operation timed out",
      "root_cause": "kotlin_coroutine_timeout",
      "suggestion": "Increase timeout duration with withTimeout, optimize operation performance, or use withTimeoutOrNull for graceful handling",
      "confidence": "high",
      "severity": "medium",
      "category": "coroutines",
      "framework": "coroutines"
    },
    {
      "id": "kotlin_job_cancellation",
      "pattern": ".*Job was cancelled.*|.*parent.*job.*cancelled.*",
      "error_type": "CancellationException",
      "description": "Parent job was cancelled, affecting child coroutines",
      "root_cause": "kotlin_job_cancelled",
      "suggestion": "Handle job cancellation gracefully, avoid starting new work from cancelled scope, use SupervisorJob for independent child failures",
      "confidence": "medium",
      "severity": "medium",
      "category": "coroutines",
      "framework": "coroutines"
    },
    {
      "id": "kotlin_illegal_state_coroutine",
      "pattern": ".*coroutine.*illegal state.*|.*suspend function.*illegal.*",
      "error_type": "IllegalStateException",
      "description": "Suspend function called from illegal context",
      "root_cause": "kotlin_suspend_illegal_context",
      "suggestion": "Call suspend functions only from coroutines or other suspend functions, use runBlocking for top-level calls",
      "confidence": "high",
      "severity": "high",
      "category": "coroutines",
      "framework": "coroutines"
    },
    {
      "id": "kotlin_coroutine_context_null",
      "pattern": ".*coroutine.*context.*null.*|.*CoroutineContext.*null.*",
      "error_type": "NullPointerException",
      "description": "Coroutine context is null when accessed",
      "root_cause": "kotlin_coroutine_context_null",
      "suggestion": "Ensure coroutine is running with proper context, check currentCoroutineContext() availability",
      "confidence": "medium",
      "severity": "medium",
      "category": "coroutines",
      "framework": "coroutines"
    },
    {
      "id": "kotlin_channel_closed",
      "pattern": ".*Channel.*closed.*|.*kotlinx\\.coroutines\\.channels\\.ClosedReceiveChannelException.*",
      "error_type": "ClosedReceiveChannelException",
      "description": "Attempted to receive from closed channel",
      "root_cause": "kotlin_channel_closed",
      "suggestion": "Check if channel is closed with isClosedForReceive before receiving, or use receiveCatching for safe operations",
      "confidence": "high",
      "severity": "medium",
      "category": "coroutines",
      "framework": "coroutines"
    },
    {
      "id": "kotlin_flow_collection_error",
      "pattern": ".*Flow.*collection.*error.*|.*flow.*exception.*collect.*",
      "error_type": "FlowException",
      "description": "Error occurred during Flow collection",
      "root_cause": "kotlin_flow_collection_error",
      "suggestion": "Use catch operator to handle Flow exceptions, implement proper error handling in Flow collectors",
      "confidence": "medium",
      "severity": "medium",
      "category": "coroutines",
      "framework": "coroutines"
    },
    {
      "id": "kotlin_shared_mutable_state",
      "pattern": ".*shared.*mutable.*state.*|.*concurrent.*modification.*coroutine.*",
      "error_type": "ConcurrentModificationException",
      "description": "Concurrent access to shared mutable state",
      "root_cause": "kotlin_shared_mutable_state",
      "suggestion": "Use thread-safe collections, Mutex for synchronization, or actor pattern for state management",
      "confidence": "medium",
      "severity": "high",
      "category": "coroutines",
      "framework": "coroutines"
    },
    {
      "id": "kotlin_dispatcher_unavailable",
      "pattern": ".*dispatcher.*unavailable.*|.*Dispatchers.*not.*available.*",
      "error_type": "IllegalStateException",
      "description": "Requested dispatcher is not available",
      "root_cause": "kotlin_dispatcher_unavailable",
      "suggestion": "Use appropriate dispatcher for the task: Dispatchers.Main for UI, Dispatchers.IO for I/O, Dispatchers.Default for CPU work",
      "confidence": "medium",
      "severity": "medium",
      "category": "coroutines",
      "framework": "coroutines"
    },
    {
      "id": "kotlin_runblocking_main_thread",
      "pattern": ".*runBlocking.*main.*thread.*|.*blocking.*UI.*thread.*",
      "error_type": "IllegalStateException",
      "description": "runBlocking used on main thread causing UI freeze",
      "root_cause": "kotlin_runblocking_main_thread",
      "suggestion": "Use launch or async for non-blocking coroutines, avoid runBlocking on main thread",
      "confidence": "high",
      "severity": "high",
      "category": "coroutines",
      "framework": "coroutines"
    },
    {
      "id": "kotlin_scope_leaked",
      "pattern": ".*coroutine.*scope.*leak.*|.*scope.*not.*cancelled.*",
      "error_type": "MemoryLeak",
      "description": "Coroutine scope not properly cancelled causing memory leak",
      "root_cause": "kotlin_scope_leak",
      "suggestion": "Cancel coroutine scopes in lifecycle callbacks (onDestroy, onCleared), use ViewModelScope or LifecycleScope",
      "confidence": "medium",
      "severity": "medium",
      "category": "coroutines",
      "framework": "coroutines"
    },
    {
      "id": "kotlin_exception_handler_missing",
      "pattern": ".*uncaught.*exception.*coroutine.*|.*CoroutineExceptionHandler.*missing.*",
      "error_type": "UncaughtException",
      "description": "Uncaught exception in coroutine without exception handler",
      "root_cause": "kotlin_exception_handler_missing",
      "suggestion": "Add CoroutineExceptionHandler to handle uncaught exceptions in coroutines",
      "confidence": "medium",
      "severity": "high",
      "category": "coroutines",
      "framework": "coroutines"
    },
    {
      "id": "kotlin_structured_concurrency_violation",
      "pattern": ".*structured.*concurrency.*violation.*|.*coroutine.*parent.*child.*",
      "error_type": "StructuredConcurrencyViolation",
      "description": "Violation of structured concurrency principles",
      "root_cause": "kotlin_structured_concurrency_violation",
      "suggestion": "Follow structured concurrency: use coroutineScope, ensure child coroutines complete before parent",
      "confidence": "medium",
      "severity": "medium",
      "category": "coroutines",
      "framework": "coroutines"
    },
    {
      "id": "kotlin_deferred_await_cancelled",
      "pattern": ".*Deferred.*await.*cancelled.*|.*await.*cancelled.*job.*",
      "error_type": "CancellationException",
      "description": "Awaiting on cancelled Deferred",
      "root_cause": "kotlin_deferred_await_cancelled",
      "suggestion": "Check if Deferred is active before await, handle cancellation in async blocks",
      "confidence": "medium",
      "severity": "medium",
      "category": "coroutines",
      "framework": "coroutines"
    },
    {
      "id": "kotlin_actor_channel_overflow",
      "pattern": ".*actor.*channel.*overflow.*|.*Channel.*buffer.*overflow.*",
      "error_type": "ChannelOverflowException",
      "description": "Actor channel buffer overflow",
      "root_cause": "kotlin_actor_overflow",
      "suggestion": "Increase channel buffer size or implement backpressure handling, consider using Channel.UNLIMITED carefully",
      "confidence": "medium",
      "severity": "medium",
      "category": "coroutines",
      "framework": "coroutines"
    }
  ]
}