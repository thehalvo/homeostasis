{
  "description": "Jetpack Compose-specific errors and UI issues",
  "version": "1.0.0",
  "rules": [
    {
      "id": "kotlin_compose_recomposition_loop",
      "pattern": ".*recomposition.*infinite.*loop.*|.*composition.*loop.*detected.*",
      "error_type": "InfiniteRecomposition",
      "description": "Infinite recomposition loop detected in Compose UI",
      "root_cause": "kotlin_compose_infinite_recomposition",
      "suggestion": "Use remember{} for expensive calculations, avoid creating new objects in composition, use derivedStateOf for computed values",
      "confidence": "medium",
      "severity": "high",
      "category": "compose",
      "framework": "compose"
    },
    {
      "id": "kotlin_compose_state_not_remembered",
      "pattern": ".*State.*not.*remembered.*|.*mutableStateOf.*not.*remembered.*",
      "error_type": "StateNotRemembered",
      "description": "State object not properly remembered across recompositions",
      "root_cause": "kotlin_compose_state_not_remembered",
      "suggestion": "Wrap state creation with remember{} to persist across recompositions: val state = remember { mutableStateOf(...) }",
      "confidence": "high",
      "severity": "medium",
      "category": "compose",
      "framework": "compose"
    },
    {
      "id": "kotlin_compose_invalid_composition",
      "pattern": ".*invalid.*composition.*context.*|.*Composable.*outside.*composition.*",
      "error_type": "InvalidCompositionContext",
      "description": "Composable function called outside valid composition context",
      "root_cause": "kotlin_compose_invalid_context",
      "suggestion": "Ensure Composables are only called from within other Composables or composition functions marked with @Composable",
      "confidence": "high",
      "severity": "high",
      "category": "compose",
      "framework": "compose"
    },
    {
      "id": "kotlin_compose_modifier_applied_multiple",
      "pattern": ".*Modifier.*applied.*multiple.*times.*|.*modifier.*reused.*",
      "error_type": "ModifierReuse",
      "description": "Modifier instance applied to multiple composables",
      "root_cause": "kotlin_compose_modifier_reuse",
      "suggestion": "Create new Modifier instances for each composable, don't reuse modifier variables across composables",
      "confidence": "medium",
      "severity": "medium",
      "category": "compose",
      "framework": "compose"
    },
    {
      "id": "kotlin_compose_side_effect_in_composition",
      "pattern": ".*side.*effect.*composition.*|.*composition.*side.*effect.*",
      "error_type": "SideEffectInComposition",
      "description": "Side effect performed during composition phase",
      "root_cause": "kotlin_compose_side_effect",
      "suggestion": "Use LaunchedEffect, DisposableEffect, or SideEffect for side effects, avoid direct calls in composition",
      "confidence": "medium",
      "severity": "medium",
      "category": "compose",
      "framework": "compose"
    },
    {
      "id": "kotlin_compose_key_not_stable",
      "pattern": ".*key.*not.*stable.*|.*unstable.*key.*remember.*",
      "error_type": "UnstableKey",
      "description": "Unstable key used in remember or LaunchedEffect",
      "root_cause": "kotlin_compose_unstable_key",
      "suggestion": "Use stable keys in remember/LaunchedEffect, avoid using mutable objects as keys",
      "confidence": "medium",
      "severity": "medium",
      "category": "compose",
      "framework": "compose"
    },
    {
      "id": "kotlin_compose_state_hoisting_issue",
      "pattern": ".*state.*hoisting.*|.*state.*not.*hoisted.*",
      "error_type": "StateHoistingIssue",
      "description": "State not properly hoisted for reusable composables",
      "root_cause": "kotlin_compose_state_hoisting",
      "suggestion": "Hoist state to the lowest common ancestor, pass state and callbacks as parameters",
      "confidence": "low",
      "severity": "medium",
      "category": "compose",
      "framework": "compose"
    },
    {
      "id": "kotlin_compose_performance_issue",
      "pattern": ".*compose.*performance.*|.*recomposition.*performance.*",
      "error_type": "ComposePerformanceIssue",
      "description": "Performance issue due to excessive recompositions",
      "root_cause": "kotlin_compose_performance",
      "suggestion": "Use Immutable/Stable annotations, remember expensive calculations, minimize parameter changes",
      "confidence": "low",
      "severity": "medium",
      "category": "compose",
      "framework": "compose"
    },
    {
      "id": "kotlin_compose_navigation_issue",
      "pattern": ".*navigation.*compose.*error.*|.*NavController.*error.*",
      "error_type": "NavigationError",
      "description": "Navigation error in Compose Navigation",
      "root_cause": "kotlin_compose_navigation_error",
      "suggestion": "Ensure NavController is properly initialized and routes are correctly defined in NavGraph",
      "confidence": "medium",
      "severity": "medium",
      "category": "compose",
      "framework": "compose"
    },
    {
      "id": "kotlin_compose_animation_issue",
      "pattern": ".*animation.*compose.*error.*|.*Animatable.*error.*",
      "error_type": "AnimationError",
      "description": "Animation error in Compose animations",
      "root_cause": "kotlin_compose_animation_error",
      "suggestion": "Check animation target values and ensure proper animation lifecycle management",
      "confidence": "medium",
      "severity": "medium",
      "category": "compose",
      "framework": "compose"
    },
    {
      "id": "kotlin_compose_theme_issue",
      "pattern": ".*theme.*not.*found.*compose.*|.*MaterialTheme.*error.*",
      "error_type": "ThemeError",
      "description": "Theme-related error in Compose",
      "root_cause": "kotlin_compose_theme_error",
      "suggestion": "Ensure MaterialTheme or custom theme is properly provided at the root of composition",
      "confidence": "medium",
      "severity": "medium",
      "category": "compose",
      "framework": "compose"
    },
    {
      "id": "kotlin_compose_preview_error",
      "pattern": ".*Preview.*error.*|.*@Preview.*compilation.*error.*",
      "error_type": "PreviewError",
      "description": "Error in Compose Preview function",
      "root_cause": "kotlin_compose_preview_error",
      "suggestion": "Ensure Preview functions have no parameters and provide necessary theme/data for preview",
      "confidence": "medium",
      "severity": "low",
      "category": "compose",
      "framework": "compose"
    },
    {
      "id": "kotlin_compose_lifecycle_issue",
      "pattern": ".*lifecycle.*compose.*|.*DisposableEffect.*error.*",
      "error_type": "LifecycleError",
      "description": "Lifecycle management error in Compose",
      "root_cause": "kotlin_compose_lifecycle_error",
      "suggestion": "Use appropriate effect APIs: LaunchedEffect for coroutines, DisposableEffect for cleanup",
      "confidence": "medium",
      "severity": "medium",
      "category": "compose",
      "framework": "compose"
    },
    {
      "id": "kotlin_compose_viewmodel_issue",
      "pattern": ".*ViewModel.*compose.*error.*|.*viewModel.*composition.*",
      "error_type": "ViewModelError",
      "description": "ViewModel integration error in Compose",
      "root_cause": "kotlin_compose_viewmodel_error",
      "suggestion": "Use viewModel() function to obtain ViewModel instances, ensure proper ViewModelProvider setup",
      "confidence": "medium",
      "severity": "medium",
      "category": "compose",
      "framework": "compose"
    },
    {
      "id": "kotlin_compose_constraint_layout_error",
      "pattern": ".*ConstraintLayout.*compose.*error.*|.*createRefs.*error.*",
      "error_type": "ConstraintLayoutError",
      "description": "ConstraintLayout error in Compose",
      "root_cause": "kotlin_compose_constraint_layout_error",
      "suggestion": "Ensure constraint references are properly created and applied, check constraint definitions",
      "confidence": "medium",
      "severity": "medium",
      "category": "compose",
      "framework": "compose"
    }
  ]
}