{
  "version": "1.0.0",
  "description": "Advanced Kotlin coroutines error detection rules",
  "rules": [
    {
      "id": "kotlin_coroutine_context_inheritance",
      "category": "coroutines",
      "type": "context_inheritance",
      "pattern": "CoroutineContext element '.*' is not inherited|Context element lost in child coroutine",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Ensure proper context inheritance using coroutineContext + newElement",
      "root_cause": "kotlin_context_inheritance_error",
      "tags": [
        "kotlin",
        "coroutines",
        "context",
        "inheritance"
      ],
      "description": "Kotlin Coroutine Context Inheritance"
    },
    {
      "id": "kotlin_supervisor_vs_regular_scope",
      "category": "coroutines",
      "type": "scope_misuse",
      "pattern": "Child failure cancelled parent|SupervisorJob should be used|One failed child cancelled siblings",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Use SupervisorScope or SupervisorJob when child failures should not affect siblings",
      "root_cause": "kotlin_supervisor_scope_needed",
      "tags": [
        "kotlin",
        "coroutines",
        "supervisor",
        "scope"
      ],
      "description": "Kotlin Supervisor Vs Regular Scope"
    },
    {
      "id": "kotlin_cold_flow_hot_flow_confusion",
      "category": "coroutines",
      "type": "flow_type",
      "pattern": "Flow is not collected|SharedFlow has no collectors|Multiple collectors on cold flow",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Use SharedFlow/StateFlow for hot streams, Flow for cold streams",
      "root_cause": "kotlin_flow_type_confusion",
      "tags": [
        "kotlin",
        "coroutines",
        "flow",
        "hot_cold"
      ],
      "description": "Kotlin Cold Flow Hot Flow Confusion"
    },
    {
      "id": "kotlin_stateflow_initial_value",
      "category": "coroutines",
      "type": "stateflow",
      "pattern": "StateFlow requires initial value|MutableStateFlow initialization error",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Provide initial value when creating StateFlow",
      "root_cause": "kotlin_stateflow_init_error",
      "tags": [
        "kotlin",
        "coroutines",
        "stateflow",
        "initialization"
      ],
      "description": "Kotlin Stateflow Initial Value"
    },
    {
      "id": "kotlin_sharedflow_replay_confusion",
      "category": "coroutines",
      "type": "sharedflow",
      "pattern": "SharedFlow replay buffer|No values replayed to new collector|Unexpected replay behavior",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "low",
      "suggestion": "Configure SharedFlow replay parameter correctly for your use case",
      "root_cause": "kotlin_sharedflow_replay",
      "tags": [
        "kotlin",
        "coroutines",
        "sharedflow",
        "replay"
      ],
      "description": "Kotlin Sharedflow Replay Confusion"
    },
    {
      "id": "kotlin_test_dispatcher_missing",
      "category": "coroutines",
      "type": "testing",
      "pattern": "TestDispatcher not used in test|runTest requires TestDispatcher|Coroutine test timeout",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Use TestDispatcher and runTest for coroutine testing",
      "root_cause": "kotlin_test_dispatcher_missing",
      "tags": [
        "kotlin",
        "coroutines",
        "testing",
        "dispatcher"
      ],
      "description": "Kotlin Test Dispatcher Missing"
    },
    {
      "id": "kotlin_conflated_channel_data_loss",
      "category": "coroutines",
      "type": "channel_buffer",
      "pattern": "Channel element dropped|Conflated channel overwrote value|Buffer overflow with DROP_",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Be aware of data loss with conflated channels or DROP_ overflow strategies",
      "root_cause": "kotlin_conflated_channel_loss",
      "tags": [
        "kotlin",
        "coroutines",
        "channel",
        "conflated"
      ],
      "description": "Kotlin Conflated Channel Data Loss"
    },
    {
      "id": "kotlin_select_expression_error",
      "category": "coroutines",
      "type": "select",
      "pattern": "Select expression error|onAwait clause failed|Multiple clauses selected",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Handle all cases in select expression, ensure mutual exclusivity",
      "root_cause": "kotlin_select_expression",
      "tags": [
        "kotlin",
        "coroutines",
        "select",
        "expression"
      ],
      "description": "Kotlin Select Expression"
    },
    {
      "id": "kotlin_flow_conflate_data_loss",
      "category": "coroutines",
      "type": "flow_operator",
      "pattern": "Flow conflate dropped values|Latest value only collected|Intermediate emissions lost",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "low",
      "suggestion": "Use conflate() when only latest value matters, otherwise use buffer()",
      "root_cause": "kotlin_flow_conflate",
      "tags": [
        "kotlin",
        "coroutines",
        "flow",
        "conflate"
      ],
      "description": "Kotlin Flow Conflate Data Loss"
    },
    {
      "id": "kotlin_coroutine_name_debugging",
      "category": "coroutines",
      "type": "debugging",
      "pattern": "Coroutine name not set|Debugging coroutine without name|CoroutineName missing",
      "confidence": "low",
      "reliability": "low",
      "severity": "low",
      "suggestion": "Use CoroutineName for easier debugging of coroutines",
      "root_cause": "kotlin_coroutine_unnamed",
      "tags": [
        "kotlin",
        "coroutines",
        "debugging",
        "name"
      ],
      "description": "Kotlin Coroutine Name Debugging"
    },
    {
      "id": "kotlin_flow_on_each_side_effect",
      "category": "coroutines",
      "type": "flow_operator",
      "pattern": "Side effect in map operator|Flow transformation has side effects|onEach should be used",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "low",
      "suggestion": "Use onEach for side effects, keep map/transform pure",
      "root_cause": "kotlin_flow_side_effect",
      "tags": [
        "kotlin",
        "coroutines",
        "flow",
        "side_effect"
      ],
      "description": "Kotlin Flow On Each Side Effect"
    },
    {
      "id": "kotlin_dispatcher_unconfined_danger",
      "category": "coroutines",
      "type": "dispatcher",
      "pattern": "Unconfined dispatcher used|Dispatchers.Unconfined is dangerous|Unexpected thread in coroutine",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Avoid Dispatchers.Unconfined unless you understand the implications",
      "root_cause": "kotlin_dispatcher_unconfined",
      "tags": [
        "kotlin",
        "coroutines",
        "dispatcher",
        "unconfined"
      ],
      "description": "Kotlin Dispatcher Unconfined Danger"
    },
    {
      "id": "kotlin_flow_lifecycle_mismatch",
      "category": "coroutines",
      "type": "lifecycle",
      "pattern": "Flow collection outlives lifecycle|flowWithLifecycle not used|Memory leak from flow collection",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "high",
      "suggestion": "Use flowWithLifecycle or lifecycleScope.launch for Android lifecycle-aware collection",
      "root_cause": "kotlin_flow_lifecycle",
      "tags": [
        "kotlin",
        "coroutines",
        "flow",
        "lifecycle"
      ],
      "description": "Kotlin Flow Lifecycle Mismatch"
    },
    {
      "id": "kotlin_mutex_deadlock",
      "category": "coroutines",
      "type": "synchronization",
      "pattern": "Mutex deadlock detected|Circular mutex dependency|withLock suspended indefinitely",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "critical",
      "suggestion": "Avoid nested mutex locks, use consistent lock ordering",
      "root_cause": "kotlin_mutex_deadlock",
      "tags": [
        "kotlin",
        "coroutines",
        "mutex",
        "deadlock"
      ],
      "description": "Kotlin Mutex Deadlock"
    },
    {
      "id": "kotlin_broadcast_channel_deprecated",
      "category": "coroutines",
      "type": "deprecation",
      "pattern": "BroadcastChannel is deprecated|Use SharedFlow instead of BroadcastChannel",
      "confidence": "high",
      "reliability": "high",
      "severity": "low",
      "suggestion": "Migrate from BroadcastChannel to SharedFlow",
      "root_cause": "kotlin_broadcast_channel_deprecated",
      "tags": [
        "kotlin",
        "coroutines",
        "broadcast",
        "deprecated"
      ],
      "description": "Kotlin Broadcast Channel Deprecated"
    }
  ],
  "name": "Kotlin Coroutines Advanced"
}