{
  "description": "Spring Boot error detection rules for common application context, configuration, and runtime issues",
  "version": "1.0.0",
  "rules": [
    {
      "id": "spring_boot_autoconfiguration_failed",
      "pattern": ".*AutoConfigurationReportLoggingInitializer.*|.*CONDITIONS EVALUATION REPORT.*|.*APPLICATION FAILED TO START.*",
      "error_type": "ApplicationContextException",
      "description": "Spring Boot auto-configuration failed to initialize properly",
      "root_cause": "spring_boot_autoconfiguration_failure",
      "suggestion": "Check application.properties/yml for configuration issues. Review excluded auto-configurations and missing dependencies. Use @EnableAutoConfiguration exclude attribute if needed.",
      "confidence": "high",
      "severity": "critical",
      "category": "spring-boot",
      "framework": "spring-boot"
    },
    {
      "id": "spring_boot_bean_creation_failed",
      "pattern": ".*BeanCreationException.*|.*Error creating bean.*|.*Bean instantiation.*failed.*",
      "error_type": "BeanCreationException",
      "description": "Spring failed to create or initialize a bean",
      "root_cause": "spring_boot_bean_creation_failure",
      "suggestion": "Check bean configuration, dependencies and constructor parameters. Verify all required dependencies are available. Review @Autowired annotations and circular dependencies.",
      "confidence": "high",
      "severity": "high",
      "category": "spring-boot",
      "framework": "spring-boot"
    },
    {
      "id": "spring_boot_circular_dependency",
      "pattern": ".*BeanCurrentlyInCreationException.*|.*circular dependency.*|.*currently in creation.*",
      "error_type": "BeanCurrentlyInCreationException",
      "description": "Circular dependency detected between Spring beans",
      "root_cause": "spring_boot_circular_dependency",
      "suggestion": "Refactor to break circular dependencies. Use @Lazy annotation, setter injection instead of constructor injection, or ApplicationContextAware interface.",
      "confidence": "high",
      "severity": "high",
      "category": "spring-boot",
      "framework": "spring-boot"
    },
    {
      "id": "spring_boot_no_such_bean",
      "pattern": ".*NoSuchBeanDefinitionException.*|.*No qualifying bean.*|.*required.*bean.*not found.*",
      "error_type": "NoSuchBeanDefinitionException",
      "description": "Required bean not found in Spring application context",
      "root_cause": "spring_boot_missing_bean",
      "suggestion": "Verify bean is properly annotated with @Component, @Service, @Repository, or @Configuration. Check component scanning configuration and @ComponentScan basePackages.",
      "confidence": "high",
      "severity": "high",
      "category": "spring-boot",
      "framework": "spring-boot"
    },
    {
      "id": "spring_boot_property_binding_failed",
      "pattern": ".*BindException.*|.*Failed to bind properties.*|.*configuration.*binding.*failed.*",
      "error_type": "BindException",
      "description": "Failed to bind configuration properties to Java objects",
      "root_cause": "spring_boot_property_binding_failure",
      "suggestion": "Check property names match field names in @ConfigurationProperties classes. Verify data types and provide type converters if needed. Use @ConstructorBinding for immutable configuration.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring-boot",
      "framework": "spring-boot"
    },
    {
      "id": "spring_boot_datasource_failed",
      "pattern": ".*DataSourceBeanCreationException.*|.*Failed to configure.*DataSource.*|.*Cannot determine embedded database driver.*",
      "error_type": "DataSourceBeanCreationException",
      "description": "Failed to configure or create database DataSource",
      "root_cause": "spring_boot_datasource_configuration_failure",
      "suggestion": "Check database connection properties (URL, username, password). Verify database driver is on classpath. Configure spring.datasource.* properties correctly.",
      "confidence": "high",
      "severity": "high",
      "category": "spring-boot",
      "framework": "spring-boot"
    },
    {
      "id": "spring_boot_jpa_configuration_failed",
      "pattern": ".*JpaBaseConfiguration.*|.*EntityManagerFactory.*creation.*failed.*|.*Hibernate.*initialization.*failed.*",
      "error_type": "BeanCreationException",
      "description": "JPA/Hibernate configuration failed in Spring Boot",
      "root_cause": "spring_boot_jpa_configuration_failure",
      "suggestion": "Check JPA entity mappings and annotations. Verify database schema matches entity definitions. Configure spring.jpa.* properties and ensure database is accessible.",
      "confidence": "high",
      "severity": "high",
      "category": "spring-boot",
      "framework": "spring-boot"
    },
    {
      "id": "spring_boot_web_server_failed",
      "pattern": ".*Unable to start embedded.*server.*|.*Web server failed to start.*|.*Port.*already in use.*",
      "error_type": "WebServerException",
      "description": "Embedded web server failed to start",
      "root_cause": "spring_boot_web_server_failure",
      "suggestion": "Check if port is already in use and configure server.port property. Verify web server dependencies are present. Check for SSL configuration issues if using HTTPS.",
      "confidence": "high",
      "severity": "critical",
      "category": "spring-boot",
      "framework": "spring-boot"
    },
    {
      "id": "spring_boot_actuator_endpoint_disabled",
      "pattern": ".*actuator.*endpoint.*disabled.*|.*management.*endpoint.*not.*enabled.*",
      "error_type": "EndpointNotEnabledException",
      "description": "Spring Boot Actuator endpoint is disabled or not accessible",
      "root_cause": "spring_boot_actuator_endpoint_disabled",
      "suggestion": "Enable actuator endpoints with management.endpoints.web.exposure.include=* or specific endpoints. Configure management.endpoint.{name}.enabled=true for specific endpoints.",
      "confidence": "medium",
      "severity": "low",
      "category": "spring-boot",
      "framework": "spring-boot"
    },
    {
      "id": "spring_boot_profile_not_found",
      "pattern": ".*Profile.*not found.*|.*No active profile.*|.*profile.*does not exist.*",
      "error_type": "ProfileNotFoundException",
      "description": "Specified Spring profile not found or not active",
      "root_cause": "spring_boot_profile_not_found",
      "suggestion": "Check spring.profiles.active property and verify profile-specific configuration files exist. Use @Profile annotation correctly on beans and configurations.",
      "confidence": "medium",
      "severity": "medium",
      "category": "spring-boot",
      "framework": "spring-boot"
    },
    {
      "id": "spring_boot_security_config_failed",
      "pattern": ".*SecurityConfigurationException.*|.*WebSecurityConfigurerAdapter.*|.*security.*configuration.*failed.*",
      "error_type": "SecurityConfigurationException",
      "description": "Spring Security configuration failed",
      "root_cause": "spring_boot_security_configuration_failure",
      "suggestion": "Check Spring Security configuration class. Verify authentication and authorization rules. Update to SecurityFilterChain if using deprecated WebSecurityConfigurerAdapter.",
      "confidence": "high",
      "severity": "high",
      "category": "spring-boot",
      "framework": "spring-boot"
    },
    {
      "id": "spring_boot_transaction_failed",
      "pattern": ".*TransactionSystemException.*|.*Transaction.*rolled.*back.*|.*Could not commit.*transaction.*",
      "error_type": "TransactionSystemException",
      "description": "Database transaction failed or rolled back",
      "root_cause": "spring_boot_transaction_failure",
      "suggestion": "Check database constraints and data integrity. Review @Transactional configuration and isolation levels. Handle exceptions properly within transactional methods.",
      "confidence": "high",
      "severity": "high",
      "category": "spring-boot",
      "framework": "spring-boot"
    },
    {
      "id": "spring_boot_validation_failed",
      "pattern": ".*MethodArgumentNotValidException.*|.*BindingResult.*errors.*|.*validation.*failed.*",
      "error_type": "MethodArgumentNotValidException",
      "description": "Request validation failed in Spring Boot controller",
      "root_cause": "spring_boot_validation_failure",
      "suggestion": "Check @Valid annotations on request parameters. Review validation constraints and custom validators. Handle BindingResult in controller methods.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring-boot",
      "framework": "spring-boot"
    },
    {
      "id": "spring_boot_async_config_failed",
      "pattern": ".*AsyncConfigurationException.*|.*@Async.*configuration.*failed.*|.*TaskExecutor.*not.*found.*",
      "error_type": "AsyncConfigurationException",
      "description": "Spring async configuration failed",
      "root_cause": "spring_boot_async_configuration_failure",
      "suggestion": "Enable async processing with @EnableAsync. Configure TaskExecutor bean or use default async configuration. Check @Async method signatures are correct.",
      "confidence": "medium",
      "severity": "medium",
      "category": "spring-boot",
      "framework": "spring-boot"
    },
    {
      "id": "spring_boot_cache_config_failed",
      "pattern": ".*CacheConfigurationException.*|.*@Cacheable.*failed.*|.*CacheManager.*not.*found.*",
      "error_type": "CacheConfigurationException",
      "description": "Spring cache configuration failed",
      "root_cause": "spring_boot_cache_configuration_failure",
      "suggestion": "Enable caching with @EnableCaching. Configure CacheManager bean or use auto-configuration. Check cache names and key generation strategies.",
      "confidence": "medium",
      "severity": "medium",
      "category": "spring-boot",
      "framework": "spring-boot"
    },
    {
      "id": "spring_boot_test_context_failed",
      "pattern": ".*@SpringBootTest.*failed.*|.*TestContext.*initialization.*failed.*|.*test.*application.*context.*",
      "error_type": "TestContextException",
      "description": "Spring Boot test context failed to initialize",
      "root_cause": "spring_boot_test_context_failure",
      "suggestion": "Check test configuration and mock setup. Use @TestConfiguration for test-specific beans. Verify test properties and profiles are correctly configured.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring-boot",
      "framework": "spring-boot"
    },
    {
      "id": "spring_boot_devtools_class_change",
      "pattern": ".*DevTools.*class.*changes.*|.*restart.*required.*|.*LiveReload.*failed.*",
      "error_type": "DevToolsException",
      "description": "Spring Boot DevTools detected class changes requiring restart",
      "root_cause": "spring_boot_devtools_restart_required",
      "suggestion": "Allow DevTools to restart the application automatically. Check that spring-boot-devtools is in the runtime classpath. Configure devtools.restart.exclude if needed.",
      "confidence": "low",
      "severity": "low",
      "category": "spring-boot",
      "framework": "spring-boot"
    },
    {
      "id": "spring_boot_conditional_failed",
      "pattern": ".*@Conditional.*evaluation.*failed.*|.*condition.*not.*met.*|.*ConditionalOnProperty.*failed.*",
      "error_type": "ConditionalException",
      "description": "Spring Boot conditional annotation failed evaluation",
      "root_cause": "spring_boot_conditional_failure",
      "suggestion": "Check conditional annotations like @ConditionalOnProperty, @ConditionalOnClass, @ConditionalOnBean. Verify conditions are met for bean creation.",
      "confidence": "medium",
      "severity": "medium",
      "category": "spring-boot",
      "framework": "spring-boot"
    },
    {
      "id": "spring_boot_banner_failed",
      "pattern": ".*Banner.*printing.*failed.*|.*banner.*not.*found.*|.*SpringBootBanner.*error.*",
      "error_type": "BannerException",
      "description": "Spring Boot banner printing failed",
      "root_cause": "spring_boot_banner_failure",
      "suggestion": "Check banner.txt file format and location. Disable banner with SpringApplication.setBannerMode(Banner.Mode.OFF) if not needed.",
      "confidence": "low",
      "severity": "low",
      "category": "spring-boot",
      "framework": "spring-boot"
    },
    {
      "id": "spring_boot_health_check_failed",
      "pattern": ".*HealthIndicator.*failed.*|.*health.*check.*down.*|.*actuator.*health.*error.*",
      "error_type": "HealthCheckException",
      "description": "Spring Boot health check failed",
      "root_cause": "spring_boot_health_check_failure",
      "suggestion": "Check custom HealthIndicator implementations. Verify dependent services are available. Configure health check timeouts and retry logic.",
      "confidence": "medium",
      "severity": "medium",
      "category": "spring-boot",
      "framework": "spring-boot"
    }
  ]
}