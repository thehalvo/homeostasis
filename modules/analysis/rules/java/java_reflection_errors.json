{
  "name": "Java Java Reflection Errors",
  "description": "Java reflection API error detection rules for runtime type introspection and manipulation",
  "version": "1.0.0",
  "rules": [
    {
      "id": "java_method_not_found",
      "pattern": "java\\.lang\\.NoSuchMethodException|no such method|method.*not found.*reflection",
      "error_type": "NoSuchMethodException",
      "description": "Method not found via reflection",
      "root_cause": "java_reflection_method_not_found",
      "suggestion": "Verify method name, parameter types match exactly (including primitives vs wrappers). Check method exists in runtime class version. Use getDeclaredMethod() for private methods.",
      "confidence": "high",
      "severity": "high",
      "category": "reflection",
      "framework": "java"
    },
    {
      "id": "java_field_not_found",
      "pattern": "java\\.lang\\.NoSuchFieldException|no such field|field.*not found.*reflection",
      "error_type": "NoSuchFieldException",
      "description": "Field not found via reflection",
      "root_cause": "java_reflection_field_not_found",
      "suggestion": "Check field name spelling. Use getDeclaredField() for private fields. Verify field exists in actual class, not just compile-time type.",
      "confidence": "high",
      "severity": "high",
      "category": "reflection",
      "framework": "java"
    },
    {
      "id": "java_illegal_access_reflection",
      "pattern": "java\\.lang\\.IllegalAccessException|cannot access.*member|access denied.*reflection",
      "error_type": "IllegalAccessException",
      "description": "Illegal access to class member via reflection",
      "root_cause": "java_reflection_illegal_access",
      "suggestion": "Call setAccessible(true) for private members. Check Java 9+ module access rules. Ensure security manager allows reflection.",
      "confidence": "high",
      "severity": "high",
      "category": "reflection",
      "framework": "java"
    },
    {
      "id": "java_invocation_target",
      "pattern": "java\\.lang\\.reflect\\.InvocationTargetException|exception.*thrown by.*invoked method",
      "error_type": "InvocationTargetException",
      "description": "Exception thrown by reflectively invoked method",
      "root_cause": "java_reflection_invocation_error",
      "suggestion": "Check getCause() for actual exception. Handle exceptions from invoked method. Validate parameters before invocation.",
      "confidence": "high",
      "severity": "high",
      "category": "reflection",
      "framework": "java"
    },
    {
      "id": "java_wrong_argument_count",
      "pattern": "wrong number of arguments|IllegalArgumentException.*argument count|expected.*arguments.*got",
      "error_type": "WrongArgumentCount",
      "description": "Wrong number of arguments for reflective method call",
      "root_cause": "java_reflection_arg_count",
      "suggestion": "Match argument count to method signature. Remember varargs need array wrapper. Check for overloaded methods.",
      "confidence": "high",
      "severity": "high",
      "category": "reflection",
      "framework": "java"
    },
    {
      "id": "java_instantiation_reflection",
      "pattern": "java\\.lang\\.InstantiationException.*reflection|cannot instantiate.*abstract|interface.*cannot be instantiated",
      "error_type": "InstantiationException",
      "description": "Cannot instantiate class via reflection",
      "root_cause": "java_reflection_instantiation",
      "suggestion": "Cannot instantiate abstract classes or interfaces. Ensure class has accessible no-arg constructor or use getDeclaredConstructor().",
      "confidence": "high",
      "severity": "high",
      "category": "reflection",
      "framework": "java"
    },
    {
      "id": "java_module_access_reflection",
      "pattern": "module.*does not.*opens|InaccessibleObjectException|Unable to make.*accessible.*module",
      "error_type": "ModuleAccessException",
      "description": "Module system preventing reflection access (Java 9+)",
      "root_cause": "java_module_reflection_access",
      "suggestion": "Add --add-opens directives to JVM. Update module-info.java to open packages. Consider using public APIs instead of reflection.",
      "confidence": "high",
      "severity": "high",
      "category": "reflection",
      "framework": "java"
    },
    {
      "id": "java_security_manager_reflection",
      "pattern": "SecurityException.*reflection|access denied.*suppressAccessChecks|reflection.*not allowed.*security",
      "error_type": "SecurityManagerReflection",
      "description": "Security manager blocking reflection",
      "root_cause": "java_security_reflection",
      "suggestion": "Update security policy to allow reflection. Use doPrivileged blocks. Consider alternative non-reflective approaches.",
      "confidence": "high",
      "severity": "high",
      "category": "reflection",
      "framework": "java"
    },
    {
      "id": "java_type_mismatch_reflection",
      "pattern": "IllegalArgumentException.*argument type mismatch|cannot convert.*reflection|wrong type.*reflective call",
      "error_type": "TypeMismatchReflection",
      "description": "Type mismatch in reflective operation",
      "root_cause": "java_reflection_type_mismatch",
      "suggestion": "Ensure argument types match exactly. Handle primitive type conversions. Use appropriate wrapper classes for primitives.",
      "confidence": "high",
      "severity": "high",
      "category": "reflection",
      "framework": "java"
    },
    {
      "id": "java_annotation_not_present",
      "pattern": "annotation.*not present|getAnnotation.*returned null|missing.*annotation.*reflection",
      "error_type": "AnnotationNotPresent",
      "description": "Expected annotation not found via reflection",
      "root_cause": "java_annotation_not_present",
      "suggestion": "Check annotation retention policy (RUNTIME required). Verify annotation is on correct element. Use isAnnotationPresent() first.",
      "confidence": "medium",
      "severity": "medium",
      "category": "reflection",
      "framework": "java"
    },
    {
      "id": "java_generic_type_reflection",
      "pattern": "cannot determine.*generic type|ParameterizedType.*cast|generic type information.*lost",
      "error_type": "GenericTypeReflection",
      "description": "Generic type information lost or inaccessible",
      "root_cause": "java_generic_reflection",
      "suggestion": "Use getGenericType() instead of getType(). Handle ParameterizedType, TypeVariable. Consider TypeToken pattern for generic types.",
      "confidence": "medium",
      "severity": "medium",
      "category": "reflection",
      "framework": "java"
    },
    {
      "id": "java_proxy_invocation_error",
      "pattern": "Proxy.*InvocationHandler.*error|UndeclaredThrowableException.*proxy|proxy.*method.*failed",
      "error_type": "ProxyInvocationError",
      "description": "Error in dynamic proxy invocation",
      "root_cause": "java_proxy_error",
      "suggestion": "Check InvocationHandler implementation. Handle exceptions properly in invoke(). Verify proxy interfaces are compatible.",
      "confidence": "medium",
      "severity": "medium",
      "category": "reflection",
      "framework": "java"
    },
    {
      "id": "java_constructor_not_found",
      "pattern": "NoSuchMethodException.*<init>|constructor.*not found|no suitable constructor",
      "error_type": "ConstructorNotFound",
      "description": "Constructor not found via reflection",
      "root_cause": "java_reflection_constructor_not_found",
      "suggestion": "Match constructor parameter types exactly. Use getDeclaredConstructor() for non-public constructors. Check for default constructor.",
      "confidence": "high",
      "severity": "high",
      "category": "reflection",
      "framework": "java"
    },
    {
      "id": "java_enum_reflection_error",
      "pattern": "cannot reflectively create enum|enum.*reflection.*not supported|IllegalArgumentException.*enum constant",
      "error_type": "EnumReflectionError",
      "description": "Invalid enum operation via reflection",
      "root_cause": "java_enum_reflection",
      "suggestion": "Cannot create enum instances via reflection. Use Enum.valueOf() or access existing constants. Check enum constant names.",
      "confidence": "medium",
      "severity": "medium",
      "category": "reflection",
      "framework": "java"
    },
    {
      "id": "java_array_reflection_error",
      "pattern": "IllegalArgumentException.*array|ArrayIndexOutOfBoundsException.*Array\\.get|wrong type.*array reflection",
      "error_type": "ArrayReflectionError",
      "description": "Error manipulating arrays via reflection",
      "root_cause": "java_array_reflection",
      "suggestion": "Use Array class methods correctly. Check array component type. Verify index bounds. Handle primitive arrays specially.",
      "confidence": "medium",
      "severity": "medium",
      "category": "reflection",
      "framework": "java"
    }
  ]
}