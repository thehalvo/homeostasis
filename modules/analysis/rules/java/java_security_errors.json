{
  "name": "Java Security Vulnerability Patterns",
  "description": "Security vulnerability patterns for Java applications",
  "version": "1.0.0",
  "rules": [
    {
      "id": "java_security_sql_injection",
      "pattern": "Statement.*executeQuery.*\\+|PreparedStatement.*\\+ .*getParameter|SQL.*concatenation|createQuery.*string concat",
      "type": "SecurityError",
      "description": "SQL injection vulnerability through string concatenation",
      "root_cause": "sql_injection",
      "suggestion": "Use PreparedStatement with placeholders, never concatenate user input into SQL",
      "category": "java",
      "subcategory": "injection",
      "severity": "critical",
      "confidence": "high",
      "tags": ["security", "sql", "injection"]
    },
    {
      "id": "java_security_command_injection",
      "pattern": "Runtime\\.exec.*\\+|ProcessBuilder.*user.*input|exec.*concatenation",
      "type": "SecurityError",
      "description": "Command injection vulnerability through user input",
      "root_cause": "command_injection",
      "suggestion": "Use ProcessBuilder with array arguments, validate and sanitize all inputs",
      "category": "java",
      "subcategory": "injection",
      "severity": "critical",
      "confidence": "high",
      "tags": ["security", "command", "injection"]
    },
    {
      "id": "java_security_path_traversal",
      "pattern": "File.*\\.\\.|\\.getPath.*user.*input|Path.*resolve.*untrusted|directory traversal",
      "type": "SecurityError",
      "description": "Path traversal vulnerability in file operations",
      "root_cause": "path_traversal",
      "suggestion": "Validate file paths, use Path.normalize() and check against base directory",
      "category": "java",
      "subcategory": "file_access",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "path", "traversal"]
    },
    {
      "id": "java_security_xxe",
      "pattern": "XMLReader.*setFeature.*false|DocumentBuilder.*XXE|SAXParser.*external.*entity|FEATURE_SECURE_PROCESSING.*false",
      "type": "SecurityError",
      "description": "XML External Entity (XXE) vulnerability",
      "root_cause": "xxe_vulnerability",
      "suggestion": "Disable external entities and DTDs, use XMLConstants.FEATURE_SECURE_PROCESSING",
      "category": "java",
      "subcategory": "xml",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "xxe", "xml"]
    },
    {
      "id": "java_security_deserialization",
      "pattern": "ObjectInputStream.*readObject|deserialize.*untrusted|readObject.*remote|Serializable.*vulnerability",
      "type": "SecurityError",
      "description": "Unsafe deserialization of untrusted data",
      "root_cause": "unsafe_deserialization",
      "suggestion": "Avoid deserializing untrusted data, use JSON or filtered ObjectInputStream",
      "category": "java",
      "subcategory": "deserialization",
      "severity": "critical",
      "confidence": "high",
      "tags": ["security", "deserialization", "rce"]
    },
    {
      "id": "java_security_weak_random",
      "pattern": "Random\\(\\).*password|Math\\.random.*token|Random.*security|predictable random",
      "type": "SecurityError",
      "description": "Using weak random number generator for security",
      "root_cause": "weak_randomness",
      "suggestion": "Use SecureRandom for all security-related randomness",
      "category": "java",
      "subcategory": "cryptography",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "random", "cryptography"]
    },
    {
      "id": "java_security_hardcoded_password",
      "pattern": "password\\s*=\\s*\"[^\"]+\"|getPassword.*return.*\".*\"|hardcoded.*credential",
      "type": "SecurityError",
      "description": "Hardcoded password or credentials in source code",
      "root_cause": "hardcoded_secrets",
      "suggestion": "Use environment variables, configuration files, or key management services",
      "category": "java",
      "subcategory": "secrets",
      "severity": "critical",
      "confidence": "medium",
      "tags": ["security", "password", "hardcoded"]
    },
    {
      "id": "java_security_weak_crypto",
      "pattern": "DES|MD5|SHA1|ECB mode|getInstance\\(\"DES|Cipher.*ECB",
      "type": "SecurityError",
      "description": "Using weak or deprecated cryptographic algorithms",
      "root_cause": "weak_cryptography",
      "suggestion": "Use AES with GCM mode, SHA-256 or stronger, avoid ECB mode",
      "category": "java",
      "subcategory": "cryptography",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "crypto", "weak"]
    },
    {
      "id": "java_security_ldap_injection",
      "pattern": "SearchControls.*\\+.*user|InitialDirContext.*search.*concat|LDAP.*injection",
      "type": "SecurityError",
      "description": "LDAP injection vulnerability",
      "root_cause": "ldap_injection",
      "suggestion": "Escape special LDAP characters, use parameterized LDAP queries",
      "category": "java",
      "subcategory": "injection",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "ldap", "injection"]
    },
    {
      "id": "java_security_insecure_ssl",
      "pattern": "TrustManager.*acceptAll|HostnameVerifier.*return true|SSLContext.*insecure",
      "type": "SecurityError",
      "description": "Disabled SSL/TLS certificate validation",
      "root_cause": "insecure_ssl",
      "suggestion": "Properly validate SSL certificates, don't bypass hostname verification",
      "category": "java",
      "subcategory": "network",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "ssl", "tls"]
    },
    {
      "id": "java_security_race_condition",
      "pattern": "File\\.exists.*File\\.create|check.*then.*act|TOCTOU|race condition",
      "type": "SecurityError",
      "description": "Time-of-check to time-of-use (TOCTOU) race condition",
      "root_cause": "race_condition",
      "suggestion": "Use atomic operations, Files.createFile with CREATE_NEW option",
      "category": "java",
      "subcategory": "concurrency",
      "severity": "medium",
      "confidence": "medium",
      "tags": ["security", "race", "toctou"]
    },
    {
      "id": "java_security_reflection_abuse",
      "pattern": "setAccessible\\(true\\)|getDeclaredField.*setAccessible|private.*field.*reflection",
      "type": "SecurityError",
      "description": "Bypassing access control through reflection",
      "root_cause": "reflection_abuse",
      "suggestion": "Avoid using setAccessible, respect encapsulation, use SecurityManager if needed",
      "category": "java",
      "subcategory": "reflection",
      "severity": "medium",
      "confidence": "medium",
      "tags": ["security", "reflection", "access"]
    },
    {
      "id": "java_security_xpath_injection",
      "pattern": "XPath.*compile.*\\+|XPathExpression.*user.*input|XPath.*injection",
      "type": "SecurityError",
      "description": "XPath injection vulnerability",
      "root_cause": "xpath_injection",
      "suggestion": "Use XPath variables/parameters, escape user input in XPath expressions",
      "category": "java",
      "subcategory": "injection",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "xpath", "injection"]
    },
    {
      "id": "java_security_integer_overflow",
      "pattern": "Integer\\.MAX_VALUE.*\\+|overflow.*not checked|arithmetic.*overflow",
      "type": "SecurityError",
      "description": "Integer overflow vulnerability",
      "root_cause": "integer_overflow",
      "suggestion": "Use Math.addExact(), check bounds before arithmetic operations",
      "category": "java",
      "subcategory": "numeric",
      "severity": "medium",
      "confidence": "medium",
      "tags": ["security", "overflow", "numeric"]
    },
    {
      "id": "java_security_session_fixation",
      "pattern": "session\\.getId\\(\\).*before.*login|session.*not.*invalidated|session fixation",
      "type": "SecurityError",
      "description": "Session fixation vulnerability",
      "root_cause": "session_fixation",
      "suggestion": "Invalidate session and create new one after authentication",
      "category": "java",
      "subcategory": "session",
      "severity": "high",
      "confidence": "medium",
      "tags": ["security", "session", "authentication"]
    }
  ]
}