{
  "name": "Svelte Event Handling Errors",
  "version": "1.0.0",
  "description": "Svelte event handling and DOM manipulation error detection rules",
  "rules": [
    {
      "id": "svelte_event_handler_undefined",
      "category": "svelte",
      "subcategory": "events",
      "pattern": "(?i)event.*handler.*not.*defined|on:.*undefined|event.*function.*not.*found",
      "suggestion": "Define event handler function before using it in on: directive",
      "root_cause": "svelte_event_handler_undefined",
      "confidence": "high",
      "severity": "error",
      "reliability": "high",
      "tags": ["svelte", "events", "undefined"],
      "fix_commands": [
        "Define event handler function in script section",
        "Check function name spelling",
        "Ensure function is in scope"
      ]
    },
    {
      "id": "svelte_event_modifier_error",
      "category": "svelte",
      "subcategory": "events",
      "pattern": "(?i)event.*modifier.*invalid|on:.*\\|.*invalid|event.*modifier.*not.*recognized",
      "suggestion": "Use valid event modifiers: preventDefault, stopPropagation, passive, once, capture, self, trusted",
      "root_cause": "svelte_event_modifier_error",
      "confidence": "high",
      "severity": "error",
      "reliability": "high",
      "tags": ["svelte", "events", "modifiers"],
      "fix_commands": [
        "Use valid event modifiers: preventDefault, stopPropagation, passive, once, capture, self, trusted",
        "Check modifier spelling",
        "Combine modifiers with | (pipe) character"
      ]
    },
    {
      "id": "svelte_custom_event_dispatch_error",
      "category": "svelte",
      "subcategory": "events",
      "pattern": "(?i)createEventDispatcher.*not.*imported|dispatch.*not.*defined|custom.*event.*dispatch.*error",
      "suggestion": "Import createEventDispatcher from 'svelte' and create dispatcher",
      "root_cause": "svelte_custom_event_dispatch_error",
      "confidence": "high",
      "severity": "error",
      "reliability": "high",
      "tags": ["svelte", "events", "custom", "dispatch"],
      "fix_commands": [
        "Import createEventDispatcher from 'svelte'",
        "Create dispatcher: const dispatch = createEventDispatcher()",
        "Use dispatch('eventName', eventData) to emit events"
      ]
    },
    {
      "id": "svelte_event_forwarding_error",
      "category": "svelte",
      "subcategory": "events",
      "pattern": "(?i)event.*forwarding.*error|on:.*forwarding.*failed|event.*not.*forwarded",
      "suggestion": "Use on:eventname (without handler) to forward events to parent",
      "root_cause": "svelte_event_forwarding_error",
      "confidence": "medium",
      "severity": "error",
      "reliability": "medium",
      "tags": ["svelte", "events", "forwarding"],
      "fix_commands": [
        "Use on:click (without handler) to forward DOM events",
        "Use on:custom to forward custom events",
        "Ensure event name matches between child and parent"
      ]
    },
    {
      "id": "svelte_dom_reference_error",
      "category": "svelte",
      "subcategory": "dom",
      "pattern": "(?i)bind:this.*undefined|element.*reference.*undefined|DOM.*element.*not.*found",
      "suggestion": "Use bind:this to get DOM element reference",
      "root_cause": "svelte_dom_reference_error",
      "confidence": "high",
      "severity": "error",
      "reliability": "high",
      "tags": ["svelte", "dom", "reference", "bind"],
      "fix_commands": [
        "Declare variable for element reference",
        "Use bind:this={elementRef} on element",
        "Access element after component mounts (in onMount)"
      ]
    },
    {
      "id": "svelte_dom_manipulation_timing",
      "category": "svelte",
      "subcategory": "dom",
      "pattern": "(?i)DOM.*element.*not.*ready|element.*manipulation.*before.*mount|DOM.*access.*too.*early",
      "suggestion": "Perform DOM manipulation in onMount or after tick()",
      "root_cause": "svelte_dom_manipulation_timing",
      "confidence": "medium",
      "severity": "warning",
      "reliability": "medium",
      "tags": ["svelte", "dom", "timing", "onMount"],
      "fix_commands": [
        "Move DOM manipulation to onMount lifecycle hook",
        "Use await tick() before DOM operations",
        "Check element exists before manipulation"
      ]
    },
    {
      "id": "svelte_window_binding_error",
      "category": "svelte",
      "subcategory": "dom",
      "pattern": "(?i)window.*binding.*error|svelte:window.*bind.*error|window.*property.*not.*bindable",
      "suggestion": "Use valid window bindings: innerWidth, innerHeight, outerWidth, outerHeight, scrollX, scrollY, online",
      "root_cause": "svelte_window_binding_error",
      "confidence": "high",
      "severity": "error",
      "reliability": "high",
      "tags": ["svelte", "dom", "window", "binding"],
      "fix_commands": [
        "Use valid window properties for binding",
        "Check binding syntax: bind:innerWidth={width}",
        "Ensure bound variable is declared with let"
      ]
    },
    {
      "id": "svelte_document_binding_error",
      "category": "svelte",
      "subcategory": "dom",
      "pattern": "(?i)document.*binding.*error|svelte:document.*bind.*error|document.*property.*not.*bindable",
      "suggestion": "Use valid document bindings: activeElement, fullscreenElement, pointerLockElement, visibilityState",
      "root_cause": "svelte_document_binding_error",
      "confidence": "high",
      "severity": "error",
      "reliability": "high",
      "tags": ["svelte", "dom", "document", "binding"],
      "fix_commands": [
        "Use valid document properties for binding",
        "Check binding syntax on svelte:document",
        "Ensure bound variable is declared with let"
      ]
    },
    {
      "id": "svelte_form_binding_error",
      "category": "svelte",
      "subcategory": "dom",
      "pattern": "(?i)form.*binding.*error|input.*binding.*invalid|form.*element.*bind.*error",
      "suggestion": "Use appropriate form bindings: bind:value, bind:checked, bind:group, bind:files",
      "root_cause": "svelte_form_binding_error",
      "confidence": "high",
      "severity": "error",
      "reliability": "high",
      "tags": ["svelte", "dom", "forms", "binding"],
      "fix_commands": [
        "Use bind:value for input, textarea, select",
        "Use bind:checked for checkboxes and radio buttons",
        "Use bind:group for radio button groups",
        "Use bind:files for file inputs"
      ]
    },
    {
      "id": "svelte_media_binding_error",
      "category": "svelte",
      "subcategory": "dom",
      "pattern": "(?i)media.*binding.*error|video.*binding.*invalid|audio.*binding.*error",
      "suggestion": "Use valid media bindings: currentTime, duration, paused, volume, playbackRate, buffered, played, seekable",
      "root_cause": "svelte_media_binding_error",
      "confidence": "medium",
      "severity": "error",
      "reliability": "medium",
      "tags": ["svelte", "dom", "media", "binding"],
      "fix_commands": [
        "Use valid media element properties for binding",
        "Check binding syntax on audio/video elements",
        "Ensure bound variable is declared with let"
      ]
    },
    {
      "id": "svelte_keyboard_event_error",
      "category": "svelte",
      "subcategory": "events",
      "pattern": "(?i)keyboard.*event.*error|key.*binding.*invalid|keydown.*keyup.*error",
      "suggestion": "Use proper keyboard event handling with event.key or event.code",
      "root_cause": "svelte_keyboard_event_error",
      "confidence": "medium",
      "severity": "warning",
      "reliability": "medium",
      "tags": ["svelte", "events", "keyboard"],
      "fix_commands": [
        "Use event.key for character keys",
        "Use event.code for physical key locations",
        "Handle keyboard events in appropriate handlers"
      ]
    },
    {
      "id": "svelte_touch_event_error",
      "category": "svelte",
      "subcategory": "events",
      "pattern": "(?i)touch.*event.*error|touch.*handler.*invalid|mobile.*touch.*error",
      "suggestion": "Use proper touch event handling with touchstart, touchmove, touchend",
      "root_cause": "svelte_touch_event_error",
      "confidence": "medium",
      "severity": "warning",
      "reliability": "medium",
      "tags": ["svelte", "events", "touch", "mobile"],
      "fix_commands": [
        "Use touchstart, touchmove, touchend events",
        "Handle touch events with proper event object",
        "Consider passive event listeners for better performance"
      ]
    }
  ]
}