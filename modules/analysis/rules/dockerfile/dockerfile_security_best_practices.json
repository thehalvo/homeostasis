{
  "name": "Dockerfile Security Best Practices",
  "description": "Rules for detecting security issues and best practices in Dockerfile configurations",
  "rules": [
    {
      "id": "dockerfile_security_root_user",
      "pattern": "running as root|USER root|no USER instruction|default root user|container runs as root|privileged user|root by default|root privileges|as root user|non-root user missing|non-privileged user|unprivileged user",
      "type": "SecurityIssue",
      "description": "Container running as root user",
      "root_cause": "dockerfile_security_issue",
      "suggestion": "Add USER instruction to run as non-root user",
      "category": "security",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "dockerfile",
        "security",
        "user",
        "privilege"
      ],
      "examples": [
        "No USER instruction defaults to running as root",
        "Explicitly setting USER root",
        "Container running with excessive privileges"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "low",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "dockerfile_security_latest_tag",
      "pattern": "FROM .*:latest|latest tag|unspecified version|using latest|no version specified|unversioned image|floating tag|mutable tag|unstable tag|non-specific tag|unspecific version|moving tag",
      "type": "SecurityIssue",
      "description": "Using 'latest' or other floating tags for base image",
      "root_cause": "dockerfile_security_issue",
      "suggestion": "Use specific version tags for reproducible and secure builds",
      "category": "security",
      "severity": "medium",
      "confidence": "high",
      "tags": [
        "dockerfile",
        "security",
        "tag",
        "versioning"
      ],
      "examples": [
        "FROM node:latest",
        "FROM ubuntu with no version tag",
        "Using floating tags instead of specific versions"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "low",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "dockerfile_security_exposed_secrets",
      "pattern": "password|secret|token|key|credential|api key|auth token|private key|ssh key|access key|certificate|apikey|access token|auth key|encryption key|signing key|secret key|sensitive data",
      "type": "SecurityIssue",
      "description": "Potential hardcoded secrets in Dockerfile",
      "root_cause": "dockerfile_security_issue",
      "suggestion": "Use build args, multi-stage builds, or Docker secrets for sensitive data",
      "category": "security",
      "severity": "critical",
      "confidence": "medium",
      "tags": [
        "dockerfile",
        "security",
        "secrets",
        "credentials"
      ],
      "examples": [
        "ENV API_KEY=1234567890abcdef",
        "RUN curl -u username:password",
        "Hardcoded credentials in RUN or ENV instructions"
      ],
      "metadata": {},
      "criticality": "critical",
      "complexity": "moderate",
      "reliability": "medium",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "dockerfile_security_package_version",
      "pattern": "install without version|no version specified|unspecified package version|no package version|wildcard version|unspecified dependency version|version pinning|missing version|exact version|version not fixed|version constraint",
      "type": "SecurityIssue",
      "description": "Installing packages without specific versions",
      "root_cause": "dockerfile_security_issue",
      "suggestion": "Pin package versions for security and reproducibility",
      "category": "security",
      "severity": "medium",
      "confidence": "high",
      "tags": [
        "dockerfile",
        "security",
        "packages",
        "versioning"
      ],
      "examples": [
        "RUN apt-get install nginx without version",
        "npm install express without version constraint",
        "Installing dependencies without pinned versions"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "dockerfile_security_updates_missing",
      "pattern": "missing updates|no updates|update packages|security updates|apply updates|package updates|outdated packages|vulnerability fixes|security patches|system updates|apt-get upgrade|apt upgrade|yum update|dnf upgrade",
      "type": "SecurityIssue",
      "description": "Missing security updates in Dockerfile",
      "root_cause": "dockerfile_security_issue",
      "suggestion": "Include package updates, but use specific versions for consistency",
      "category": "security",
      "severity": "medium",
      "confidence": "medium",
      "tags": [
        "dockerfile",
        "security",
        "updates",
        "patches"
      ],
      "examples": [
        "Installing packages without updating first",
        "Using outdated base image without security patches",
        "No mechanism to apply security updates"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "moderate",
      "reliability": "medium",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "dockerfile_security_suspicious_permissions",
      "pattern": "chmod 777|chmod -R 777|chmod a+rwx|chmod ugo+rwx|world-writeable|world-readable|excessive permissions|overly permissive|insecure permissions|chmod.*o+w|permissions 777|open permissions|global permissions|public permissions",
      "type": "SecurityIssue",
      "description": "Setting overly permissive file permissions",
      "root_cause": "dockerfile_security_issue",
      "suggestion": "Use least privilege permissions appropriate for the application",
      "category": "security",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "dockerfile",
        "security",
        "permissions",
        "chmod"
      ],
      "examples": [
        "RUN chmod -R 777 /app",
        "Setting world-writeable permissions unnecessarily",
        "Using 777 permissions instead of more restrictive options"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "dockerfile_security_exposed_ports",
      "pattern": "unnecessary ports|excess ports|exposed ports|insecure port|unencrypted port|clear text port|plaintext port|EXPOSE 23|EXPOSE 21|EXPOSE 25|EXPOSE 110|EXPOSE 143|EXPOSE 139|EXPOSE 389|unsafe port",
      "type": "SecurityIssue",
      "description": "Exposing unnecessary or insecure ports",
      "root_cause": "dockerfile_security_issue",
      "suggestion": "Only expose essential ports and prefer encrypted alternatives",
      "category": "security",
      "severity": "medium",
      "confidence": "medium",
      "tags": [
        "dockerfile",
        "security",
        "ports",
        "exposure"
      ],
      "examples": [
        "EXPOSE 23 (telnet) instead of secure alternatives",
        "Exposing unencrypted ports like 21 (FTP)",
        "Exposing unnecessary internal service ports"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "moderate",
      "reliability": "medium",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "dockerfile_security_healthcheck_missing",
      "pattern": "healthcheck missing|no health check|missing HEALTHCHECK|container health|container monitoring|service health|health monitoring|health status|missing monitoring|container status|no healthcheck|health check",
      "type": "SecurityIssue",
      "description": "No HEALTHCHECK instruction defined",
      "root_cause": "dockerfile_security_issue",
      "suggestion": "Add HEALTHCHECK to enable container health monitoring",
      "category": "security",
      "severity": "low",
      "confidence": "medium",
      "tags": [
        "dockerfile",
        "security",
        "healthcheck",
        "monitoring"
      ],
      "examples": [
        "Long-running service container without HEALTHCHECK",
        "Web server without health monitoring",
        "Missing mechanism to detect application failures"
      ],
      "metadata": {},
      "criticality": "low",
      "complexity": "moderate",
      "reliability": "medium",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "dockerfile_security_curl_insecure",
      "pattern": "curl -k|curl --insecure|curl --no-check-certificate|curl.*--insecure|wget --no-check-certificate|insecure download|bypass certificate|skip certificate|ignore certificate|disable SSL|no certificate check",
      "type": "SecurityIssue",
      "description": "Insecure file downloads with disabled certificate validation",
      "root_cause": "dockerfile_security_issue",
      "suggestion": "Always validate certificates when downloading files",
      "category": "security",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "dockerfile",
        "security",
        "download",
        "certificate"
      ],
      "examples": [
        "RUN curl -k https://example.com/file",
        "wget --no-check-certificate https://example.com/package",
        "Disabling SSL certificate validation in downloads"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "low",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "dockerfile_security_untrusted_source",
      "pattern": "untrusted source|unknown source|third party repository|external repository|unofficial repository|unofficial source|unauthenticated source|unverified source|arbitrary URL|external script|unofficial package|untrusted script|curl.*sh|wget.*sh|pipe to shell",
      "type": "SecurityIssue",
      "description": "Installing packages or scripts from untrusted sources",
      "root_cause": "dockerfile_security_issue",
      "suggestion": "Only use trusted sources with verification (checksums, signatures)",
      "category": "security",
      "severity": "high",
      "confidence": "medium",
      "tags": [
        "dockerfile",
        "security",
        "source",
        "trust"
      ],
      "examples": [
        "curl https://example.com/script.sh | bash",
        "Adding unofficial or unverified package repositories",
        "Piping downloaded content directly to shell"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "moderate",
      "reliability": "medium",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "dockerfile_security_nonverified_content",
      "pattern": "no verification|missing checksum|without verification|no integrity check|no signature check|missing verification|no hash|no SHA|no MD5|no GPG|no signature|checksum verification|integrity verification|digital signature",
      "type": "SecurityIssue",
      "description": "Downloaded content without verification",
      "root_cause": "dockerfile_security_issue",
      "suggestion": "Verify downloads with checksums, signatures, or secure hashes",
      "category": "security",
      "severity": "high",
      "confidence": "medium",
      "tags": [
        "dockerfile",
        "security",
        "verification",
        "integrity"
      ],
      "examples": [
        "Downloading packages without checksum verification",
        "Installing software without signature validation",
        "Missing integrity checks for downloaded content"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "moderate",
      "reliability": "medium",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    }
  ]
}