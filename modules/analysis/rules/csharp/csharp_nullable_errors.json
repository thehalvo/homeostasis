{
  "name": "C# Csharp Nullable Errors",
  "description": "C# nullable reference types and null safety error detection rules",
  "version": "1.0.0",
  "rules": [
    {
      "id": "csharp_nullable_warning_cs8600",
      "pattern": "CS8600|Converting null literal or possible null value to non-nullable type",
      "type": "NullableWarning",
      "description": "Converting possible null to non-nullable type",
      "root_cause": "csharp_nullable_conversion",
      "suggestion": "Use null-forgiving operator (!) if certain of non-null, or change target type to nullable. Add null check before assignment.",
      "confidence": "high",
      "severity": "medium",
      "category": "nullable",
      "framework": "csharp"
    },
    {
      "id": "csharp_nullable_warning_cs8601",
      "pattern": "CS8601|Possible null reference assignment",
      "type": "NullableWarning",
      "description": "Possible null reference assignment to non-nullable",
      "root_cause": "csharp_nullable_assignment",
      "suggestion": "Check for null before assignment, use ?? operator to provide default, or declare variable as nullable.",
      "confidence": "high",
      "severity": "medium",
      "category": "nullable",
      "framework": "csharp"
    },
    {
      "id": "csharp_nullable_warning_cs8602",
      "pattern": "CS8602|Dereference of a possibly null reference",
      "type": "NullableWarning",
      "description": "Dereferencing possibly null reference",
      "root_cause": "csharp_nullable_dereference",
      "suggestion": "Use null-conditional operator (?.) or add null check. Consider pattern matching: if (obj is not null).",
      "confidence": "high",
      "severity": "high",
      "category": "nullable",
      "framework": "csharp"
    },
    {
      "id": "csharp_nullable_warning_cs8603",
      "pattern": "CS8603|Possible null reference return",
      "type": "NullableWarning",
      "description": "Method may return null when return type is non-nullable",
      "root_cause": "csharp_nullable_return",
      "suggestion": "Ensure all code paths return non-null value, change return type to nullable, or throw exception for null cases.",
      "confidence": "high",
      "severity": "high",
      "category": "nullable",
      "framework": "csharp"
    },
    {
      "id": "csharp_nullable_warning_cs8604",
      "pattern": "CS8604|Possible null reference argument",
      "type": "NullableWarning",
      "description": "Passing possibly null value to non-nullable parameter",
      "root_cause": "csharp_nullable_argument",
      "suggestion": "Validate argument is not null before passing, use ?? to provide default, or change parameter to accept nullable.",
      "confidence": "high",
      "severity": "medium",
      "category": "nullable",
      "framework": "csharp"
    },
    {
      "id": "csharp_nullable_warning_cs8618",
      "pattern": "CS8618|Non-nullable .* must contain a non-null value when exiting constructor",
      "type": "NullableWarning",
      "description": "Non-nullable property not initialized in constructor",
      "root_cause": "csharp_nullable_init",
      "suggestion": "Initialize in constructor, use property initializer, or use 'required' modifier (C# 11+). Consider nullable if appropriate.",
      "confidence": "high",
      "severity": "high",
      "category": "nullable",
      "framework": "csharp"
    },
    {
      "id": "csharp_nullable_warning_cs8619",
      "pattern": "CS8619|Nullability of reference types .* doesn't match",
      "type": "NullableWarning",
      "description": "Nullability mismatch in type parameter constraints",
      "root_cause": "csharp_nullable_constraint",
      "suggestion": "Align nullability annotations in generic constraints. Use where T : class? for nullable reference types.",
      "confidence": "medium",
      "severity": "medium",
      "category": "nullable",
      "framework": "csharp"
    },
    {
      "id": "csharp_nullable_warning_cs8625",
      "pattern": "CS8625|Cannot convert null literal to non-nullable reference type",
      "type": "NullableWarning",
      "description": "Null literal assigned to non-nullable type",
      "root_cause": "csharp_null_literal",
      "suggestion": "Use default or actual value instead of null. Change type to nullable if null is valid value.",
      "confidence": "high",
      "severity": "high",
      "category": "nullable",
      "framework": "csharp"
    },
    {
      "id": "csharp_notnull_attribute_violation",
      "pattern": "violated.*NotNull|NotNullAttribute.*parameter|argument.*marked.*NotNull.*null",
      "type": "NotNullViolation",
      "description": "Null passed to parameter marked with [NotNull]",
      "root_cause": "csharp_notnull_violation",
      "suggestion": "Ensure non-null value for [NotNull] parameters. Compiler enforces this with nullable reference types enabled.",
      "confidence": "high",
      "severity": "high",
      "category": "nullable",
      "framework": "csharp"
    },
    {
      "id": "csharp_maybe_null_when",
      "pattern": "MaybeNullWhen|NotNullWhen|return.*null.*when false|conditional null analysis",
      "type": "ConditionalNullAnalysis",
      "description": "Conditional null analysis attribute usage issue",
      "root_cause": "csharp_conditional_null",
      "suggestion": "Use [MaybeNullWhen(false)] for Try-pattern methods. [NotNullWhen(true)] indicates non-null when returning true.",
      "confidence": "medium",
      "severity": "medium",
      "category": "nullable",
      "framework": "csharp"
    },
    {
      "id": "csharp_null_forgiving_misuse",
      "pattern": "null-forgiving operator.*null|!.*actually null|suppressed.*null.*warning",
      "type": "NullForgivingMisuse",
      "description": "Null-forgiving operator used on actual null",
      "root_cause": "csharp_null_forgiving_misuse",
      "suggestion": "Only use ! operator when certain value is not null. It suppresses warnings but doesn't prevent NullReferenceException.",
      "confidence": "medium",
      "severity": "high",
      "category": "nullable",
      "framework": "csharp"
    },
    {
      "id": "csharp_nullable_value_type",
      "pattern": "Nullable<.*>.*HasValue|InvalidOperationException.*Nullable.*Value|nullable value type.*no value",
      "type": "NullableValueType",
      "description": "Accessing Value on null nullable value type",
      "root_cause": "csharp_nullable_value_access",
      "suggestion": "Check HasValue before accessing Value, or use GetValueOrDefault(). Use ?. and ?? operators with nullable value types.",
      "confidence": "high",
      "severity": "high",
      "category": "nullable",
      "framework": "csharp"
    },
    {
      "id": "csharp_nullable_array_element",
      "pattern": "array.*non-nullable.*null element|T\\[\\].*contains null",
      "type": "NullableArrayElement",
      "description": "Null element in non-nullable array",
      "root_cause": "csharp_nullable_array",
      "suggestion": "Use T?[] for arrays that may contain nulls. Initialize arrays properly to avoid default null values.",
      "confidence": "medium",
      "severity": "medium",
      "category": "nullable",
      "framework": "csharp"
    },
    {
      "id": "csharp_disallownull_violation",
      "pattern": "DisallowNull.*property.*set.*null|setter.*DisallowNull.*null value",
      "type": "DisallowNullViolation",
      "description": "Null assigned to property with [DisallowNull]",
      "root_cause": "csharp_disallownull_violation",
      "suggestion": "[DisallowNull] prevents null assignment even for nullable types. Validate before setting or remove attribute.",
      "confidence": "medium",
      "severity": "medium",
      "category": "nullable",
      "framework": "csharp"
    },
    {
      "id": "csharp_nullable_disable_warning",
      "pattern": "#nullable disable|#pragma warning disable.*nullable|suppressing nullable warnings",
      "type": "NullableDisabled",
      "description": "Nullable warnings disabled in code",
      "root_cause": "csharp_nullable_disabled",
      "suggestion": "Avoid disabling nullable warnings. Fix underlying issues instead. Use #nullable restore after temporary disable.",
      "confidence": "low",
      "severity": "low",
      "category": "nullable",
      "framework": "csharp"
    }
  ]
}