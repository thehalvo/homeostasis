{
  "name": "C# Csharp Linq Errors",
  "description": "C# LINQ and query expression error detection rules",
  "version": "1.0.0",
  "rules": [
    {
      "id": "csharp_linq_no_elements",
      "pattern": "System\\.InvalidOperationException: Sequence contains no elements|First\\(\\)|Single\\(\\)|Last\\(\\).*empty",
      "type": "InvalidOperationException",
      "description": "LINQ operation on empty sequence",
      "root_cause": "csharp_linq_empty_sequence",
      "suggestion": "Use FirstOrDefault(), SingleOrDefault(), or LastOrDefault() for empty sequences. Check Any() before using First/Single/Last.",
      "confidence": "high",
      "severity": "high",
      "category": "linq",
      "framework": "csharp"
    },
    {
      "id": "csharp_linq_multiple_elements",
      "pattern": "System\\.InvalidOperationException: Sequence contains more than one element|Single\\(\\).*multiple",
      "type": "InvalidOperationException",
      "description": "Single() called on sequence with multiple elements",
      "root_cause": "csharp_linq_multiple_elements",
      "suggestion": "Use First() if you want any element, or add more specific Where() conditions. SingleOrDefault() still throws for multiple elements.",
      "confidence": "high",
      "severity": "high",
      "category": "linq",
      "framework": "csharp"
    },
    {
      "id": "csharp_linq_null_reference",
      "pattern": "NullReferenceException.*LINQ|from.*where.*null|Select.*null.*\\.",
      "type": "NullReferenceException",
      "description": "Null reference in LINQ query",
      "root_cause": "csharp_linq_null_reference",
      "suggestion": "Add null checks in Where clauses: Where(x => x != null && x.Property == value). Use ?. operator in projections.",
      "confidence": "high",
      "severity": "high",
      "category": "linq",
      "framework": "csharp"
    },
    {
      "id": "csharp_linq_deferred_execution",
      "pattern": "Collection was modified.*enumeration|LINQ.*modified.*iteration|InvalidOperationException.*enumeration",
      "type": "InvalidOperationException",
      "description": "Collection modified during LINQ enumeration",
      "root_cause": "csharp_linq_deferred_execution",
      "suggestion": "Materialize query with ToList() or ToArray() before modifying collection. Understand LINQ deferred execution.",
      "confidence": "high",
      "severity": "high",
      "category": "linq",
      "framework": "csharp"
    },
    {
      "id": "csharp_linq_cast_exception",
      "pattern": "InvalidCastException.*Cast<|OfType.*failed|Unable to cast.*IEnumerable",
      "type": "InvalidCastException",
      "description": "Invalid type cast in LINQ query",
      "root_cause": "csharp_linq_cast_error",
      "suggestion": "Use OfType<T>() to filter by type instead of Cast<T>(). Cast<T>() throws on incompatible types.",
      "confidence": "high",
      "severity": "medium",
      "category": "linq",
      "framework": "csharp"
    },
    {
      "id": "csharp_linq_order_by_null",
      "pattern": "ArgumentNullException.*OrderBy|CompareTo.*null|comparison.*null.*LINQ",
      "type": "ArgumentNullException",
      "description": "Null values in OrderBy comparison",
      "root_cause": "csharp_linq_orderby_null",
      "suggestion": "Handle nulls in OrderBy: OrderBy(x => x?.Property ?? defaultValue). Use OrderBy().ThenBy() for stable sorting.",
      "confidence": "medium",
      "severity": "medium",
      "category": "linq",
      "framework": "csharp"
    },
    {
      "id": "csharp_linq_group_by_null",
      "pattern": "ArgumentNullException.*GroupBy|key selector.*null|grouping.*null key",
      "type": "ArgumentNullException",
      "description": "Null key in GroupBy operation",
      "root_cause": "csharp_linq_groupby_null",
      "suggestion": "Ensure GroupBy key selector doesn't return null, or handle null keys explicitly. Use ?? operator for null keys.",
      "confidence": "medium",
      "severity": "medium",
      "category": "linq",
      "framework": "csharp"
    },
    {
      "id": "csharp_linq_aggregate_empty",
      "pattern": "InvalidOperationException.*Aggregate.*empty|no elements.*Aggregate|Aggregate.*source.*empty",
      "type": "InvalidOperationException",
      "description": "Aggregate on empty sequence without seed",
      "root_cause": "csharp_linq_aggregate_empty",
      "suggestion": "Provide seed value for Aggregate on potentially empty sequences: Aggregate(seed, (acc, x) => ...). Check Any() first.",
      "confidence": "high",
      "severity": "medium",
      "category": "linq",
      "framework": "csharp"
    },
    {
      "id": "csharp_linq_performance",
      "pattern": "multiple enumeration|LINQ.*performance|ToList\\(\\)\\..*ToList\\(\\)|Count\\(\\) > 0",
      "type": "PerformanceIssue",
      "description": "LINQ performance anti-pattern detected",
      "root_cause": "csharp_linq_performance",
      "suggestion": "Use Any() instead of Count() > 0. Avoid multiple enumerations. Consider using HashSet for Contains() operations.",
      "confidence": "medium",
      "severity": "low",
      "category": "linq",
      "framework": "csharp"
    },
    {
      "id": "csharp_plinq_aggregate_exception",
      "pattern": "AggregateException.*PLINQ|Parallel.*LINQ.*exception|AsParallel.*failed",
      "type": "AggregateException",
      "description": "Exception in Parallel LINQ operation",
      "root_cause": "csharp_plinq_exception",
      "suggestion": "Handle AggregateException.InnerExceptions in PLINQ. Consider if parallelization is beneficial for your data size.",
      "confidence": "high",
      "severity": "high",
      "category": "linq",
      "framework": "csharp"
    },
    {
      "id": "csharp_linq_conversion_overflow",
      "pattern": "OverflowException.*Sum|Average.*overflow|aggregate.*arithmetic overflow",
      "type": "OverflowException",
      "description": "Arithmetic overflow in LINQ aggregation",
      "root_cause": "csharp_linq_overflow",
      "suggestion": "Use appropriate numeric types for large aggregations. Consider using decimal or double for Sum/Average of large datasets.",
      "confidence": "medium",
      "severity": "medium",
      "category": "linq",
      "framework": "csharp"
    },
    {
      "id": "csharp_queryable_not_supported",
      "pattern": "NotSupportedException.*LINQ.*provider|method.*no supported translation|LINQ.*cannot be translated",
      "type": "NotSupportedException",
      "description": "LINQ operation not supported by provider (e.g., Entity Framework)",
      "root_cause": "csharp_queryable_not_supported",
      "suggestion": "Some LINQ operations can't be translated to SQL. Use AsEnumerable() to switch to LINQ to Objects, or rewrite query.",
      "confidence": "high",
      "severity": "medium",
      "category": "linq",
      "framework": "csharp"
    },
    {
      "id": "csharp_linq_join_null_key",
      "pattern": "ArgumentNullException.*Join|join.*null.*key|inner key.*outer key.*null",
      "type": "ArgumentNullException",
      "description": "Null key in LINQ join operation",
      "root_cause": "csharp_linq_join_null",
      "suggestion": "Filter out null keys before join or handle in key selectors. Join doesn't match null keys by default.",
      "confidence": "medium",
      "severity": "medium",
      "category": "linq",
      "framework": "csharp"
    },
    {
      "id": "csharp_linq_zip_length_mismatch",
      "pattern": "sequences.*different lengths.*Zip|Zip.*unequal.*count",
      "type": "InvalidOperationException",
      "description": "Zip operation on sequences of different lengths",
      "root_cause": "csharp_linq_zip_mismatch",
      "suggestion": "Zip stops at shortest sequence in .NET Core 3.0+. For older versions, ensure equal lengths or handle mismatch.",
      "confidence": "low",
      "severity": "low",
      "category": "linq",
      "framework": "csharp"
    },
    {
      "id": "csharp_expression_tree_compile",
      "pattern": "Expression.*compile.*failed|LambdaExpression.*error|expression tree.*invalid",
      "type": "InvalidOperationException",
      "description": "Expression tree compilation error",
      "root_cause": "csharp_expression_tree_error",
      "suggestion": "Check expression tree construction. Some C# features can't be used in expression trees (e.g., dynamic, async).",
      "confidence": "medium",
      "severity": "medium",
      "category": "linq",
      "framework": "csharp"
    }
  ]
}