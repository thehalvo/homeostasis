{
  "name": "Zig Comptime Errors",
  "description": "Rules for detecting Zig compile-time evaluation errors",
  "rules": [
    {
      "id": "zig_comptime_eval_error",
      "pattern": "error: unable to evaluate constant expression",
      "type": "ComptimeError",
      "description": "Unable to evaluate a compile-time constant expression",
      "root_cause": "zig_comptime_error",
      "suggestion": "Ensure all values in the expression are known at compile time",
      "category": "zig",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "zig",
        "comptime",
        "evaluation"
      ],
      "examples": [
        "error: unable to evaluate constant expression"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "zig_comptime_non_comptime_fn",
      "pattern": "error: comptime call of non-comptime function",
      "type": "ComptimeError",
      "description": "Calling a non-comptime function at compile time",
      "root_cause": "zig_comptime_error",
      "suggestion": "Mark the function as comptime or call it at runtime",
      "category": "zig",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "zig",
        "comptime",
        "function"
      ],
      "examples": [
        "error: comptime call of non-comptime function"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "zig_comptime_var_runtime_mod",
      "pattern": "error: comptime variable cannot be modified at runtime",
      "type": "ComptimeError",
      "description": "Attempting to modify a comptime variable at runtime",
      "root_cause": "zig_comptime_error",
      "suggestion": "Remove comptime or make the modification at compile time",
      "category": "zig",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "zig",
        "comptime",
        "variable"
      ],
      "examples": [
        "error: comptime variable cannot be modified at runtime"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "zig_comptime_expected_constant",
      "pattern": "error: expected compile-time constant",
      "type": "ComptimeError",
      "description": "Expected a compile-time constant value",
      "root_cause": "zig_comptime_error",
      "suggestion": "Use comptime or ensure the value is known at compile time",
      "category": "zig",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "zig",
        "comptime",
        "constant"
      ],
      "examples": [
        "error: expected compile-time constant"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "zig_comptime_runtime_cond",
      "pattern": "error: condition of comptime if must be comptime-known",
      "type": "ComptimeError",
      "description": "Condition in comptime if statement must be known at compile time",
      "root_cause": "zig_comptime_error",
      "suggestion": "Ensure condition expression is evaluable at compile time",
      "category": "zig",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "zig",
        "comptime",
        "condition",
        "if"
      ],
      "examples": [
        "error: condition of comptime if must be comptime-known"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "zig_comptime_type_not_known",
      "pattern": "error: type is not known at comptime",
      "type": "ComptimeError",
      "description": "Type information is not available at compile time",
      "root_cause": "zig_comptime_error",
      "suggestion": "Provide explicit type or ensure type is known at compile time",
      "category": "zig",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "zig",
        "comptime",
        "type"
      ],
      "examples": [
        "error: type is not known at comptime"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "zig_comptime_assign_var",
      "pattern": "error: variable of type '@Type' must be const or comptime",
      "type": "ComptimeError",
      "description": "Variables holding types must be const or comptime",
      "root_cause": "zig_comptime_error",
      "suggestion": "Use 'const' or 'comptime var' for type variables",
      "category": "zig",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "zig",
        "comptime",
        "type",
        "variable"
      ],
      "examples": [
        "error: variable of type '@Type' must be const or comptime"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "zig_comptime_generic_type",
      "pattern": "error: generic function parameter must be comptime-known",
      "type": "ComptimeError",
      "description": "Generic parameter must be known at compile time",
      "root_cause": "zig_comptime_error",
      "suggestion": "Add 'comptime' keyword to the generic parameter",
      "category": "zig",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "zig",
        "comptime",
        "generic",
        "parameter"
      ],
      "examples": [
        "error: generic function parameter must be comptime-known"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    }
  ],
    {
      "id": "zig_comptime_switch_not_exhaustive",
      "pattern": "error: switch must handle all possibilities",
      "type": "ComptimeError",
      "description": "Switch statement must handle all enum values or include else clause",
      "root_cause": "zig_comptime_error",
      "suggestion": "Add missing enum cases or an else clause to the switch statement",
      "category": "zig",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "zig",
        "comptime",
        "switch",
        "exhaustive"
      ],
      "examples": [
        "error: switch must handle all possibilities"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "zig_comptime_self_referential_type",
      "pattern": "error: type is not fully resolved",
      "type": "ComptimeError",
      "description": "Type definition contains self-reference that cannot be resolved",
      "root_cause": "zig_comptime_error",
      "suggestion": "Fix circular type definition or use indirection (pointer type)",
      "category": "zig",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "zig",
        "comptime",
        "type",
        "circular"
      ],
      "examples": [
        "error: type is not fully resolved"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "zig_comptime_stage1_value_limit",
      "pattern": "error: value too complex for stage1 compiler",
      "type": "ComptimeError",
      "description": "Compile-time computation too complex for the stage1 compiler",
      "root_cause": "zig_comptime_error",
      "suggestion": "Simplify compile-time computation or move calculation to runtime",
      "category": "zig",
      "severity": "medium",
      "confidence": "high",
      "tags": [
        "zig",
        "comptime",
        "stage1",
        "complexity"
      ],
      "examples": [
        "error: value too complex for stage1 compiler"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "zig_comptime_inline_loop",
      "pattern": "error: 'comptime' is redundant here; it applies to the innermost container, block, or declaration",
      "type": "ComptimeError",
      "description": "Redundant comptime usage in code",
      "root_cause": "zig_comptime_error",
      "suggestion": "Remove redundant comptime keyword",
      "category": "zig",
      "severity": "medium",
      "confidence": "high",
      "tags": [
        "zig",
        "comptime",
        "redundant"
      ],
      "examples": [
        "error: 'comptime' is redundant here; it applies to the innermost container, block, or declaration"
      ],
      "metadata": {},
      "criticality": "low",
      "complexity": "low",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "zig_comptime_eval_branch",
      "pattern": "error: unable to evaluate branch while compiling",
      "type": "ComptimeError",
      "description": "Cannot evaluate if/switch condition at compile time",
      "root_cause": "zig_comptime_error",
      "suggestion": "Ensure if/switch condition can be evaluated at compile time or move to runtime",
      "category": "zig",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "zig",
        "comptime",
        "branch",
        "conditional"
      ],
      "examples": [
        "error: unable to evaluate branch while compiling"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "zig_comptime_recursive_type",
      "pattern": "error: recursive type has infinite size",
      "type": "ComptimeError",
      "description": "Type definition is recursive without using pointers",
      "root_cause": "zig_comptime_error",
      "suggestion": "Use pointers to break recursive type definition cycles",
      "category": "zig",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "zig",
        "comptime",
        "type",
        "recursive"
      ],
      "examples": [
        "error: recursive type has infinite size"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    }
  ]
}