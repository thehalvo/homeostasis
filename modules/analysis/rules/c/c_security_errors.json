{
  "name": "C Security Vulnerability Patterns",
  "description": "Security vulnerability patterns for C applications",
  "version": "1.0.0",
  "rules": [
    {
      "id": "c_security_buffer_overflow",
      "pattern": "gets\\(|strcpy\\(|strcat\\(|sprintf\\([^n]|scanf\\(\"%s|buffer overflow",
      "type": "SecurityError",
      "description": "Buffer overflow vulnerability using unsafe functions",
      "root_cause": "buffer_overflow",
      "suggestion": "Use fgets(), strncpy(), strncat(), snprintf(), or specify field width in scanf",
      "category": "c",
      "subcategory": "memory",
      "severity": "critical",
      "confidence": "high",
      "tags": ["security", "buffer", "overflow"]
    },
    {
      "id": "c_security_format_string",
      "pattern": "printf\\(user|fprintf\\(.*variable|syslog\\(.*input|format string",
      "type": "SecurityError",
      "description": "Format string vulnerability",
      "root_cause": "format_string",
      "suggestion": "Never use user input as format string, use printf(\"%s\", input)",
      "category": "c",
      "subcategory": "string",
      "severity": "critical",
      "confidence": "high",
      "tags": ["security", "format", "injection"]
    },
    {
      "id": "c_security_integer_overflow",
      "pattern": "overflow|wraparound|INT_MAX.*\\+|size_t.*multiplication",
      "type": "SecurityError",
      "description": "Integer overflow vulnerability",
      "root_cause": "integer_overflow",
      "suggestion": "Check for overflow before operations, use safe integer libraries",
      "category": "c",
      "subcategory": "numeric",
      "severity": "high",
      "confidence": "medium",
      "tags": ["security", "integer", "overflow"]
    },
    {
      "id": "c_security_use_after_free",
      "pattern": "use after free|free\\(.*\\).*use|dangling pointer",
      "type": "SecurityError",
      "description": "Use-after-free vulnerability",
      "root_cause": "use_after_free",
      "suggestion": "Set pointers to NULL after free, use static analysis tools",
      "category": "c",
      "subcategory": "memory",
      "severity": "critical",
      "confidence": "high",
      "tags": ["security", "memory", "pointer"]
    },
    {
      "id": "c_security_null_dereference",
      "pattern": "null.*dereference|segmentation fault|\\*.*NULL|pointer.*not.*checked",
      "type": "SecurityError",
      "description": "Null pointer dereference",
      "root_cause": "null_dereference",
      "suggestion": "Always check pointers before dereferencing",
      "category": "c",
      "subcategory": "pointer",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "null", "pointer"]
    },
    {
      "id": "c_security_race_condition",
      "pattern": "race condition|TOCTOU|access\\(.*\\).*fopen|stat\\(.*\\).*open",
      "type": "SecurityError",
      "description": "Time-of-check to time-of-use race condition",
      "root_cause": "race_condition",
      "suggestion": "Use atomic operations, proper locking, or avoid check-then-act patterns",
      "category": "c",
      "subcategory": "concurrency",
      "severity": "high",
      "confidence": "medium",
      "tags": ["security", "race", "toctou"]
    },
    {
      "id": "c_security_command_injection",
      "pattern": "system\\(.*strcat|popen\\(.*sprintf|exec.*user.*input",
      "type": "SecurityError",
      "description": "Command injection vulnerability",
      "root_cause": "command_injection",
      "suggestion": "Avoid system(), validate/escape input, use execv() family",
      "category": "c",
      "subcategory": "injection",
      "severity": "critical",
      "confidence": "high",
      "tags": ["security", "command", "injection"]
    },
    {
      "id": "c_security_weak_random",
      "pattern": "rand\\(\\)|srand\\(time|random.*password|predictable.*random",
      "type": "SecurityError",
      "description": "Weak random number generation",
      "root_cause": "weak_randomness",
      "suggestion": "Use /dev/urandom or cryptographic RNG for security purposes",
      "category": "c",
      "subcategory": "cryptography",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "random", "cryptography"]
    },
    {
      "id": "c_security_uninitialized_memory",
      "pattern": "uninitialized|garbage.*value|not.*initialized|random.*stack.*data",
      "type": "SecurityError",
      "description": "Use of uninitialized memory",
      "root_cause": "uninitialized_memory",
      "suggestion": "Initialize all variables, use calloc() instead of malloc() for zeros",
      "category": "c",
      "subcategory": "memory",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "memory", "initialization"]
    },
    {
      "id": "c_security_double_free",
      "pattern": "double free|free.*twice|already.*freed",
      "type": "SecurityError",
      "description": "Double free vulnerability",
      "root_cause": "double_free",
      "suggestion": "Set pointers to NULL after free, track allocation state",
      "category": "c",
      "subcategory": "memory",
      "severity": "critical",
      "confidence": "high",
      "tags": ["security", "memory", "free"]
    },
    {
      "id": "c_security_stack_overflow",
      "pattern": "stack overflow|alloca.*user|VLA.*unbounded|recursive.*depth",
      "type": "SecurityError",
      "description": "Stack overflow vulnerability",
      "root_cause": "stack_overflow",
      "suggestion": "Limit recursion, validate VLA sizes, use heap for large allocations",
      "category": "c",
      "subcategory": "memory",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "stack", "overflow"]
    },
    {
      "id": "c_security_insecure_temp_file",
      "pattern": "mktemp\\(|tmpnam\\(|tempnam\\(|predictable.*filename",
      "type": "SecurityError",
      "description": "Insecure temporary file creation",
      "root_cause": "insecure_temp_file",
      "suggestion": "Use mkstemp() or tmpfile() for secure temporary files",
      "category": "c",
      "subcategory": "file",
      "severity": "medium",
      "confidence": "high",
      "tags": ["security", "tempfile", "race"]
    },
    {
      "id": "c_security_hardcoded_password",
      "pattern": "password.*=.*\".*\"|strcmp.*\".*password|hardcoded.*secret",
      "type": "SecurityError",
      "description": "Hardcoded credentials",
      "root_cause": "hardcoded_secrets",
      "suggestion": "Use environment variables or configuration files for secrets",
      "category": "c",
      "subcategory": "secrets",
      "severity": "critical",
      "confidence": "medium",
      "tags": ["security", "password", "hardcoded"]
    },
    {
      "id": "c_security_signal_handler",
      "pattern": "signal.*handler.*non-async-safe|printf.*signal.*handler|malloc.*signal",
      "type": "SecurityError",
      "description": "Non-async-safe function in signal handler",
      "root_cause": "signal_safety",
      "suggestion": "Only use async-safe functions in signal handlers",
      "category": "c",
      "subcategory": "signal",
      "severity": "medium",
      "confidence": "medium",
      "tags": ["security", "signal", "async"]
    },
    {
      "id": "c_security_path_traversal",
      "pattern": "\\.\\./|directory.*traversal|realpath.*missing|chroot.*escape",
      "type": "SecurityError",
      "description": "Path traversal vulnerability",
      "root_cause": "path_traversal",
      "suggestion": "Validate paths, use realpath(), check against whitelist",
      "category": "c",
      "subcategory": "file",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "path", "traversal"]
    }
  ]
}