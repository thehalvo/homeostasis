{
  "name": "C++ Performance Error Patterns",
  "description": "Performance optimization patterns for C++ applications",
  "version": "1.0.0",
  "rules": [
    {
      "id": "cpp_performance_unnecessary_copy",
      "pattern": "pass by value.*large object|copying.*std::vector|unnecessary.*copy constructor",
      "type": "PerformanceError",
      "description": "Unnecessary copying of large objects",
      "root_cause": "unnecessary_copying",
      "suggestion": "Pass large objects by const reference, use move semantics, consider std::move",
      "category": "cpp",
      "subcategory": "memory",
      "severity": "high",
      "confidence": "high",
      "tags": ["performance", "copy", "memory"]
    },
    {
      "id": "cpp_performance_missing_move",
      "pattern": "return.*local.*vector|move constructor.*missing|rvalue.*not utilized",
      "type": "PerformanceError",
      "description": "Missing move semantics optimization",
      "root_cause": "missing_move_semantics",
      "suggestion": "Implement move constructor and move assignment operator, use std::move for rvalues",
      "category": "cpp",
      "subcategory": "optimization",
      "severity": "medium",
      "confidence": "medium",
      "tags": ["performance", "move", "c++11"]
    },
    {
      "id": "cpp_performance_virtual_in_loop",
      "pattern": "virtual.*call.*loop|vtable.*lookup.*performance|polymorphic.*hot path",
      "type": "PerformanceError",
      "description": "Virtual function calls in performance-critical loop",
      "root_cause": "virtual_overhead",
      "suggestion": "Use templates or CRTP for compile-time polymorphism, consider devirtualization",
      "category": "cpp",
      "subcategory": "polymorphism",
      "severity": "medium",
      "confidence": "medium",
      "tags": ["performance", "virtual", "loop"]
    },
    {
      "id": "cpp_performance_vector_resize",
      "pattern": "vector.*push_back.*loop|frequent.*reallocation|vector.*reserve.*missing",
      "type": "PerformanceError",
      "description": "Vector reallocation overhead due to missing reserve",
      "root_cause": "vector_reallocation",
      "suggestion": "Call vector.reserve() with expected size before push_back loop",
      "category": "cpp",
      "subcategory": "containers",
      "severity": "medium",
      "confidence": "high",
      "tags": ["performance", "vector", "allocation"]
    },
    {
      "id": "cpp_performance_cache_miss",
      "pattern": "cache miss|poor.*locality|random.*access.*pattern|cache.*unfriendly",
      "type": "PerformanceError",
      "description": "Poor cache locality causing performance degradation",
      "root_cause": "cache_inefficiency",
      "suggestion": "Improve data locality, use cache-friendly data structures, consider struct-of-arrays",
      "category": "cpp",
      "subcategory": "cache",
      "severity": "high",
      "confidence": "medium",
      "tags": ["performance", "cache", "memory"]
    },
    {
      "id": "cpp_performance_string_append",
      "pattern": "string.*\\+.*loop|string.*append.*inefficient|concatenation.*performance",
      "type": "PerformanceError",
      "description": "Inefficient string concatenation in loop",
      "root_cause": "string_inefficiency",
      "suggestion": "Use string.reserve() or stringstream for multiple concatenations",
      "category": "cpp",
      "subcategory": "string",
      "severity": "medium",
      "confidence": "high",
      "tags": ["performance", "string", "loop"]
    },
    {
      "id": "cpp_performance_dynamic_allocation",
      "pattern": "new.*delete.*loop|frequent.*allocation|heap.*fragmentation",
      "type": "PerformanceError",
      "description": "Excessive dynamic memory allocation",
      "root_cause": "allocation_overhead",
      "suggestion": "Use stack allocation, object pools, or custom allocators",
      "category": "cpp",
      "subcategory": "memory",
      "severity": "high",
      "confidence": "high",
      "tags": ["performance", "allocation", "heap"]
    },
    {
      "id": "cpp_performance_false_sharing",
      "pattern": "false sharing|cache line.*contention|thread.*same cache line",
      "type": "PerformanceError",
      "description": "False sharing between threads",
      "root_cause": "false_sharing",
      "suggestion": "Align data to cache line boundaries, use padding or thread_local storage",
      "category": "cpp",
      "subcategory": "concurrency",
      "severity": "high",
      "confidence": "medium",
      "tags": ["performance", "threading", "cache"]
    },
    {
      "id": "cpp_performance_branch_prediction",
      "pattern": "branch.*misprediction|unpredictable.*branch|random.*if statement",
      "type": "PerformanceError",
      "description": "Poor branch prediction causing pipeline stalls",
      "root_cause": "branch_misprediction",
      "suggestion": "Sort data before processing, use branchless algorithms, consider __builtin_expect",
      "category": "cpp",
      "subcategory": "cpu",
      "severity": "medium",
      "confidence": "low",
      "tags": ["performance", "branch", "cpu"]
    },
    {
      "id": "cpp_performance_template_bloat",
      "pattern": "template.*instantiation.*explosion|code bloat|binary.*size.*templates",
      "type": "PerformanceError",
      "description": "Excessive template instantiation causing code bloat",
      "root_cause": "template_bloat",
      "suggestion": "Use explicit instantiation, type erasure, or reduce template parameters",
      "category": "cpp",
      "subcategory": "templates",
      "severity": "medium",
      "confidence": "medium",
      "tags": ["performance", "templates", "size"]
    },
    {
      "id": "cpp_performance_iostream_sync",
      "pattern": "cin.*cout.*slow|iostream.*performance|sync_with_stdio",
      "type": "PerformanceError",
      "description": "Slow I/O due to iostream synchronization",
      "root_cause": "io_synchronization",
      "suggestion": "Use ios_base::sync_with_stdio(false) and cin.tie(nullptr)",
      "category": "cpp",
      "subcategory": "io",
      "severity": "medium",
      "confidence": "high",
      "tags": ["performance", "iostream", "io"]
    },
    {
      "id": "cpp_performance_mutex_contention",
      "pattern": "mutex.*contention|lock.*wait time|synchronization.*bottleneck",
      "type": "PerformanceError",
      "description": "High mutex contention causing thread bottleneck",
      "root_cause": "lock_contention",
      "suggestion": "Use lock-free data structures, reduce critical sections, consider reader-writer locks",
      "category": "cpp",
      "subcategory": "concurrency",
      "severity": "high",
      "confidence": "medium",
      "tags": ["performance", "mutex", "threading"]
    },
    {
      "id": "cpp_performance_unaligned_access",
      "pattern": "unaligned.*access|misaligned.*memory|alignment.*performance",
      "type": "PerformanceError",
      "description": "Unaligned memory access causing performance penalty",
      "root_cause": "unaligned_access",
      "suggestion": "Ensure proper data alignment, use alignas specifier",
      "category": "cpp",
      "subcategory": "memory",
      "severity": "medium",
      "confidence": "medium",
      "tags": ["performance", "alignment", "memory"]
    },
    {
      "id": "cpp_performance_exception_path",
      "pattern": "exception.*hot path|throw.*performance critical|exception.*overhead",
      "type": "PerformanceError",
      "description": "Exceptions in performance-critical path",
      "root_cause": "exception_overhead",
      "suggestion": "Use error codes in hot paths, reserve exceptions for exceptional cases",
      "category": "cpp",
      "subcategory": "exceptions",
      "severity": "medium",
      "confidence": "medium",
      "tags": ["performance", "exceptions", "overhead"]
    },
    {
      "id": "cpp_performance_small_vector",
      "pattern": "vector<.*small.*size|frequent.*small.*allocation|SBO.*missing",
      "type": "PerformanceError",
      "description": "Using std::vector for small fixed-size arrays",
      "root_cause": "container_choice",
      "suggestion": "Use std::array for fixed sizes, consider small buffer optimization",
      "category": "cpp",
      "subcategory": "containers",
      "severity": "low",
      "confidence": "medium",
      "tags": ["performance", "containers", "allocation"]
    }
  ]
}