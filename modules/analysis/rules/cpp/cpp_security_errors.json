{
  "name": "C++ Security Vulnerability Patterns",
  "description": "Security vulnerability patterns for C++ applications",
  "version": "1.0.0",
  "rules": [
    {
      "id": "cpp_security_buffer_overflow",
      "pattern": "strcpy|strcat|gets|sprintf[^n]|buffer overflow|stack smashing",
      "type": "SecurityError",
      "description": "Buffer overflow vulnerability using unsafe string functions",
      "root_cause": "buffer_overflow",
      "suggestion": "Use strncpy, strncat, fgets, snprintf, or std::string instead",
      "category": "cpp",
      "subcategory": "memory",
      "severity": "critical",
      "confidence": "high",
      "tags": ["security", "buffer", "overflow"]
    },
    {
      "id": "cpp_security_format_string",
      "pattern": "printf\\(.*user.*input|fprintf\\(.*variable\\)|format string vulnerability",
      "type": "SecurityError",
      "description": "Format string vulnerability allowing arbitrary memory access",
      "root_cause": "format_string",
      "suggestion": "Never use user input as format string, use printf(\"%s\", user_input)",
      "category": "cpp",
      "subcategory": "string",
      "severity": "critical",
      "confidence": "high",
      "tags": ["security", "format", "string"]
    },
    {
      "id": "cpp_security_use_after_free",
      "pattern": "use after free|dangling pointer|deleted.*pointer.*access",
      "type": "SecurityError",
      "description": "Use-after-free vulnerability",
      "root_cause": "use_after_free",
      "suggestion": "Set pointers to nullptr after delete, use smart pointers (unique_ptr, shared_ptr)",
      "category": "cpp",
      "subcategory": "memory",
      "severity": "critical",
      "confidence": "high",
      "tags": ["security", "memory", "pointer"]
    },
    {
      "id": "cpp_security_integer_overflow",
      "pattern": "integer overflow|signed.*overflow|arithmetic.*overflow.*unchecked",
      "type": "SecurityError",
      "description": "Integer overflow leading to vulnerabilities",
      "root_cause": "integer_overflow",
      "suggestion": "Check bounds before arithmetic, use safe integer libraries, enable compiler warnings",
      "category": "cpp",
      "subcategory": "numeric",
      "severity": "high",
      "confidence": "medium",
      "tags": ["security", "overflow", "integer"]
    },
    {
      "id": "cpp_security_null_dereference",
      "pattern": "null pointer dereference|nullptr.*dereference|segmentation fault",
      "type": "SecurityError",
      "description": "Null pointer dereference vulnerability",
      "root_cause": "null_dereference",
      "suggestion": "Always check pointers before use, use references where possible",
      "category": "cpp",
      "subcategory": "pointer",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "null", "pointer"]
    },
    {
      "id": "cpp_security_race_condition",
      "pattern": "race condition|TOCTOU|time.*check.*time.*use|concurrent.*access.*unsafe",
      "type": "SecurityError",
      "description": "Race condition vulnerability in concurrent code",
      "root_cause": "race_condition",
      "suggestion": "Use proper synchronization, atomic operations, or lock-free algorithms",
      "category": "cpp",
      "subcategory": "concurrency",
      "severity": "high",
      "confidence": "medium",
      "tags": ["security", "race", "concurrency"]
    },
    {
      "id": "cpp_security_command_injection",
      "pattern": "system\\(.*\\+|popen\\(.*user|exec.*concatenation",
      "type": "SecurityError",
      "description": "Command injection through system calls",
      "root_cause": "command_injection",
      "suggestion": "Avoid system(), use execve with argument array, validate all inputs",
      "category": "cpp",
      "subcategory": "injection",
      "severity": "critical",
      "confidence": "high",
      "tags": ["security", "command", "injection"]
    },
    {
      "id": "cpp_security_weak_random",
      "pattern": "rand\\(\\)|srand\\(time|weak.*random|predictable.*random",
      "type": "SecurityError",
      "description": "Using weak random number generator for security",
      "root_cause": "weak_randomness",
      "suggestion": "Use std::random_device or cryptographic RNG for security purposes",
      "category": "cpp",
      "subcategory": "cryptography",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "random", "cryptography"]
    },
    {
      "id": "cpp_security_uninitialized_memory",
      "pattern": "uninitialized.*read|garbage.*value|indeterminate.*value",
      "type": "SecurityError",
      "description": "Reading uninitialized memory",
      "root_cause": "uninitialized_memory",
      "suggestion": "Initialize all variables, use = {} or constructors, enable compiler warnings",
      "category": "cpp",
      "subcategory": "memory",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "memory", "initialization"]
    },
    {
      "id": "cpp_security_double_free",
      "pattern": "double free|free.*already.*freed|delete.*twice",
      "type": "SecurityError",
      "description": "Double free vulnerability",
      "root_cause": "double_free",
      "suggestion": "Set pointers to nullptr after delete/free, use RAII and smart pointers",
      "category": "cpp",
      "subcategory": "memory",
      "severity": "critical",
      "confidence": "high",
      "tags": ["security", "memory", "free"]
    },
    {
      "id": "cpp_security_stack_overflow",
      "pattern": "stack overflow|recursive.*too deep|alloca.*large|VLA.*unbounded",
      "type": "SecurityError",
      "description": "Stack overflow vulnerability",
      "root_cause": "stack_overflow",
      "suggestion": "Limit recursion depth, avoid large stack allocations, validate VLA sizes",
      "category": "cpp",
      "subcategory": "memory",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "stack", "overflow"]
    },
    {
      "id": "cpp_security_type_confusion",
      "pattern": "reinterpret_cast.*unsafe|type confusion|wrong.*vtable|object.*slicing",
      "type": "SecurityError",
      "description": "Type confusion vulnerability",
      "root_cause": "type_confusion",
      "suggestion": "Use static_cast or dynamic_cast, avoid reinterpret_cast on objects",
      "category": "cpp",
      "subcategory": "types",
      "severity": "high",
      "confidence": "medium",
      "tags": ["security", "type", "cast"]
    },
    {
      "id": "cpp_security_memory_leak",
      "pattern": "memory leak|new.*without.*delete|resource.*not.*released",
      "type": "SecurityError",
      "description": "Memory leak potentially leading to DoS",
      "root_cause": "memory_leak",
      "suggestion": "Use RAII, smart pointers, or containers to manage memory automatically",
      "category": "cpp",
      "subcategory": "memory",
      "severity": "medium",
      "confidence": "medium",
      "tags": ["security", "memory", "leak"]
    },
    {
      "id": "cpp_security_hardcoded_password",
      "pattern": "password.*=.*\".*\"|strcmp.*password.*literal|hardcoded.*credential",
      "type": "SecurityError",
      "description": "Hardcoded credentials in source code",
      "root_cause": "hardcoded_secrets",
      "suggestion": "Use environment variables, configuration files, or secure key storage",
      "category": "cpp",
      "subcategory": "secrets",
      "severity": "critical",
      "confidence": "medium",
      "tags": ["security", "password", "hardcoded"]
    },
    {
      "id": "cpp_security_path_traversal",
      "pattern": "\\.\\./|directory traversal|path.*not.*sanitized|fopen.*user.*input",
      "type": "SecurityError",
      "description": "Path traversal vulnerability",
      "root_cause": "path_traversal",
      "suggestion": "Validate and sanitize file paths, use realpath() to resolve paths",
      "category": "cpp",
      "subcategory": "file_access",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "path", "traversal"]
    }
  ]
}