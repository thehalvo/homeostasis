{
  "name": "Shell Common Errors",
  "description": "Rules for detecting common shell script errors across different shell environments",
  "rules": [
    {
      "id": "shell_syntax_error_unexpected_token",
      "pattern": "syntax error near unexpected token",
      "type": "syntax",
      "description": "Syntax error due to unexpected token",
      "root_cause": "bash_syntax_error",
      "suggestion": "Check for mismatched quotes, missing semicolons, or incorrect syntax",
      "category": "bash",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "shell",
        "syntax",
        "token"
      ],
      "examples": [
        "syntax error near unexpected token `('",
        "syntax error near unexpected token `else'"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "shell_syntax_error_eof",
      "pattern": "(syntax error: unexpected end of file|unexpected EOF)",
      "type": "syntax",
      "description": "Syntax error due to unexpected end of file",
      "root_cause": "bash_syntax_error",
      "suggestion": "Check for unclosed quotes, parentheses, or code blocks",
      "category": "bash",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "shell",
        "syntax",
        "eof"
      ],
      "examples": [
        "syntax error: unexpected end of file",
        "unexpected EOF while looking for matching `\"'"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "shell_unterminated_quoted_string",
      "pattern": "unterminated quoted string",
      "type": "syntax",
      "description": "Unterminated quoted string in script",
      "root_cause": "bash_syntax_error",
      "suggestion": "Add the missing closing quote to the string",
      "category": "bash",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "shell",
        "syntax",
        "string",
        "quote"
      ],
      "examples": [
        "unterminated quoted string",
        "unterminated quoted string starts at line 5"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "low",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "shell_command_not_found",
      "pattern": "(command not found|^[^:]+: not found$)",
      "type": "command",
      "description": "Command not found in PATH",
      "root_cause": "bash_command_not_found",
      "suggestion": "Check if the command is installed and in PATH",
      "category": "bash",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "shell",
        "command",
        "path"
      ],
      "examples": [
        "bash: command not found: git",
        "mycommand: command not found"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "low",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "shell_permission_denied",
      "pattern": "permission denied",
      "type": "permission",
      "description": "Permission denied when executing command or accessing file",
      "root_cause": "bash_permission_error",
      "suggestion": "Check file permissions or run with appropriate privileges",
      "category": "bash",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "shell",
        "permission",
        "access"
      ],
      "examples": [
        "bash: ./script.sh: Permission denied",
        "permission denied: /path/to/file"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "shell_file_not_found",
      "pattern": "No such file or directory",
      "type": "file",
      "description": "File or directory not found",
      "root_cause": "bash_file_error",
      "suggestion": "Check if the file exists and the path is correct",
      "category": "bash",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "shell",
        "file",
        "path"
      ],
      "examples": [
        "bash: /path/to/file: No such file or directory",
        "cat: file.txt: No such file or directory"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "low",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "shell_variable_unbound",
      "pattern": "(unbound variable|parameter not set|parameter null or not set)",
      "type": "variable",
      "description": "Unbound or unset variable reference",
      "root_cause": "bash_variable_error",
      "suggestion": "Initialize the variable before use or provide a default value",
      "category": "bash",
      "severity": "medium",
      "confidence": "high",
      "tags": [
        "shell",
        "variable",
        "unbound"
      ],
      "examples": [
        "bash: var: unbound variable",
        "parameter null or not set"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "shell_bad_substitution",
      "pattern": "bad substitution",
      "type": "expansion",
      "description": "Bad variable substitution syntax",
      "root_cause": "bash_expansion_error",
      "suggestion": "Check parameter expansion syntax and variable names",
      "category": "bash",
      "severity": "medium",
      "confidence": "high",
      "tags": [
        "shell",
        "expansion",
        "substitution"
      ],
      "examples": [
        "bash: ${!var}: bad substitution",
        "bad substitution: var"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "shell_ambiguous_redirect",
      "pattern": "ambiguous redirect",
      "type": "RedirectionError",
      "description": "Ambiguous redirection operand",
      "root_cause": "bash_redirection_error",
      "suggestion": "Check redirection syntax and ensure file names are properly quoted",
      "category": "bash",
      "severity": "medium",
      "confidence": "high",
      "tags": [
        "shell",
        "redirection",
        "io"
      ],
      "examples": [
        "bash: ambiguous redirect",
        "ambiguous redirect: $var"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "shell_bad_fd",
      "pattern": "Bad file( number)? descriptor",
      "type": "RedirectionError",
      "description": "Bad file descriptor in redirection",
      "root_cause": "bash_redirection_error",
      "suggestion": "Check file descriptor numbers and ensure they are open",
      "category": "bash",
      "severity": "medium",
      "confidence": "high",
      "tags": [
        "shell",
        "redirection",
        "descriptor"
      ],
      "examples": [
        "bash: 3: Bad file descriptor",
        "Bad file descriptor"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "shell_arithmetic_error",
      "pattern": "(arithmetic syntax error|division by (zero|0))",
      "type": "ArithmeticError",
      "description": "Arithmetic operation error",
      "root_cause": "bash_arithmetic_error",
      "suggestion": "Check arithmetic expressions and avoid division by zero",
      "category": "bash",
      "severity": "medium",
      "confidence": "high",
      "tags": [
        "shell",
        "arithmetic",
        "calculation"
      ],
      "examples": [
        "bash: ((1/0)): division by 0 (error token is \"0\")",
        "arithmetic syntax error"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "shell_cannot_execute",
      "pattern": "cannot execute binary file",
      "type": "ExecutionError",
      "description": "Cannot execute binary file or wrong architecture",
      "root_cause": "bash_execution_error",
      "suggestion": "Check file type and architecture compatibility",
      "category": "bash",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "shell",
        "execution",
        "binary"
      ],
      "examples": [
        "bash: ./program: cannot execute binary file",
        "cannot execute binary file: Exec format error"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "shell_too_many_arguments",
      "pattern": "too many arguments",
      "type": "ArgumentError",
      "description": "Too many arguments provided to command",
      "root_cause": "bash_argument_error",
      "suggestion": "Check command usage and argument count",
      "category": "bash",
      "severity": "medium",
      "confidence": "high",
      "tags": [
        "shell",
        "argument",
        "command"
      ],
      "examples": [
        "bash: command: too many arguments",
        "too many arguments to function call"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "low",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "shell_broken_pipe",
      "pattern": "(Broken pipe|SIGPIPE)",
      "type": "pipe",
      "description": "Broken pipe error when reading end is closed",
      "root_cause": "bash_pipe_error",
      "suggestion": "Check if the receiving process is still running",
      "category": "bash",
      "severity": "medium",
      "confidence": "high",
      "tags": [
        "shell",
        "pipe",
        "io"
      ],
      "examples": [
        "bash: echo: write error: Broken pipe",
        "Broken pipe"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    }
  ]
}