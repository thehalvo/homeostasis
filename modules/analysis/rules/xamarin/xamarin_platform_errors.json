{
  "name": "Xamarin Platform-Specific Errors",
  "description": "Rules for detecting platform-specific errors in Xamarin iOS and Android implementations",
  "version": "1.0.0",
  "rules": [
    {
      "id": "xamarin_ios_foundation_object_disposed",
      "pattern": "Foundation\\.ObjectDisposedException.*|.*NSObject.*disposed.*xamarin.*ios.*",
      "type": "Foundation.ObjectDisposedException",
      "description": "Attempted to access disposed Foundation/NSObject",
      "root_cause": "xamarin_ios_foundation_object_disposed",
      "suggestion": "Avoid accessing Foundation objects after disposal. Use weak references or check IsDisposed property before access. Properly manage object lifecycle in custom renderers.",
      "confidence": "high",
      "severity": "medium",
      "category": "memory",
      "framework": "xamarin-ios",
      "platform": "ios"
    },
    {
      "id": "xamarin_ios_uikit_main_thread",
      "pattern": "UIKit.*main.*thread.*|.*NSInternalInconsistencyException.*UIKit.*main.*thread.*",
      "type": "NSInternalInconsistencyException",
      "description": "UIKit operation performed on non-main thread",
      "root_cause": "xamarin_ios_uikit_main_thread",
      "suggestion": "UIKit operations must be performed on main thread. Use InvokeOnMainThread() or Device.BeginInvokeOnMainThread() to marshal calls from background threads.",
      "confidence": "high",
      "severity": "high",
      "category": "threading",
      "framework": "xamarin-ios",
      "platform": "ios"
    },
    {
      "id": "xamarin_ios_memory_warning",
      "pattern": ".*memory.*warning.*ios.*|.*UIApplication.*ReceiveMemoryWarning.*",
      "type": "MemoryWarning",
      "description": "iOS memory warning received",
      "root_cause": "xamarin_ios_memory_warning",
      "suggestion": "Implement ReceiveMemoryWarning override to release non-essential resources. Avoid retaining large objects unnecessarily. Use image compression and lazy loading.",
      "confidence": "medium",
      "severity": "high",
      "category": "memory",
      "framework": "xamarin-ios",
      "platform": "ios"
    },
    {
      "id": "xamarin_ios_selector_not_recognized",
      "pattern": ".*unrecognized selector.*|.*NSInvalidArgumentException.*selector.*not.*recognized.*",
      "type": "NSInvalidArgumentException",
      "description": "Objective-C selector not recognized",
      "root_cause": "xamarin_ios_selector_not_recognized",
      "suggestion": "Verify method exists on target object. Check if class is properly exported with [Export] attribute. Ensure method signatures match Objective-C conventions.",
      "confidence": "high",
      "severity": "medium",
      "category": "binding",
      "framework": "xamarin-ios",
      "platform": "ios"
    },
    {
      "id": "xamarin_ios_ats_security",
      "pattern": ".*NSURLErrorAppTransportSecurityRequiresSecureConnection.*|.*ATS.*transport.*security.*",
      "type": "NSURLError",
      "description": "App Transport Security blocking HTTP connection",
      "root_cause": "xamarin_ios_ats_security",
      "suggestion": "Use HTTPS endpoints or configure ATS exceptions in Info.plist. Add NSAppTransportSecurity domain exceptions only for necessary HTTP endpoints.",
      "confidence": "high",
      "severity": "high",
      "category": "security",
      "framework": "xamarin-ios",
      "platform": "ios"
    },
    {
      "id": "xamarin_ios_background_task_timeout",
      "pattern": ".*background.*task.*timeout.*ios.*|.*UIApplication.*BackgroundTaskExpired.*",
      "type": "BackgroundTaskTimeout",
      "description": "iOS background task exceeded time limit",
      "root_cause": "xamarin_ios_background_task_timeout",
      "suggestion": "Complete background tasks within the allotted time. Use BeginBackgroundTask/EndBackgroundTask properly. Consider using background refresh for longer operations.",
      "confidence": "medium",
      "severity": "medium",
      "category": "background",
      "framework": "xamarin-ios",
      "platform": "ios"
    },
    {
      "id": "xamarin_android_activity_context_null",
      "pattern": ".*Android.*Activity.*Context.*null.*|.*CurrentActivity.*null.*xamarin.*android.*",
      "type": "System.NullReferenceException",
      "description": "Android Activity or Context is null when accessed",
      "root_cause": "xamarin_android_activity_context_null",
      "suggestion": "Use Platform.CurrentActivity or CrossCurrentActivity plugin. Store Application context for long-lived operations. Check activity lifecycle state before access.",
      "confidence": "high",
      "severity": "medium",
      "category": "context",
      "framework": "xamarin-android",
      "platform": "android"
    },
    {
      "id": "xamarin_android_permission_denied",
      "pattern": ".*Android.*Permission.*denied.*|.*SecurityException.*permission.*android.*xamarin.*",
      "type": "Java.Lang.SecurityException",
      "description": "Android permission denied",
      "root_cause": "xamarin_android_permission_denied",
      "suggestion": "Declare permissions in AndroidManifest.xml and request runtime permissions using Xamarin.Essentials.Permissions or platform-specific APIs for API 23+.",
      "confidence": "high",
      "severity": "high",
      "category": "permissions",
      "framework": "xamarin-android",
      "platform": "android"
    },
    {
      "id": "xamarin_android_java_lang_out_of_memory",
      "pattern": "Java\\.Lang\\.OutOfMemoryError.*|.*OutOfMemoryError.*android.*xamarin.*",
      "type": "Java.Lang.OutOfMemoryError",
      "description": "Android OutOfMemoryError in Java heap",
      "root_cause": "xamarin_android_java_lang_out_of_memory",
      "suggestion": "Optimize image loading with proper scaling and caching. Use BitmapFactory.Options inSampleSize. Implement proper bitmap recycling and avoid memory leaks.",
      "confidence": "high",
      "severity": "high",
      "category": "memory",
      "framework": "xamarin-android",
      "platform": "android"
    },
    {
      "id": "xamarin_android_main_looper_blocking",
      "pattern": ".*ANR.*Application.*Not.*Responding.*|.*main.*looper.*blocking.*xamarin.*android.*",
      "type": "ANRException",
      "description": "Android main looper blocked causing ANR",
      "root_cause": "xamarin_android_main_looper_blocking",
      "suggestion": "Move long-running operations to background threads. Use Task.Run or async/await patterns. Avoid blocking the UI thread with synchronous operations.",
      "confidence": "high",
      "severity": "high",
      "category": "threading",
      "framework": "xamarin-android",
      "platform": "android"
    },
    {
      "id": "xamarin_android_networking_clear_text",
      "pattern": ".*NetworkSecurityPolicy.*cleartext.*traffic.*|.*clear.*text.*communication.*android.*",
      "type": "Java.IO.IOException",
      "description": "Android blocking cleartext HTTP traffic",
      "root_cause": "xamarin_android_networking_clear_text",
      "suggestion": "Use HTTPS endpoints or add network security config allowing cleartext for specific domains in network_security_config.xml (API 28+).",
      "confidence": "high",
      "severity": "high",
      "category": "security",
      "framework": "xamarin-android",
      "platform": "android"
    },
    {
      "id": "xamarin_android_fragment_manager_illegal_state",
      "pattern": ".*FragmentManager.*IllegalStateException.*commit.*|.*fragment.*transaction.*after.*state.*loss.*",
      "type": "Java.Lang.IllegalStateException",
      "description": "Android fragment transaction committed at wrong time",
      "root_cause": "xamarin_android_fragment_manager_illegal_state",
      "suggestion": "Use commitAllowingStateLoss() or ensure fragment transactions are committed before activity state is saved. Check activity lifecycle state.",
      "confidence": "high",
      "severity": "medium",
      "category": "fragments",
      "framework": "xamarin-android",
      "platform": "android"
    },
    {
      "id": "xamarin_android_broadcast_receiver_leak",
      "pattern": ".*BroadcastReceiver.*leak.*android.*xamarin.*|.*receiver.*not.*unregistered.*android.*",
      "type": "MemoryLeak",
      "description": "Android BroadcastReceiver not unregistered",
      "root_cause": "xamarin_android_broadcast_receiver_leak",
      "suggestion": "Unregister BroadcastReceiver in OnPause/OnDestroy using UnregisterReceiver(). Use LocalBroadcastManager for app-internal broadcasts.",
      "confidence": "medium",
      "severity": "medium",
      "category": "memory",
      "framework": "xamarin-android",
      "platform": "android"
    },
    {
      "id": "xamarin_ios_provisioning_profile_error",
      "pattern": ".*provisioning.*profile.*error.*|.*code.*signing.*xamarin.*ios.*",
      "type": "ProvisioningProfileError",
      "description": "iOS provisioning profile or code signing error",
      "root_cause": "xamarin_ios_provisioning_profile_error",
      "suggestion": "Verify provisioning profile matches bundle identifier and certificates. Update provisioning profiles and ensure proper code signing identity is selected.",
      "confidence": "high",
      "severity": "high",
      "category": "deployment",
      "framework": "xamarin-ios",
      "platform": "ios"
    },
    {
      "id": "xamarin_android_multidex_missing",
      "pattern": ".*multidex.*missing.*android.*|.*method.*count.*exceeded.*64k.*",
      "type": "Java.Lang.RuntimeException",
      "description": "Android multidex support required but not enabled",
      "root_cause": "xamarin_android_multidex_missing",
      "suggestion": "Enable multidex in Android project properties or add multiDexEnabled true to build.gradle. Initialize multidex in Application class if using custom application.",
      "confidence": "high",
      "severity": "medium",
      "category": "build",
      "framework": "xamarin-android",
      "platform": "android"
    },
    {
      "id": "xamarin_ios_info_plist_missing_key",
      "pattern": ".*Info\\.plist.*missing.*key.*|.*required.*key.*not.*found.*ios.*",
      "type": "InfoPlistMissingKeyException",
      "description": "Required key missing from iOS Info.plist",
      "root_cause": "xamarin_ios_info_plist_missing_key",
      "suggestion": "Add required keys to Info.plist such as privacy usage descriptions, supported orientations, or required device capabilities. Check Apple documentation for required keys.",
      "confidence": "high",
      "severity": "medium",
      "category": "configuration",
      "framework": "xamarin-ios",
      "platform": "ios"
    },
    {
      "id": "xamarin_android_manifest_permission_missing",
      "pattern": ".*AndroidManifest.*permission.*missing.*|.*required.*permission.*not.*declared.*",
      "type": "AndroidManifestException",
      "description": "Required permission missing from Android manifest",
      "root_cause": "xamarin_android_manifest_permission_missing",
      "suggestion": "Add required permissions to AndroidManifest.xml. Common permissions include INTERNET, ACCESS_NETWORK_STATE, CAMERA, WRITE_EXTERNAL_STORAGE.",
      "confidence": "high",
      "severity": "medium",
      "category": "configuration",
      "framework": "xamarin-android",
      "platform": "android"
    },
    {
      "id": "xamarin_ios_keychain_access_error",
      "pattern": ".*Keychain.*access.*error.*ios.*|.*SecStatusCode.*error.*keychain.*",
      "type": "KeychainAccessException",
      "description": "iOS Keychain access error",
      "root_cause": "xamarin_ios_keychain_access_error",
      "suggestion": "Verify keychain access groups in Entitlements.plist. Handle keychain errors gracefully and provide fallback storage mechanisms. Check device passcode requirements.",
      "confidence": "medium",
      "severity": "medium",
      "category": "security",
      "framework": "xamarin-ios",
      "platform": "ios"
    },
    {
      "id": "xamarin_android_proguard_reflection_issue",
      "pattern": ".*ProGuard.*reflection.*error.*android.*|.*obfuscation.*removed.*required.*method.*",
      "type": "Java.Lang.NoSuchMethodException",
      "description": "ProGuard removed method used via reflection",
      "root_cause": "xamarin_android_proguard_reflection_issue",
      "suggestion": "Add ProGuard keep rules for classes/methods used via reflection. Use [Preserve] attribute or configure proguard-rules.pro with appropriate keep directives.",
      "confidence": "high",
      "severity": "medium",
      "category": "obfuscation",
      "framework": "xamarin-android",
      "platform": "android"
    },
    {
      "id": "xamarin_ios_http_client_timeout",
      "pattern": ".*NSURLErrorTimedOut.*ios.*|.*http.*client.*timeout.*ios.*xamarin.*",
      "type": "NSError",
      "description": "iOS HTTP client timeout",
      "root_cause": "xamarin_ios_http_client_timeout",
      "suggestion": "Increase HttpClient timeout values or implement retry logic. Check network connectivity and consider using NetworkReachability to handle offline scenarios.",
      "confidence": "medium",
      "severity": "medium",
      "category": "network",
      "framework": "xamarin-ios",
      "platform": "ios"
    }
  ]
}