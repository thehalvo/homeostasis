{
  "name": "Xamarin MVVM Pattern Errors",
  "description": "Rules for detecting MVVM pattern violations and data binding issues in Xamarin applications",
  "version": "1.0.0",
  "rules": [
    {
      "id": "xamarin_mvvm_property_changed_not_raised",
      "pattern": ".*property.*changed.*not.*raised.*mvvm.*|.*INotifyPropertyChanged.*not.*implemented.*",
      "type": "PropertyChangeNotificationException",
      "description": "Property changed event not raised for bound property",
      "root_cause": "xamarin_mvvm_property_changed_not_raised",
      "suggestion": "Implement INotifyPropertyChanged and raise PropertyChanged event in property setters. Use SetProperty helper method or MVVM frameworks like Prism or MVVM Light.",
      "confidence": "medium",
      "severity": "medium",
      "category": "databinding",
      "framework": "xamarin-mvvm"
    },
    {
      "id": "xamarin_mvvm_command_can_execute_not_implemented",
      "pattern": ".*command.*CanExecute.*not.*implemented.*|.*ICommand.*CanExecute.*always.*true.*",
      "type": "CommandImplementationException",
      "description": "Command CanExecute logic not properly implemented",
      "root_cause": "xamarin_mvvm_command_can_execute_not_implemented",
      "suggestion": "Implement proper CanExecute logic in ICommand implementations. Raise CanExecuteChanged event when execution state changes. Use Command or RelayCommand from MVVM frameworks.",
      "confidence": "medium",
      "severity": "low",
      "category": "commands",
      "framework": "xamarin-mvvm"
    },
    {
      "id": "xamarin_mvvm_view_model_circular_reference",
      "pattern": ".*ViewModel.*circular.*reference.*|.*view.*model.*memory.*leak.*reference.*",
      "type": "CircularReferenceException",
      "description": "Circular reference between View and ViewModel causing memory leak",
      "root_cause": "xamarin_mvvm_view_model_circular_reference",
      "suggestion": "Avoid storing View references in ViewModel. Use weak references or messaging patterns for View-ViewModel communication. Implement proper disposal in ViewModels.",
      "confidence": "medium",
      "severity": "high",
      "category": "memory",
      "framework": "xamarin-mvvm"
    },
    {
      "id": "xamarin_mvvm_observable_collection_thread_safety",
      "pattern": ".*ObservableCollection.*thread.*safety.*|.*collection.*modified.*different.*thread.*",
      "type": "System.InvalidOperationException",
      "description": "ObservableCollection modified from non-UI thread",
      "root_cause": "xamarin_mvvm_observable_collection_thread_safety",
      "suggestion": "Modify ObservableCollection only from UI thread. Use Device.BeginInvokeOnMainThread() or implement thread-safe observable collections for background updates.",
      "confidence": "high",
      "severity": "medium",
      "category": "threading",
      "framework": "xamarin-mvvm"
    },
    {
      "id": "xamarin_mvvm_binding_context_null_view_model",
      "pattern": ".*BindingContext.*null.*view.*model.*|.*view.*model.*not.*set.*binding.*context.*",
      "type": "System.NullReferenceException",
      "description": "BindingContext is null when ViewModel is expected",
      "root_cause": "xamarin_mvvm_binding_context_null_view_model",
      "suggestion": "Ensure BindingContext is set to ViewModel instance in View constructor or OnAppearing. Use dependency injection or ViewModelLocator pattern for automatic ViewModel assignment.",
      "confidence": "medium",
      "severity": "medium",
      "category": "databinding",
      "framework": "xamarin-mvvm"
    },
    {
      "id": "xamarin_mvvm_async_command_exception_handling",
      "pattern": ".*async.*command.*exception.*not.*handled.*|.*fire.*and.*forget.*async.*command.*",
      "type": "UnobservedTaskException",
      "description": "Unhandled exception in async command execution",
      "root_cause": "xamarin_mvvm_async_command_exception_handling",
      "suggestion": "Implement proper exception handling in async commands. Use try-catch blocks and consider user feedback for errors. Avoid async void in command implementations.",
      "confidence": "medium",
      "severity": "medium",
      "category": "async",
      "framework": "xamarin-mvvm"
    },
    {
      "id": "xamarin_mvvm_navigation_parameter_serialization",
      "pattern": ".*navigation.*parameter.*serialization.*failed.*|.*complex.*object.*navigation.*parameter.*",
      "type": "SerializationException",
      "description": "Complex object used as navigation parameter causing serialization issues",
      "root_cause": "xamarin_mvvm_navigation_parameter_serialization",
      "suggestion": "Use simple types or IDs for navigation parameters. Store complex objects in shared services or use dependency injection to access them in target ViewModels.",
      "confidence": "medium",
      "severity": "medium",
      "category": "navigation",
      "framework": "xamarin-mvvm"
    },
    {
      "id": "xamarin_mvvm_service_locator_anti_pattern",
      "pattern": ".*service.*locator.*anti.*pattern.*mvvm.*|.*static.*service.*access.*view.*model.*",
      "type": "ArchitectureViolationException",
      "description": "Service Locator anti-pattern used instead of dependency injection",
      "root_cause": "xamarin_mvvm_service_locator_anti_pattern",
      "suggestion": "Use dependency injection instead of Service Locator pattern. Constructor inject dependencies into ViewModels for better testability and maintainability.",
      "confidence": "low",
      "severity": "low",
      "category": "architecture",
      "framework": "xamarin-mvvm"
    },
    {
      "id": "xamarin_mvvm_view_model_not_disposable",
      "pattern": ".*ViewModel.*not.*disposable.*memory.*leak.*|.*view.*model.*cleanup.*not.*implemented.*",
      "type": "MemoryLeak",
      "description": "ViewModel not implementing proper cleanup causing memory leaks",
      "root_cause": "xamarin_mvvm_view_model_not_disposable",
      "suggestion": "Implement IDisposable in ViewModels to clean up subscriptions and resources. Unsubscribe from events and dispose of services in Dispose method.",
      "confidence": "medium",
      "severity": "medium",
      "category": "memory",
      "framework": "xamarin-mvvm"
    },
    {
      "id": "xamarin_mvvm_converter_exception_unhandled",
      "pattern": ".*value.*converter.*exception.*unhandled.*mvvm.*|.*IValueConverter.*convert.*exception.*",
      "type": "ValueConverterException",
      "description": "Unhandled exception in value converter",
      "root_cause": "xamarin_mvvm_converter_exception_unhandled",
      "suggestion": "Implement proper exception handling in value converters. Return appropriate fallback values and handle null/invalid inputs gracefully.",
      "confidence": "medium",
      "severity": "medium",
      "category": "databinding",
      "framework": "xamarin-mvvm"
    },
    {
      "id": "xamarin_mvvm_weak_event_subscription_missing",
      "pattern": ".*strong.*event.*subscription.*memory.*leak.*mvvm.*|.*event.*handler.*not.*weak.*reference.*",
      "type": "MemoryLeak",
      "description": "Strong event subscription causing memory leaks in MVVM",
      "root_cause": "xamarin_mvvm_weak_event_subscription_missing",
      "suggestion": "Use weak event patterns or MessagingCenter for loose coupling. Unsubscribe from events in ViewModel disposal or use WeakEventManager pattern.",
      "confidence": "medium",
      "severity": "medium",
      "category": "memory",
      "framework": "xamarin-mvvm"
    },
    {
      "id": "xamarin_mvvm_validation_not_implemented",
      "pattern": ".*validation.*not.*implemented.*mvvm.*|.*IDataErrorInfo.*INotifyDataErrorInfo.*missing.*",
      "type": "ValidationException",
      "description": "Input validation not implemented in MVVM pattern",
      "root_cause": "xamarin_mvvm_validation_not_implemented",
      "suggestion": "Implement IDataErrorInfo or INotifyDataErrorInfo for input validation. Use validation frameworks or implement custom validation logic with error notifications.",
      "confidence": "low",
      "severity": "low",
      "category": "validation",
      "framework": "xamarin-mvvm"
    },
    {
      "id": "xamarin_mvvm_messaging_center_subscription_leak",
      "pattern": ".*MessagingCenter.*subscription.*leak.*mvvm.*|.*message.*subscription.*not.*unsubscribed.*",
      "type": "MemoryLeak",
      "description": "MessagingCenter subscription not properly unsubscribed",
      "root_cause": "xamarin_mvvm_messaging_center_subscription_leak",
      "suggestion": "Unsubscribe from MessagingCenter in ViewModel disposal or page lifecycle events. Keep track of subscriptions and clean them up appropriately.",
      "confidence": "medium",
      "severity": "medium",
      "category": "memory",
      "framework": "xamarin-mvvm"
    },
    {
      "id": "xamarin_mvvm_two_way_binding_infinite_loop",
      "pattern": ".*two.*way.*binding.*infinite.*loop.*|.*binding.*circular.*update.*mvvm.*",
      "type": "System.StackOverflowException",
      "description": "Two-way binding causing infinite update loop",
      "root_cause": "xamarin_mvvm_two_way_binding_infinite_loop",
      "suggestion": "Check for recursive property updates in two-way bindings. Implement proper change detection in property setters to avoid unnecessary PropertyChanged events.",
      "confidence": "medium",
      "severity": "high",
      "category": "databinding",
      "framework": "xamarin-mvvm"
    },
    {
      "id": "xamarin_mvvm_ui_logic_in_view_model",
      "pattern": ".*UI.*logic.*in.*view.*model.*mvvm.*|.*view.*model.*direct.*UI.*manipulation.*",
      "type": "ArchitectureViolationException",
      "description": "UI-specific logic implemented in ViewModel violating MVVM pattern",
      "root_cause": "xamarin_mvvm_ui_logic_in_view_model",
      "suggestion": "Move UI-specific logic to View or custom controls. Use behaviors, triggers, or converters for UI logic. Keep ViewModels UI-agnostic for better testability.",
      "confidence": "low",
      "severity": "low",
      "category": "architecture",
      "framework": "xamarin-mvvm"
    },
    {
      "id": "xamarin_mvvm_business_logic_in_view",
      "pattern": ".*business.*logic.*in.*view.*mvvm.*|.*code.*behind.*business.*logic.*",
      "type": "ArchitectureViolationException",
      "description": "Business logic implemented in View instead of ViewModel",
      "root_cause": "xamarin_mvvm_business_logic_in_view",
      "suggestion": "Move business logic from View code-behind to ViewModel. Use data binding and commands to maintain proper separation of concerns in MVVM pattern.",
      "confidence": "low",
      "severity": "low",
      "category": "architecture",
      "framework": "xamarin-mvvm"
    },
    {
      "id": "xamarin_mvvm_dependency_injection_scope_error",
      "pattern": ".*dependency.*injection.*scope.*error.*mvvm.*|.*singleton.*view.*model.*state.*conflict.*",
      "type": "DependencyInjectionException",
      "description": "Incorrect dependency injection scope for ViewModel causing state conflicts",
      "root_cause": "xamarin_mvvm_dependency_injection_scope_error",
      "suggestion": "Configure appropriate DI scope for ViewModels (typically transient or scoped). Avoid singleton ViewModels unless specifically needed for shared state.",
      "confidence": "medium",
      "severity": "medium",
      "category": "architecture",
      "framework": "xamarin-mvvm"
    },
    {
      "id": "xamarin_mvvm_prism_navigation_exception",
      "pattern": ".*Prism.*navigation.*exception.*mvvm.*|.*INavigationAware.*exception.*prism.*",
      "type": "PrismNavigationException",
      "description": "Prism framework navigation error in MVVM implementation",
      "root_cause": "xamarin_mvvm_prism_navigation_exception",
      "suggestion": "Implement INavigationAware interface properly in ViewModels. Handle navigation events (OnNavigatedTo, OnNavigatedFrom) and check navigation parameters validity.",
      "confidence": "medium",
      "severity": "medium",
      "category": "navigation",
      "framework": "xamarin-mvvm"
    },
    {
      "id": "xamarin_mvvm_reactiveui_subscription_disposal",
      "pattern": ".*ReactiveUI.*subscription.*disposal.*mvvm.*|.*reactive.*subscription.*not.*disposed.*",
      "type": "MemoryLeak",
      "description": "ReactiveUI subscription not properly disposed",
      "root_cause": "xamarin_mvvm_reactiveui_subscription_disposal",
      "suggestion": "Use DisposeWith() extension method to tie subscription lifetime to ViewModel lifecycle. Implement proper disposal in ReactiveObject-based ViewModels.",
      "confidence": "medium",
      "severity": "medium",
      "category": "memory",
      "framework": "xamarin-mvvm"
    },
    {
      "id": "xamarin_mvvm_fresh_mvvm_page_model_error",
      "pattern": ".*FreshMvvm.*PageModel.*error.*|.*FreshBasePageModel.*initialization.*failed.*",
      "type": "FreshMvvmException",
      "description": "FreshMvvm PageModel initialization or lifecycle error",
      "root_cause": "xamarin_mvvm_fresh_mvvm_page_model_error",
      "suggestion": "Ensure proper FreshMvvm setup and PageModel registration. Implement Init method properly and handle navigation parameters correctly in FreshBasePageModel.",
      "confidence": "medium",
      "severity": "medium",
      "category": "framework",
      "framework": "xamarin-mvvm"
    }
  ]
}