{
  "name": "Xamarin Common Errors",
  "description": "Rules for detecting and fixing common Xamarin cross-platform development errors",
  "version": "1.0.0",
  "rules": [
    {
      "id": "xamarin_null_reference",
      "pattern": "System\\.NullReferenceException: Object reference not set to an instance of an object.*at Xamarin\\.|.*Xamarin.*NullReferenceException.*",
      "type": "System.NullReferenceException",
      "description": "Null reference exception in Xamarin-specific code",
      "root_cause": "xamarin_null_reference",
      "suggestion": "Use null-conditional operators (?.) and null checks before accessing Xamarin objects. Ensure proper initialization of Xamarin.Forms elements and platform-specific instances.",
      "confidence": "high",
      "severity": "medium",
      "category": "core",
      "framework": "xamarin"
    },
    {
      "id": "xamarin_platform_not_supported",
      "pattern": "System\\.PlatformNotSupportedException.*|.*platform.*not.*supported.*xamarin.*",
      "type": "System.PlatformNotSupportedException",
      "description": "Feature not supported on current platform",
      "root_cause": "xamarin_platform_not_supported",
      "suggestion": "Use Device.RuntimePlatform or DeviceInfo.Platform to check current platform before using platform-specific features. Implement platform-specific conditional logic.",
      "confidence": "high",
      "severity": "high",
      "category": "platform",
      "framework": "xamarin"
    },
    {
      "id": "xamarin_dependency_service_null",
      "pattern": ".*DependencyService.*returned null.*|.*DependencyService\\.Get.*null.*",
      "type": "System.NullReferenceException",
      "description": "DependencyService failed to resolve interface implementation",
      "root_cause": "xamarin_dependency_service_null",
      "suggestion": "Ensure interface implementation is registered with [assembly: Dependency] attribute in platform projects. Verify interface and implementation match exactly.",
      "confidence": "high",
      "severity": "medium",
      "category": "dependency",
      "framework": "xamarin"
    },
    {
      "id": "xamarin_main_thread_violation",
      "pattern": ".*NSInternalInconsistencyException.*main thread.*|.*UIKit.*main thread.*xamarin.*|.*CalledFromWrongThreadException.*xamarin.*",
      "type": "NSInternalInconsistencyException",
      "description": "UI operation attempted from background thread",
      "root_cause": "xamarin_main_thread_violation",
      "suggestion": "Use Device.BeginInvokeOnMainThread() or MainThread.BeginInvokeOnMainThread() to marshal UI operations to the main thread from background threads.",
      "confidence": "high",
      "severity": "high",
      "category": "threading",
      "framework": "xamarin"
    },
    {
      "id": "xamarin_invalid_cast_platform",
      "pattern": "System\\.InvalidCastException.*Unable to cast.*Xamarin\\.|.*InvalidCastException.*platform.*specific.*",
      "type": "System.InvalidCastException",
      "description": "Invalid cast between platform-specific types",
      "root_cause": "xamarin_invalid_cast_platform",
      "suggestion": "Use proper type casting between Xamarin.Forms and platform-specific types. Verify renderer and effect implementations use correct base classes.",
      "confidence": "high",
      "severity": "medium",
      "category": "casting",
      "framework": "xamarin"
    },
    {
      "id": "xamarin_resource_not_found",
      "pattern": ".*resource.*not found.*xamarin.*|.*Xamarin.*Resources.*NotFoundException.*",
      "type": "Resources.NotFoundException",
      "description": "Resource not found in platform-specific projects",
      "root_cause": "xamarin_resource_not_found",
      "suggestion": "Verify resource exists in appropriate platform folders (iOS: Resources, Android: Resources). Check build action is set correctly (BundleResource for iOS, AndroidResource for Android).",
      "confidence": "high",
      "severity": "medium",
      "category": "resources",
      "framework": "xamarin"
    },
    {
      "id": "xamarin_linker_preserved_required",
      "pattern": ".*MissingMethodException.*xamarin.*linker.*|.*linker.*removed.*required.*method.*",
      "type": "System.MissingMethodException",
      "description": "Required method removed by Xamarin linker",
      "root_cause": "xamarin_linker_preserved_required",
      "suggestion": "Add [Preserve] attribute to required classes/methods or configure linker settings. Consider disabling linking for affected assemblies in release builds.",
      "confidence": "high",
      "severity": "high",
      "category": "linker",
      "framework": "xamarin"
    },
    {
      "id": "xamarin_navigation_stack_empty",
      "pattern": ".*navigation.*stack.*empty.*|.*NavigationPage.*PopAsync.*invalid.*",
      "type": "System.InvalidOperationException",
      "description": "Navigation operation on empty navigation stack",
      "root_cause": "xamarin_navigation_stack_empty",
      "suggestion": "Check Navigation.NavigationStack.Count before calling PopAsync(). Ensure proper navigation flow and handle back button appropriately.",
      "confidence": "high",
      "severity": "medium",
      "category": "navigation",
      "framework": "xamarin"
    },
    {
      "id": "xamarin_binding_context_null",
      "pattern": ".*BindingContext.*null.*xamarin.*|.*DataTemplate.*BindingContext.*null.*",
      "type": "System.NullReferenceException",
      "description": "BindingContext is null when data binding is attempted",
      "root_cause": "xamarin_binding_context_null",
      "suggestion": "Ensure BindingContext is set before accessing bound properties. Use null conditional operators in bindings or set fallback values.",
      "confidence": "medium",
      "severity": "medium",
      "category": "databinding",
      "framework": "xamarin"
    },
    {
      "id": "xamarin_custom_renderer_not_found",
      "pattern": ".*custom.*renderer.*not.*found.*|.*renderer.*assembly.*not.*registered.*",
      "type": "System.InvalidOperationException",
      "description": "Custom renderer not properly registered or found",
      "root_cause": "xamarin_custom_renderer_not_found",
      "suggestion": "Ensure custom renderer is decorated with [assembly: ExportRenderer] attribute in platform projects. Verify target control type matches exactly.",
      "confidence": "high",
      "severity": "medium",
      "category": "renderer",
      "framework": "xamarin"
    },
    {
      "id": "xamarin_page_lifecycle_violation",
      "pattern": ".*page.*lifecycle.*violation.*|.*OnAppearing.*OnDisappearing.*timing.*",
      "type": "System.InvalidOperationException",
      "description": "Page lifecycle method called at inappropriate time",
      "root_cause": "xamarin_page_lifecycle_violation",
      "suggestion": "Respect page lifecycle order: Constructor -> OnAppearing -> OnDisappearing. Avoid heavy operations in constructors, use OnAppearing for initialization.",
      "confidence": "medium",
      "severity": "medium",
      "category": "lifecycle",
      "framework": "xamarin"
    },
    {
      "id": "xamarin_effect_not_resolved",
      "pattern": ".*effect.*not.*resolved.*|.*ResolutionGroupName.*effect.*not.*found.*",
      "type": "System.InvalidOperationException",
      "description": "Xamarin.Forms Effect not properly resolved",
      "root_cause": "xamarin_effect_not_resolved",
      "suggestion": "Ensure Effect is registered with [assembly: ResolutionGroupName] and [assembly: ExportEffect] in platform projects. Verify effect name matches usage.",
      "confidence": "high",
      "severity": "medium",
      "category": "effects",
      "framework": "xamarin"
    },
    {
      "id": "xamarin_memory_leak_event_handler",
      "pattern": ".*memory.*leak.*event.*handler.*xamarin.*|.*event.*subscription.*not.*unsubscribed.*",
      "type": "MemoryLeak",
      "description": "Event handlers not properly unsubscribed causing memory leaks",
      "root_cause": "xamarin_memory_leak_event_handler",
      "suggestion": "Unsubscribe from events in OnDisappearing or when objects are disposed. Use weak event patterns or MessagingCenter for loose coupling.",
      "confidence": "medium",
      "severity": "high",
      "category": "memory",
      "framework": "xamarin"
    },
    {
      "id": "xamarin_messaging_center_memory_leak",
      "pattern": ".*MessagingCenter.*subscribe.*not.*unsubscribed.*|.*MessagingCenter.*memory.*leak.*",
      "type": "MemoryLeak",
      "description": "MessagingCenter subscriptions not properly unsubscribed",
      "root_cause": "xamarin_messaging_center_memory_leak",
      "suggestion": "Always call MessagingCenter.Unsubscribe in OnDisappearing or disposal methods. Consider using WeakReferenceManager for automatic cleanup.",
      "confidence": "medium",
      "severity": "high",
      "category": "memory",
      "framework": "xamarin"
    },
    {
      "id": "xamarin_async_void_exception",
      "pattern": ".*async void.*exception.*xamarin.*|.*TaskScheduler.*UnobservedTaskException.*",
      "type": "UnobservedTaskException",
      "description": "Unhandled exception in async void method",
      "root_cause": "xamarin_async_void_exception",
      "suggestion": "Avoid async void except for event handlers. Use async Task instead. Handle exceptions properly in async methods and consider using TaskScheduler.UnobservedTaskException.",
      "confidence": "high",
      "severity": "high",
      "category": "async",
      "framework": "xamarin"
    },
    {
      "id": "xamarin_device_info_permission",
      "pattern": ".*DeviceInfo.*permission.*denied.*|.*device.*information.*security.*",
      "type": "System.UnauthorizedAccessException",
      "description": "Device information access denied due to missing permissions",
      "root_cause": "xamarin_device_info_permission",
      "suggestion": "Add required permissions to platform manifests. For sensitive device info, request runtime permissions using Xamarin.Essentials permission methods.",
      "confidence": "high",
      "severity": "medium",
      "category": "permissions",
      "framework": "xamarin"
    },
    {
      "id": "xamarin_cross_platform_path_separator",
      "pattern": ".*path.*separator.*platform.*|.*Path\\.Combine.*incorrect.*xamarin.*",
      "type": "System.IO.DirectoryNotFoundException",
      "description": "Incorrect path separators causing cross-platform file access issues",
      "root_cause": "xamarin_cross_platform_path_separator",
      "suggestion": "Use Path.Combine() instead of hardcoded path separators. Utilize FileSystem.AppDataDirectory from Xamarin.Essentials for cross-platform file paths.",
      "confidence": "medium",
      "severity": "medium",
      "category": "filesystem",
      "framework": "xamarin"
    },
    {
      "id": "xamarin_application_lifecycle_state",
      "pattern": ".*Application.*lifecycle.*state.*invalid.*|.*OnStart.*OnSleep.*OnResume.*timing.*",
      "type": "System.InvalidOperationException",
      "description": "Application lifecycle method called at inappropriate time",
      "root_cause": "xamarin_application_lifecycle_state",
      "suggestion": "Handle application lifecycle properly: OnStart (app starting), OnSleep (backgrounded), OnResume (foregrounded). Save/restore state appropriately.",
      "confidence": "medium",
      "severity": "medium",
      "category": "lifecycle",
      "framework": "xamarin"
    },
    {
      "id": "xamarin_shell_navigation_route_not_found",
      "pattern": ".*Shell.*navigation.*route.*not.*found.*|.*Routing.*RegisterRoute.*missing.*",
      "type": "System.ArgumentException",
      "description": "Shell navigation route not registered or found",
      "root_cause": "xamarin_shell_navigation_route_not_found",
      "suggestion": "Register routes using Routing.RegisterRoute() in App.xaml.cs. Verify route names match exactly in Shell.Current.GoToAsync() calls.",
      "confidence": "high",
      "severity": "medium",
      "category": "navigation",
      "framework": "xamarin"
    },
    {
      "id": "xamarin_collection_view_data_template_error",
      "pattern": ".*CollectionView.*DataTemplate.*error.*|.*ItemTemplate.*binding.*failed.*",
      "type": "System.InvalidOperationException",
      "description": "CollectionView DataTemplate binding or configuration error",
      "root_cause": "xamarin_collection_view_data_template_error",
      "suggestion": "Ensure DataTemplate is properly configured with correct BindingContext. Verify ItemsSource is observable collection and implements INotifyPropertyChanged.",
      "confidence": "medium",
      "severity": "medium",
      "category": "controls",
      "framework": "xamarin"
    }
  ]
}