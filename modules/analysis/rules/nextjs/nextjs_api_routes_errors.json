{
  "version": "1.0.0",
  "description": "Next.js API routes error detection rules",
  "rules": [
    {
      "id": "nextjs_api_no_response",
      "category": "nextjs",
      "subcategory": "api_routes",
      "pattern": "(?i)api.*resolved.*without.*response|request.*not.*finish|response.*not.*sent|api.*route.*no.*response",
      "suggestion": "Ensure API route handler sends a response",
      "root_cause": "nextjs_api_no_response",
      "confidence": "high",
      "severity": "error",
      "reliability": "high",
      "tags": ["nextjs", "api-routes", "response"],
      "fix_commands": [
        "Add res.status().json() to send a proper response",
        "Ensure all code paths end with a response",
        "Check for early returns without responses"
      ]
    },
    {
      "id": "nextjs_api_method_not_allowed",
      "category": "nextjs",
      "subcategory": "api_routes",
      "pattern": "(?i)method.*not.*allowed|invalid.*http.*method|method.*not.*supported|unexpected.*method|method.*missing",
      "suggestion": "Add proper HTTP method handling to API route",
      "root_cause": "nextjs_api_method_not_allowed",
      "confidence": "high",
      "severity": "error",
      "reliability": "high",
      "tags": ["nextjs", "api-routes", "http-method"],
      "fix_commands": [
        "Check request method with req.method",
        "Add handlers for each supported method",
        "Return 405 Method Not Allowed for unsupported methods"
      ]
    },
    {
      "id": "nextjs_api_body_parsing",
      "category": "nextjs",
      "subcategory": "api_routes",
      "pattern": "(?i)body.*parsing.*failed|invalid.*json.*body|unexpected.*body|could.*not.*parse.*body",
      "suggestion": "Fix request body parsing in API route",
      "root_cause": "nextjs_api_body_parse",
      "confidence": "high",
      "severity": "error",
      "reliability": "high",
      "tags": ["nextjs", "api-routes", "body-parsing"],
      "fix_commands": [
        "Check content-type headers match body format",
        "Add error handling for body parsing",
        "Verify body format (JSON, form data, etc.)",
        "Use body-parser middleware if needed"
      ]
    },
    {
      "id": "nextjs_api_headers_already_sent",
      "category": "nextjs",
      "subcategory": "api_routes",
      "pattern": "(?i)headers.*already.*sent|cannot.*set.*headers.*sent|response.*already.*sent|multiple.*response",
      "suggestion": "Fix multiple response or header modification after sending response",
      "root_cause": "nextjs_api_headers_already_sent",
      "confidence": "high",
      "severity": "error",
      "reliability": "high",
      "tags": ["nextjs", "api-routes", "headers"],
      "fix_commands": [
        "Ensure only one response is sent per request",
        "Set headers before sending response",
        "Use early returns to avoid multiple responses",
        "Check for asynchronous code sending multiple responses"
      ]
    },
    {
      "id": "nextjs_api_missing_handler",
      "category": "nextjs",
      "subcategory": "api_routes",
      "pattern": "(?i)handler.*not.*function|handler.*missing|default.*export.*function|no.*handler.*defined",
      "suggestion": "Export a proper API route handler function",
      "root_cause": "nextjs_api_missing_handler",
      "confidence": "high",
      "severity": "error",
      "reliability": "high",
      "tags": ["nextjs", "api-routes", "handler"],
      "fix_commands": [
        "Export a default function with (req, res) parameters",
        "Ensure the function is async if using await",
        "Verify export syntax is correct"
      ]
    },
    {
      "id": "nextjs_api_cors_error",
      "category": "nextjs",
      "subcategory": "api_routes",
      "pattern": "(?i)cors.*error|cross.*origin.*blocked|cors.*not.*configured|access-control-allow-origin",
      "suggestion": "Configure CORS for API routes",
      "root_cause": "nextjs_api_cors_error",
      "confidence": "medium",
      "severity": "error",
      "reliability": "medium",
      "tags": ["nextjs", "api-routes", "cors"],
      "fix_commands": [
        "Add appropriate CORS headers",
        "Use a CORS middleware like cors npm package",
        "Configure Access-Control-Allow-Origin header",
        "Handle OPTIONS requests for preflight"
      ]
    },
    {
      "id": "nextjs_api_validation_error",
      "category": "nextjs",
      "subcategory": "api_routes",
      "pattern": "(?i)validation.*failed|invalid.*input|schema.*validation|missing.*required.*field",
      "suggestion": "Add input validation to API route",
      "root_cause": "nextjs_api_validation_error",
      "confidence": "medium",
      "severity": "error",
      "reliability": "medium",
      "tags": ["nextjs", "api-routes", "validation"],
      "fix_commands": [
        "Validate request parameters and body",
        "Return 400 Bad Request for invalid input",
        "Use validation libraries like yup, joi, or zod",
        "Add clear error messages for invalid inputs"
      ]
    },
    {
      "id": "nextjs_api_middleware_error",
      "category": "nextjs",
      "subcategory": "api_routes",
      "pattern": "(?i)api.*middleware.*error|middleware.*failed|api.*config.*error|api.*export.*config",
      "suggestion": "Fix API route middleware or configuration",
      "root_cause": "nextjs_api_middleware_error",
      "confidence": "medium",
      "severity": "error",
      "reliability": "medium",
      "tags": ["nextjs", "api-routes", "middleware"],
      "fix_commands": [
        "Check API route middleware implementation",
        "Verify middleware executes and calls next()",
        "Check export config is properly formatted",
        "Ensure middleware functions are async if they use await"
      ]
    }
  ]
}