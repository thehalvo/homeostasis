{
  "rules": [
    {
      "id": "spring_data_jpa_entity_not_found",
      "pattern": "(?:javax\\.persistence\\.EntityNotFoundException|org\\.springframework\\.dao\\.EmptyResultDataAccessException)(?:.*?(?:Entity|No entity).*?not found.*?)?",
      "type": "EntityNotFoundException",
      "description": "JPA entity not found in database",
      "root_cause": "spring_data_entity_not_found",
      "suggestion": "Check if entity exists in database. Use Optional return types for repository methods. Implement proper error handling for missing entities. Consider using findById() instead of getOne().",
      "confidence": "high",
      "severity": "medium",
      "category": "spring_data",
      "framework": "spring"
    },
    {
      "id": "spring_data_jpa_lazy_initialization_error",
      "pattern": "org\\.hibernate\\.LazyInitializationException(?:.*?(?:lazy|session|initialize).*?)?",
      "type": "LazyInitializationException",
      "description": "Lazy loading failed outside of Hibernate session",
      "root_cause": "spring_data_lazy_loading_error",
      "suggestion": "Use @Transactional on service methods. Fetch associations eagerly with JOIN FETCH. Use @EntityGraph to specify fetch strategy. Initialize collections within transaction boundary.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring_data",
      "framework": "spring"
    },
    {
      "id": "spring_data_jpa_constraint_violation",
      "pattern": "(?:org\\.springframework\\.dao\\.DataIntegrityViolationException|javax\\.validation\\.ConstraintViolationException)(?:.*?(?:constraint|violation|integrity).*?)?",
      "type": "DataIntegrityViolationException",
      "description": "Database constraint violation occurred",
      "root_cause": "spring_data_constraint_violation",
      "suggestion": "Check data integrity constraints in database. Validate input data before persistence. Handle unique constraint violations gracefully. Review entity validation annotations.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring_data",
      "framework": "spring"
    },
    {
      "id": "spring_data_jpa_optimistic_locking_failure",
      "pattern": "(?:org\\.springframework\\.orm\\.ObjectOptimisticLockingFailureException|org\\.hibernate\\.StaleObjectStateException)(?:.*?(?:optimistic|locking|version).*?)?",
      "type": "OptimisticLockingFailureException",
      "description": "Optimistic locking conflict detected",
      "root_cause": "spring_data_optimistic_locking_failure",
      "suggestion": "Refresh entity before update. Implement retry mechanism for concurrent updates. Use pessimistic locking for critical operations. Handle version conflicts in UI layer.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring_data",
      "framework": "spring"
    },
    {
      "id": "spring_data_jpa_transaction_required",
      "pattern": "(?:javax\\.persistence\\.TransactionRequiredException|org\\.springframework\\.dao\\.InvalidDataAccessApiUsageException)(?:.*?(?:transaction|executing an update).*?)?",
      "type": "TransactionRequiredException",
      "description": "Database operation requires active transaction",
      "root_cause": "spring_data_transaction_required",
      "suggestion": "Add @Transactional annotation to service method. Ensure transaction manager is properly configured. Use @Modifying for custom update/delete queries. Check transaction propagation settings.",
      "confidence": "high",
      "severity": "high",
      "category": "spring_data",
      "framework": "spring"
    },
    {
      "id": "spring_data_jpa_invalid_query_syntax",
      "pattern": "(?:org\\.springframework\\.dao\\.InvalidDataAccessResourceUsageException|org\\.hibernate\\.hql\\.internal\\.ast\\.QuerySyntaxException)(?:.*?(?:unexpected|expecting|Invalid|syntax).*?)?",
      "type": "QuerySyntaxException",
      "description": "Invalid JPQL or native SQL query syntax",
      "root_cause": "spring_data_invalid_query",
      "suggestion": "Check JPQL/HQL syntax in repository methods. Verify entity and field names in queries. Use proper parameter binding. Test queries independently in database tool.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring_data",
      "framework": "spring"
    },
    {
      "id": "spring_data_jpa_repository_method_not_found",
      "pattern": "java\\.lang\\.IllegalArgumentException(?:.*?(?:repository method|query method).*?not found.*?)?",
      "type": "RepositoryMethodException",
      "description": "Repository method could not be resolved",
      "root_cause": "spring_data_repository_method_error",
      "suggestion": "Check repository method naming convention. Verify entity property names used in method names. Use @Query annotation for complex queries. Ensure repository interface extends correct base interface.",
      "confidence": "medium",
      "severity": "medium",
      "category": "spring_data",
      "framework": "spring"
    },
    {
      "id": "spring_data_jpa_no_property_found",
      "pattern": "org\\.springframework\\.data\\.mapping\\.PropertyReferenceException(?:.*?No property.*?found.*?)?",
      "type": "PropertyReferenceException",
      "description": "Property referenced in repository method does not exist",
      "root_cause": "spring_data_property_not_found",
      "suggestion": "Check entity property names for typos. Verify property exists in entity class. Use correct camelCase naming. Consider using @Query for complex property paths.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring_data",
      "framework": "spring"
    },
    {
      "id": "spring_data_jpa_connection_pool_exhausted",
      "pattern": "(?:java\\.sql\\.SQLException|org\\.springframework\\.jdbc\\.CannotGetJdbcConnectionException)(?:.*?(?:connection.*?pool|timeout|exhausted).*?)?",
      "type": "ConnectionPoolException",
      "description": "Database connection pool exhausted",
      "root_cause": "spring_data_connection_pool_exhausted",
      "suggestion": "Increase connection pool size. Check for connection leaks in code. Ensure proper transaction boundaries. Monitor database connection usage. Configure connection timeout appropriately.",
      "confidence": "high",
      "severity": "high",
      "category": "spring_data",
      "framework": "spring"
    },
    {
      "id": "spring_data_jpa_deadlock_detected",
      "pattern": "(?:org\\.springframework\\.dao\\.DeadlockLoserDataAccessException|java\\.sql\\.SQLException)(?:.*?deadlock.*?)?",
      "type": "DeadlockException",
      "description": "Database deadlock detected",
      "root_cause": "spring_data_deadlock",
      "suggestion": "Implement deadlock retry mechanism. Ensure consistent lock ordering. Minimize transaction scope and duration. Use appropriate isolation levels. Consider using pessimistic locking.",
      "confidence": "high",
      "severity": "high",
      "category": "spring_data",
      "framework": "spring"
    },
    {
      "id": "spring_data_jpa_schema_validation_failed",
      "pattern": "org\\.hibernate\\.tool\\.schema\\.spi\\.SchemaManagementException(?:.*?(?:schema|validation|table).*?)?",
      "type": "SchemaValidationException",
      "description": "Hibernate schema validation failed",
      "root_cause": "spring_data_schema_validation_error",
      "suggestion": "Ensure database schema matches entity definitions. Update database schema or entity mappings. Check hibernate.hbm2ddl.auto setting. Verify column types and constraints match entity annotations.",
      "confidence": "high",
      "severity": "high",
      "category": "spring_data",
      "framework": "spring"
    },
    {
      "id": "spring_data_jpa_unsupported_operation",
      "pattern": "java\\.lang\\.UnsupportedOperationException(?:.*?(?:repository|operation|method).*?not supported.*?)?",
      "type": "UnsupportedRepositoryOperation",
      "description": "Repository operation not supported",
      "root_cause": "spring_data_unsupported_operation",
      "suggestion": "Check if repository interface extends correct base interface. Verify method signature matches Spring Data conventions. Use @Query for custom implementations. Consider implementing custom repository methods.",
      "confidence": "medium",
      "severity": "medium",
      "category": "spring_data",
      "framework": "spring"
    },
    {
      "id": "spring_data_redis_connection_failed",
      "pattern": "(?:org\\.springframework\\.data\\.redis\\.RedisConnectionFailureException|redis\\.clients\\.jedis\\.exceptions\\.JedisConnectionException)(?:.*?(?:connection|redis).*?)?",
      "type": "RedisConnectionException",
      "description": "Redis connection failed",
      "root_cause": "spring_data_redis_connection_error",
      "suggestion": "Check Redis server availability and configuration. Verify connection pool settings. Ensure proper Redis authentication. Check network connectivity and firewall rules.",
      "confidence": "high",
      "severity": "high",
      "category": "spring_data",
      "framework": "spring"
    },
    {
      "id": "spring_data_mongodb_connection_failed",
      "pattern": "(?:com\\.mongodb\\.MongoException|org\\.springframework\\.data\\.mongodb\\.UncategorizedMongoDbException)(?:.*?(?:connection|mongodb|mongo).*?)?",
      "type": "MongoConnectionException",
      "description": "MongoDB connection failed",
      "root_cause": "spring_data_mongodb_connection_error",
      "suggestion": "Check MongoDB server status and configuration. Verify connection string and credentials. Ensure proper network connectivity. Check MongoDB authentication and authorization settings.",
      "confidence": "high",
      "severity": "high",
      "category": "spring_data",
      "framework": "spring"
    },
    {
      "id": "spring_data_elasticsearch_connection_failed",
      "pattern": "(?:org\\.elasticsearch\\.client\\.ResponseException|org\\.springframework\\.data\\.elasticsearch\\.client\\.ClientException)(?:.*?(?:elasticsearch|connection).*?)?",
      "type": "ElasticsearchConnectionException",
      "description": "Elasticsearch connection failed",
      "root_cause": "spring_data_elasticsearch_connection_error",
      "suggestion": "Check Elasticsearch cluster health and connectivity. Verify client configuration and credentials. Ensure proper index mappings. Check network settings and firewall rules.",
      "confidence": "high",
      "severity": "high",
      "category": "spring_data",
      "framework": "spring"
    },
    {
      "id": "spring_data_cassandra_connection_failed",
      "pattern": "(?:com\\.datastax\\.driver\\.core\\.exceptions\\.NoHostAvailableException|org\\.springframework\\.data\\.cassandra\\.CassandraConnectionFailureException)(?:.*?(?:cassandra|connection|host).*?)?",
      "type": "CassandraConnectionException",
      "description": "Cassandra connection failed",
      "root_cause": "spring_data_cassandra_connection_error",
      "suggestion": "Check Cassandra cluster status and node availability. Verify connection configuration and keyspace settings. Ensure proper authentication and authorization. Check network connectivity.",
      "confidence": "high",
      "severity": "high",
      "category": "spring_data",
      "framework": "spring"
    },
    {
      "id": "spring_data_r2dbc_connection_failed",
      "pattern": "(?:io\\.r2dbc\\.spi\\.R2dbcException|org\\.springframework\\.r2dbc\\.connection\\.ConnectionFactoryUtils)(?:.*?(?:r2dbc|connection|reactive).*?)?",
      "type": "R2dbcConnectionException",
      "description": "R2DBC reactive database connection failed",
      "root_cause": "spring_data_r2dbc_connection_error",
      "suggestion": "Check R2DBC driver configuration and database connectivity. Verify connection factory settings. Ensure proper reactive stream handling. Check database server availability.",
      "confidence": "high",
      "severity": "high",
      "category": "spring_data",
      "framework": "spring"
    },
    {
      "id": "spring_data_jpa_batch_update_exception",
      "pattern": "java\\.sql\\.BatchUpdateException(?:.*?batch.*?update.*?)?",
      "type": "BatchUpdateException",
      "description": "Batch update operation failed",
      "root_cause": "spring_data_batch_update_error",
      "suggestion": "Check individual statements in batch for errors. Reduce batch size if memory issues occur. Handle partial batch failures appropriately. Verify data constraints for batch operations.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring_data",
      "framework": "spring"
    },
    {
      "id": "spring_data_jpa_flush_mode_error",
      "pattern": "org\\.springframework\\.dao\\.InvalidDataAccessApiUsageException(?:.*?flush.*?mode.*?)?",
      "type": "FlushModeException",
      "description": "Invalid flush mode for operation",
      "root_cause": "spring_data_flush_mode_error",
      "suggestion": "Configure appropriate flush mode for transaction. Use @Modifying(flushAutomatically = true) for custom queries. Consider manual flush() calls when needed. Review transaction boundaries.",
      "confidence": "medium",
      "severity": "medium",
      "category": "spring_data",
      "framework": "spring"
    },
    {
      "id": "spring_data_auditing_not_enabled",
      "pattern": "java\\.lang\\.IllegalStateException(?:.*?auditing.*?not.*?enabled.*?)?",
      "type": "AuditingNotEnabledException",
      "description": "JPA auditing not enabled but audit annotations used",
      "root_cause": "spring_data_auditing_not_enabled",
      "suggestion": "Add @EnableJpaAuditing to configuration class. Implement AuditorAware bean for user auditing. Ensure audit annotations are on entity fields. Check auditing configuration setup.",
      "confidence": "high",
      "severity": "low",
      "category": "spring_data",
      "framework": "spring"
    }
  ]
}