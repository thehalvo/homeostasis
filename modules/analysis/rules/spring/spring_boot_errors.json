{
  "rules": [
    {
      "id": "spring_autowired_failure",
      "pattern": "(?:org\\.springframework\\.beans\\.factory\\.UnsatisfiedDependencyException|org\\.springframework\\.beans\\.factory\\.NoSuchBeanDefinitionException)(?:.*?Consider defining a bean of type '([^']+)'.*?|.*?No qualifying bean of type '([^']+)' available.*?)",
      "type": "UnsatisfiedDependencyException",
      "description": "Spring could not autowire a dependency because the required bean was not found",
      "root_cause": "spring_missing_bean",
      "suggestion": "Make sure the dependency is properly declared as a bean. Check that component scanning is properly configured to include the appropriate package. You may need to add @Component, @Service, @Repository, or @Bean annotation.",
      "confidence": "high",
      "severity": "high",
      "category": "spring",
      "framework": "spring"
    },
    {
      "id": "spring_component_scan_missing",
      "pattern": "org\\.springframework\\.context\\.annotation\\.ComponentScan.*?no components found",
      "type": "ComponentScanError",
      "description": "Spring component scan did not find any components in the specified packages",
      "root_cause": "spring_component_scan_error",
      "suggestion": "Check the package paths in @ComponentScan. Ensure your components are properly annotated with @Component, @Service, @Repository, etc. Verify package structure matches classpath.",
      "confidence": "high",
      "severity": "high",
      "category": "spring",
      "framework": "spring"
    },
    {
      "id": "spring_circular_dependency",
      "pattern": "(?:org\\.springframework\\.beans\\.factory\\.BeanCurrentlyInCreationException|The dependencies of some of the beans in the application context form a cycle)",
      "type": "BeanCurrentlyInCreationException",
      "description": "Circular dependency detected in Spring application context",
      "root_cause": "spring_circular_dependency",
      "suggestion": "Break the circular dependency by: 1) Redesign the components to avoid circular references, 2) Use @Lazy to defer one of the dependencies, 3) Use setter injection instead of constructor injection, or 4) Introduce an interface to decouple the components.",
      "confidence": "high",
      "severity": "high",
      "category": "spring",
      "framework": "spring"
    },
    {
      "id": "spring_bean_creation_error",
      "pattern": "org\\.springframework\\.beans\\.factory\\.BeanCreationException(?:.*?Error creating bean with name '([^']+)'.*?)?",
      "type": "BeanCreationException",
      "description": "Spring could not create a bean instance",
      "root_cause": "spring_bean_creation_error",
      "suggestion": "Check the bean configuration and initialization. Ensure all dependencies are available, constructor arguments are correct, and initialization methods are properly implemented. Check for circular dependencies or missing required beans.",
      "confidence": "high",
      "severity": "high",
      "category": "spring",
      "framework": "spring",
      "tags": ["bean", "configuration", "initialization"]
    },
    {
      "id": "spring_property_not_found",
      "pattern": "org\\.springframework\\.beans\\.factory\\.BeanCreationException.*?Could not resolve placeholder '([^']+)' in value.*?",
      "type": "BeanCreationException",
      "description": "Spring could not resolve a property placeholder",
      "root_cause": "spring_missing_property",
      "suggestion": "Check that the property is defined in application.properties/application.yml or another property source. Verify the property name for typos. Set a default value with ${property:defaultValue} syntax.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring",
      "framework": "spring"
    },
    {
      "id": "spring_data_jpa_query_syntax",
      "pattern": "(?:org\\.springframework\\.dao\\.InvalidDataAccessResourceUsageException|org\\.hibernate\\.hql\\.internal\\.ast\\.QuerySyntaxException).*?((?:unexpected|expecting|Invalid) [^\\n]*)",
      "type": "InvalidDataAccessResourceUsageException",
      "description": "Invalid JPQL or HQL query syntax in Spring Data JPA",
      "root_cause": "spring_invalid_query",
      "suggestion": "Fix the syntax error in your query. Check the JPQL/HQL syntax, entity names, and field names. Verify that the query matches the actual entity structure.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring",
      "framework": "spring"
    },
    {
      "id": "spring_validation_failure",
      "pattern": "org\\.springframework\\.validation\\.BindException.*?",
      "type": "BindException",
      "description": "Validation errors occurred during request binding",
      "root_cause": "spring_validation_error",
      "suggestion": "Add proper validation handling in your controller using BindingResult. Implement input validation and sanitization. Add clear error messages for each validation constraint.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring",
      "framework": "spring"
    },
    {
      "id": "spring_request_mapping_ambiguity",
      "pattern": "org\\.springframework\\.web\\.servlet\\.mvc\\.method\\.annotation\\.RequestMappingHandlerMapping.*?Ambiguous mapping.*?",
      "type": "AmbiguousRequestMappingException",
      "description": "Ambiguous request mapping found in Spring MVC",
      "root_cause": "spring_ambiguous_mapping",
      "suggestion": "Ensure each request mapping is unique. Check for duplicate @RequestMapping paths or overlapping path variables. Make mappings distinctive by using different HTTP methods or consumes/produces attributes.",
      "confidence": "high",
      "severity": "high",
      "category": "spring",
      "framework": "spring"
    },
    {
      "id": "spring_request_method_not_supported",
      "pattern": "org\\.springframework\\.web\\.HttpRequestMethodNotSupportedException(?:.*?method '([^']+)'.*?)?",
      "type": "HttpRequestMethodNotSupportedException",
      "description": "HTTP request method not supported by the endpoint",
      "root_cause": "spring_method_not_supported",
      "suggestion": "Ensure the client is using the correct HTTP method (GET, POST, PUT, DELETE, etc.) for the endpoint. Update the @RequestMapping to include the expected method or add an additional handler for the used method.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring",
      "framework": "spring"
    },
    {
      "id": "spring_media_type_not_supported",
      "pattern": "org\\.springframework\\.web\\.HttpMediaTypeNotSupportedException(?:.*?media type '([^']+)'.*?)?",
      "type": "HttpMediaTypeNotSupportedException",
      "description": "Content-Type header in the request is not supported",
      "root_cause": "spring_media_type_not_supported",
      "suggestion": "Check the Content-Type header in the client request. Ensure the controller's consumes attribute matches the client's Content-Type. Add support for the required media type in your controller.",
      "confidence": "high", 
      "severity": "medium",
      "category": "spring",
      "framework": "spring"
    },
    {
      "id": "spring_required_param_missing",
      "pattern": "org\\.springframework\\.web\\.bind\\.MissingServletRequestParameterException(?:.*?parameter '([^']+)'.*?)?",
      "type": "MissingServletRequestParameterException",
      "description": "Required request parameter is missing",
      "root_cause": "spring_missing_parameter",
      "suggestion": "Ensure the client is sending the required parameter. If the parameter is optional, use @RequestParam(required=false) or provide a default value with @RequestParam(defaultValue=\"default\").",
      "confidence": "high",
      "severity": "medium",
      "category": "spring",
      "framework": "spring"
    },
    {
      "id": "spring_boot_config_error",
      "pattern": "org\\.springframework\\.boot\\.context\\.config\\.ConfigDataLocationNotFoundException(?:.*?Config data location '([^']+)'.*?)?",
      "type": "ConfigDataLocationNotFoundException",
      "description": "Spring Boot could not find a configuration file",
      "root_cause": "spring_missing_config",
      "suggestion": "Check the location of your application.properties or application.yml file. Make sure it's in the correct classpath location or properly specified via spring.config.location. Consider using a default configuration file.",
      "confidence": "high",
      "severity": "high",
      "category": "spring",
      "framework": "spring"
    },
    {
      "id": "spring_async_timeout",
      "pattern": "java\\.util\\.concurrent\\.TimeoutException(?:.*?@Async.*?)?",
      "type": "TimeoutException",
      "description": "Async operation timed out in Spring",
      "root_cause": "spring_async_timeout",
      "suggestion": "Configure a longer timeout for the async method. Optimize the async operation for better performance. Consider using a more appropriate timeout strategy or circuit breaker pattern.",
      "confidence": "medium",
      "severity": "high",
      "category": "spring",
      "framework": "spring"
    },
    {
      "id": "spring_transaction_rollback",
      "pattern": "org\\.springframework\\.transaction\\.UnexpectedRollbackException.*?Transaction silently rolled back.*?",
      "type": "UnexpectedRollbackException",
      "description": "Spring transaction was unexpectedly rolled back",
      "root_cause": "spring_transaction_rollback",
      "suggestion": "Check for exceptions in nested transactions or transaction-aware code. Review your transaction propagation settings. Ensure you're not catching and swallowing exceptions in transactional code.",
      "confidence": "high",
      "severity": "high",
      "category": "spring",
      "framework": "spring"
    },
    {
      "id": "spring_security_access_denied",
      "pattern": "org\\.springframework\\.security\\.access\\.AccessDeniedException(?:.*?Access is denied.*?)?",
      "type": "AccessDeniedException",
      "description": "Security access denied due to insufficient permissions",
      "root_cause": "spring_access_denied",
      "suggestion": "Verify the user has the required roles/authorities for the operation. Check your security configuration, especially method-level security expressions. Implement proper error handling for access denied situations.",
      "confidence": "high",
      "severity": "high",
      "category": "spring",
      "framework": "spring"
    },
    {
      "id": "spring_profile_not_found",
      "pattern": "org\\.springframework\\.core\\.env\\.NoSuchProfileException(?:.*?profile '([^']+)'.*?)?",
      "type": "NoSuchProfileException",
      "description": "Specified Spring profile not found",
      "root_cause": "spring_missing_profile",
      "suggestion": "Check that you've correctly specified the active profile. Make sure the profile name is consistent across all configuration. Use spring.profiles.active=profile1,profile2 to activate profiles.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring",
      "framework": "spring"
    },
    {
      "id": "spring_web_client_error",
      "pattern": "org\\.springframework\\.web\\.reactive\\.function\\.client\\.WebClientResponseException(?:.*?Status: (\\d+).*?)?",
      "type": "WebClientResponseException",
      "description": "WebClient received an error response from a remote service",
      "root_cause": "spring_web_client_error",
      "suggestion": "Implement proper error handling for WebClient responses. Use onStatus() to handle specific HTTP status codes. Consider implementing circuit breaker pattern for remote service calls.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring",
      "framework": "spring"
    }
  ]
}