{
  "rules": [
    {
      "id": "spring_mvc_handler_not_found",
      "pattern": "org\\.springframework\\.web\\.servlet\\.NoHandlerFoundException(?:.*?No handler found for.*?)?",
      "type": "NoHandlerFoundException",
      "description": "No handler found for HTTP request",
      "root_cause": "spring_mvc_no_handler",
      "suggestion": "Check request mapping paths and HTTP methods. Ensure controller is component scanned. Verify URL patterns and path variables. Check if spring.mvc.throw-exception-if-no-handler-found is enabled.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring_mvc",
      "framework": "spring"
    },
    {
      "id": "spring_mvc_method_not_supported",
      "pattern": "org\\.springframework\\.web\\.HttpRequestMethodNotSupportedException(?:.*?Request method '([^']+)' not supported.*?)?",
      "type": "HttpRequestMethodNotSupportedException",
      "description": "HTTP method not supported by endpoint",
      "root_cause": "spring_mvc_method_not_supported",
      "suggestion": "Add support for the HTTP method in @RequestMapping. Check if correct HTTP method is used in client request. Consider using @GetMapping, @PostMapping, etc. for clarity.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring_mvc",
      "framework": "spring"
    },
    {
      "id": "spring_mvc_media_type_not_acceptable",
      "pattern": "org\\.springframework\\.web\\.HttpMediaTypeNotAcceptableException(?:.*?Could not find acceptable representation.*?)?",
      "type": "HttpMediaTypeNotAcceptableException",
      "description": "Cannot produce response in acceptable media type",
      "root_cause": "spring_mvc_media_type_not_acceptable",
      "suggestion": "Check Accept header in client request. Add produces attribute to @RequestMapping. Ensure proper message converters are configured. Verify content negotiation setup.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring_mvc",
      "framework": "spring"
    },
    {
      "id": "spring_mvc_missing_request_parameter",
      "pattern": "org\\.springframework\\.web\\.bind\\.MissingServletRequestParameterException(?:.*?Required.*?parameter '([^']+)'.*?is not present.*?)?",
      "type": "MissingServletRequestParameterException",
      "description": "Required request parameter is missing",
      "root_cause": "spring_mvc_missing_parameter",
      "suggestion": "Add the required parameter to client request. Make parameter optional with @RequestParam(required=false). Provide default value with @RequestParam(defaultValue=\"...\").",
      "confidence": "high",
      "severity": "medium",
      "category": "spring_mvc",
      "framework": "spring"
    },
    {
      "id": "spring_mvc_type_mismatch",
      "pattern": "org\\.springframework\\.web\\.method\\.annotation\\.MethodArgumentTypeMismatchException(?:.*?Failed to convert.*?)?",
      "type": "MethodArgumentTypeMismatchException",
      "description": "Failed to convert request parameter to expected type",
      "root_cause": "spring_mvc_type_conversion_error",
      "suggestion": "Verify parameter type matches expected format. Implement custom converter if needed. Add proper validation and error handling. Check client request format.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring_mvc",
      "framework": "spring"
    },
    {
      "id": "spring_mvc_validation_error",
      "pattern": "org\\.springframework\\.web\\.bind\\.MethodArgumentNotValidException(?:.*?Validation failed.*?)?",
      "type": "MethodArgumentNotValidException",
      "description": "Request body validation failed",
      "root_cause": "spring_mvc_validation_failure",
      "suggestion": "Check validation annotations on request DTO. Handle BindingResult in controller method. Provide clear error messages for validation failures. Ensure proper @Valid annotation usage.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring_mvc",
      "framework": "spring"
    },
    {
      "id": "spring_mvc_missing_request_body",
      "pattern": "org\\.springframework\\.http\\.converter\\.HttpMessageNotReadableException(?:.*?Required request body is missing.*?)?",
      "type": "HttpMessageNotReadableException",
      "description": "Required request body is missing or malformed",
      "root_cause": "spring_mvc_missing_request_body",
      "suggestion": "Ensure client sends proper request body. Check Content-Type header. Make request body optional with @RequestBody(required=false). Verify JSON/XML format.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring_mvc",
      "framework": "spring"
    },
    {
      "id": "spring_mvc_view_resolution_error",
      "pattern": "org\\.springframework\\.web\\.servlet\\.view\\.(?:ViewResolver|InternalResourceViewResolver)(?:.*?Could not resolve view.*?)?",
      "type": "ViewResolutionException",
      "description": "View resolution failed",
      "root_cause": "spring_mvc_view_resolution_error",
      "suggestion": "Check view name returned from controller. Verify view resolver configuration. Ensure template files exist in correct location. Check view technology configuration (Thymeleaf, JSP, etc.).",
      "confidence": "high",
      "severity": "medium",
      "category": "spring_mvc",
      "framework": "spring"
    },
    {
      "id": "spring_mvc_multipart_size_exceeded",
      "pattern": "org\\.springframework\\.web\\.multipart\\.MaxUploadSizeExceededException(?:.*?Maximum upload size.*?exceeded.*?)?",
      "type": "MaxUploadSizeExceededException",
      "description": "File upload size exceeded maximum limit",
      "root_cause": "spring_mvc_upload_size_exceeded",
      "suggestion": "Increase multipart.max-file-size and multipart.max-request-size properties. Validate file size before upload. Implement proper error handling for large files.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring_mvc",
      "framework": "spring"
    },
    {
      "id": "spring_mvc_async_timeout",
      "pattern": "org\\.springframework\\.web\\.context\\.request\\.async\\.AsyncRequestTimeoutException(?:.*?Async request timeout.*?)?",
      "type": "AsyncRequestTimeoutException",
      "description": "Async request processing timed out",
      "root_cause": "spring_mvc_async_timeout",
      "suggestion": "Increase async request timeout configuration. Optimize long-running operations. Implement proper async error handling. Consider using WebFlux for reactive processing.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring_mvc",
      "framework": "spring"
    },
    {
      "id": "spring_webflux_reactive_stream_error",
      "pattern": "org\\.springframework\\.web\\.reactive\\.function\\.client\\.WebClientException(?:.*?reactive.*?)?",
      "type": "WebClientException",
      "description": "Reactive stream processing error in WebFlux",
      "root_cause": "spring_webflux_reactive_error",
      "suggestion": "Handle reactive stream errors with onErrorResume(). Implement proper backpressure handling. Check reactive chain for blocking operations. Use appropriate reactive operators.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring_webflux",
      "framework": "spring"
    },
    {
      "id": "spring_webflux_blocking_operation",
      "pattern": "java\\.lang\\.IllegalStateException(?:.*?block.*?reactive.*?|.*?blocking.*?reactive.*?)?",
      "type": "BlockingOperationException",
      "description": "Blocking operation detected in reactive context",
      "root_cause": "spring_webflux_blocking_operation",
      "suggestion": "Replace blocking operations with reactive alternatives. Use subscribeOn() to move blocking code to different scheduler. Avoid .block() calls in reactive streams. Use WebClient instead of RestTemplate.",
      "confidence": "high",
      "severity": "high",
      "category": "spring_webflux",
      "framework": "spring"
    },
    {
      "id": "spring_webflux_server_codec_error",
      "pattern": "org\\.springframework\\.core\\.codec\\.(?:CodecException|DecodingException|EncodingException)(?:.*?codec.*?)?",
      "type": "CodecException",
      "description": "Codec error during request/response processing",
      "root_cause": "spring_webflux_codec_error",
      "suggestion": "Check content type and codec configuration. Ensure proper message readers/writers are configured. Verify JSON/XML format. Add custom codec if needed.",
      "confidence": "high",
      "severity": "medium",
      "category": "spring_webflux",
      "framework": "spring"
    },
    {
      "id": "spring_webflux_router_function_error",
      "pattern": "org\\.springframework\\.web\\.reactive\\.function\\.server\\.(?:RouterFunction|HandlerFunction)(?:.*?route.*?)?",
      "type": "RouterFunctionException",
      "description": "Router function configuration error",
      "root_cause": "spring_webflux_router_error",
      "suggestion": "Check router function configuration and handler mapping. Verify route patterns and predicates. Ensure proper handler function implementation. Check request matching logic.",
      "confidence": "medium",
      "severity": "medium",
      "category": "spring_webflux",
      "framework": "spring"
    },
    {
      "id": "spring_mvc_cors_error",
      "pattern": "org\\.springframework\\.web\\.servlet\\.mvc\\.method\\.annotation\\.RequestMappingHandlerMapping(?:.*?CORS.*?|.*?Cross-Origin.*?)?",
      "type": "CorsException",
      "description": "CORS configuration error in Spring MVC",
      "root_cause": "spring_mvc_cors_error",
      "suggestion": "Configure CORS properly with @CrossOrigin or WebMvcConfigurer. Check allowed origins, methods, and headers. Ensure preflight requests are handled correctly.",
      "confidence": "medium",
      "severity": "medium",
      "category": "spring_mvc",
      "framework": "spring"
    },
    {
      "id": "spring_mvc_interceptor_error",
      "pattern": "org\\.springframework\\.web\\.servlet\\.HandlerInterceptor(?:.*?interceptor.*?)?",
      "type": "HandlerInterceptorException",
      "description": "Handler interceptor execution error",
      "root_cause": "spring_mvc_interceptor_error",
      "suggestion": "Check interceptor implementation and registration. Verify preHandle() return value. Handle exceptions in interceptor methods. Ensure proper interceptor ordering.",
      "confidence": "medium",
      "severity": "medium",
      "category": "spring_mvc",
      "framework": "spring"
    },
    {
      "id": "spring_mvc_converter_not_found",
      "pattern": "org\\.springframework\\.http\\.converter\\.HttpMessageConverter(?:.*?converter.*?not found.*?)?",
      "type": "HttpMessageConverterException",
      "description": "HTTP message converter not found for content type",
      "root_cause": "spring_mvc_converter_not_found",
      "suggestion": "Register appropriate message converter for content type. Check Jackson or other converter dependencies. Configure custom converter if needed. Verify content type headers.",
      "confidence": "medium",
      "severity": "medium",
      "category": "spring_mvc",
      "framework": "spring"
    },
    {
      "id": "spring_webflux_websocket_error",
      "pattern": "org\\.springframework\\.web\\.reactive\\.socket\\.(?:WebSocketSession|WebSocketHandler)(?:.*?websocket.*?)?",
      "type": "WebSocketException",
      "description": "WebSocket connection or handling error",
      "root_cause": "spring_webflux_websocket_error",
      "suggestion": "Check WebSocket handler implementation. Verify WebSocket endpoint mapping. Handle connection lifecycle properly. Implement proper error handling for WebSocket messages.",
      "confidence": "medium",
      "severity": "medium",
      "category": "spring_webflux",
      "framework": "spring"
    },
    {
      "id": "spring_mvc_session_attribute_error",
      "pattern": "org\\.springframework\\.web\\.bind\\.support\\.SessionAttributeStore(?:.*?session.*?attribute.*?)?",
      "type": "SessionAttributeException",
      "description": "Session attribute handling error",
      "root_cause": "spring_mvc_session_attribute_error",
      "suggestion": "Check @SessionAttribute usage and session configuration. Verify session scope and timeout settings. Handle session invalidation properly. Ensure session serialization compatibility.",
      "confidence": "medium",
      "severity": "low",
      "category": "spring_mvc",
      "framework": "spring"
    },
    {
      "id": "spring_webflux_server_response_error",
      "pattern": "org\\.springframework\\.web\\.reactive\\.function\\.server\\.ServerResponse(?:.*?response.*?)?",
      "type": "ServerResponseException",
      "description": "Server response building error in WebFlux",
      "root_cause": "spring_webflux_response_error",
      "suggestion": "Check ServerResponse builder usage. Verify response body and headers. Ensure proper content type setting. Handle response streaming correctly.",
      "confidence": "medium",
      "severity": "medium",
      "category": "spring_webflux",
      "framework": "spring"
    }
  ]
}