{
  "name": "Scala Functional Errors",
  "version": "1.0.0",
  "description": "Scala functional programming and effect system error detection rules",
  "rules": [
    {
      "id": "scala_monad_flatmap_type_mismatch",
      "category": "functional",
      "type": "monad",
      "pattern": "type mismatch.*expected.*F\\[.*\\].*found.*F\\[F\\[.*\\]\\]|flatMap requires function returning",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Use flatMap for F[B] results, map for B results to avoid nested effects",
      "root_cause": "scala_monad_nesting",
      "tags": [
        "scala",
        "functional",
        "monad",
        "flatMap"
      ],
      "description": "Scala Monad Flatmap Type Mismatch"
    },
    {
      "id": "scala_functor_map_side_effect",
      "category": "functional",
      "type": "functor",
      "pattern": "side effect in map operation|map function returns Unit|discarded non-Unit value",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "low",
      "suggestion": "Use foreach for side effects, keep map pure for transformations",
      "root_cause": "scala_functor_side_effect",
      "tags": [
        "scala",
        "functional",
        "functor",
        "side_effect"
      ],
      "description": "Scala Functor Map Side Effect"
    },
    {
      "id": "scala_cats_effect_unsafe_run",
      "category": "effect_system",
      "type": "cats_effect",
      "pattern": "unsafeRun.* called outside of main|IO\\.unsafeRunSync in production code",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "high",
      "suggestion": "Avoid unsafeRun in production code. Use IOApp or proper effect management",
      "root_cause": "scala_cats_unsafe_run",
      "tags": [
        "scala",
        "cats",
        "effect",
        "unsafe"
      ],
      "description": "Scala Cats Effect Unsafe Run"
    },
    {
      "id": "scala_zio_fiber_leak",
      "category": "effect_system",
      "type": "zio",
      "pattern": "fiber not joined or interrupted|ZIO fiber leak detected|unmanaged fiber",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Use fiber.join, fiber.interrupt, or ZIO.forkScoped for managed fibers",
      "root_cause": "scala_zio_fiber_leak",
      "tags": [
        "scala",
        "zio",
        "fiber",
        "leak"
      ],
      "description": "Scala Zio Fiber Leak"
    },
    {
      "id": "scala_monad_transformer_stack",
      "category": "functional",
      "type": "transformer",
      "pattern": "monad transformer stack too deep|EitherT\\[OptionT\\[.*\\]\\] nesting|transformer stack overflow",
      "confidence": "low",
      "reliability": "low",
      "severity": "medium",
      "suggestion": "Consider tagless final or ZIO/cats-effect for complex effect stacks",
      "root_cause": "scala_transformer_complexity",
      "tags": [
        "scala",
        "functional",
        "transformer",
        "stack"
      ],
      "description": "Scala Monad Transformer Stack"
    },
    {
      "id": "scala_free_monad_interpreter",
      "category": "functional",
      "type": "free_monad",
      "pattern": "free monad interpreter missing|no natural transformation for.*Free",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "high",
      "suggestion": "Provide interpreter (natural transformation) for Free monad algebra",
      "root_cause": "scala_free_interpreter_missing",
      "tags": [
        "scala",
        "functional",
        "free",
        "interpreter"
      ],
      "description": "Scala Free Monad Interpreter"
    },
    {
      "id": "scala_tagless_final_constraint",
      "category": "functional",
      "type": "tagless_final",
      "pattern": "F\\[_\\] constraint not satisfied|tagless final.*missing type class instance",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Ensure F[_] has required type class instances (Monad, Sync, etc.)",
      "root_cause": "scala_tagless_constraint",
      "tags": [
        "scala",
        "functional",
        "tagless",
        "constraint"
      ],
      "description": "Scala Tagless Final Constraint"
    },
    {
      "id": "scala_applicative_sequence_error",
      "category": "functional",
      "type": "applicative",
      "pattern": "sequence operation failed|traverse with identity|applicative composition error",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Use traverse instead of map + sequence for efficiency",
      "root_cause": "scala_applicative_sequence",
      "tags": [
        "scala",
        "functional",
        "applicative",
        "sequence"
      ],
      "description": "Scala Applicative Sequence"
    },
    {
      "id": "scala_kleisli_composition",
      "category": "functional",
      "type": "kleisli",
      "pattern": "Kleisli composition type mismatch|andThen.*Reader.*incompatible types",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Ensure Kleisli arrow types align: A => F[B] and B => F[C]",
      "root_cause": "scala_kleisli_types",
      "tags": [
        "scala",
        "functional",
        "kleisli",
        "composition"
      ],
      "description": "Scala Kleisli Composition"
    },
    {
      "id": "scala_lens_composition_error",
      "category": "functional",
      "type": "optics",
      "pattern": "lens composition failed|optic.*does not compose|Lens\\[.*\\] cannot be composed",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Lens composition requires matching types: Lens[A,B] andThen Lens[B,C]",
      "root_cause": "scala_lens_composition",
      "tags": [
        "scala",
        "functional",
        "lens",
        "optics"
      ],
      "description": "Scala Lens Composition"
    },
    {
      "id": "scala_effect_referential_transparency",
      "category": "effect_system",
      "type": "purity",
      "pattern": "side effect in pure function|referential transparency violated|var accessed in IO",
      "confidence": "low",
      "reliability": "low",
      "severity": "medium",
      "suggestion": "Wrap side effects in IO/Task/ZIO to maintain referential transparency",
      "root_cause": "scala_effect_impure",
      "tags": [
        "scala",
        "functional",
        "effect",
        "purity"
      ],
      "description": "Scala Effect Referential Transparency"
    },
    {
      "id": "scala_semigroup_associativity",
      "category": "functional",
      "type": "algebra",
      "pattern": "semigroup law violation|combine not associative|monoid identity law failed",
      "confidence": "low",
      "reliability": "low",
      "severity": "high",
      "suggestion": "Ensure Semigroup/Monoid instances satisfy laws: associativity and identity",
      "root_cause": "scala_algebra_laws",
      "tags": [
        "scala",
        "functional",
        "semigroup",
        "laws"
      ],
      "description": "Scala Semigroup Associativity"
    },
    {
      "id": "scala_stream_resource_leak",
      "category": "functional",
      "type": "streaming",
      "pattern": "fs2 stream not compiled|akka stream not run|stream resource leak",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "high",
      "suggestion": "Compile fs2 streams or run Akka streams to ensure resource cleanup",
      "root_cause": "scala_stream_not_run",
      "tags": [
        "scala",
        "functional",
        "stream",
        "resource"
      ],
      "description": "Scala Stream Resource Leak"
    },
    {
      "id": "scala_validated_accumulation",
      "category": "functional",
      "type": "validation",
      "pattern": "Validated.*used like Either|error accumulation lost|mapN on Validated",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "low",
      "suggestion": "Use Validated for error accumulation, Either for fail-fast",
      "root_cause": "scala_validated_usage",
      "tags": [
        "scala",
        "functional",
        "validated",
        "accumulation"
      ],
      "description": "Scala Validated Accumulation"
    },
    {
      "id": "scala_io_monad_stack_safety",
      "category": "effect_system",
      "type": "stack_safety",
      "pattern": "IO stack overflow|tailRecM required|stack unsafe recursion in IO",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "high",
      "suggestion": "Use tailRecM or IO.suspend for stack-safe recursion",
      "root_cause": "scala_io_stack_unsafe",
      "tags": [
        "scala",
        "functional",
        "io",
        "stack_safety"
      ],
      "description": "Scala Io Monad Stack Safety"
    }
  ]
}