{
  "name": "Scala Pattern Matching Errors",
  "version": "1.0.0",
  "description": "Scala pattern matching error detection rules",
  "rules": [
    {
      "id": "scala_sealed_trait_non_exhaustive",
      "category": "pattern_matching",
      "type": "exhaustiveness",
      "pattern": "match may not be exhaustive.*would fail on the following|missing combination.*sealed",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Add missing cases for sealed trait/class subtypes or add a wildcard case",
      "root_cause": "scala_sealed_non_exhaustive",
      "tags": [
        "scala",
        "pattern",
        "sealed",
        "exhaustive"
      ],
      "description": "Scala Sealed Trait Non Exhaustive"
    },
    {
      "id": "scala_pattern_guard_failure",
      "category": "pattern_matching",
      "type": "guard",
      "pattern": "pattern guard .* failed|guard condition .* evaluated to false",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Ensure pattern guard conditions are correct or add fallback case",
      "root_cause": "scala_pattern_guard_false",
      "tags": [
        "scala",
        "pattern",
        "guard",
        "condition"
      ],
      "description": "Scala Pattern Guard Failure"
    },
    {
      "id": "scala_extractor_unapply_error",
      "category": "pattern_matching",
      "type": "extractor",
      "pattern": "wrong number of arguments for .* unapply|extractor .* does not match expected",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Extractor unapply/unapplySeq must return Option with correct arity",
      "root_cause": "scala_extractor_signature",
      "tags": [
        "scala",
        "pattern",
        "extractor",
        "unapply"
      ],
      "description": "Scala Extractor Unapply"
    },
    {
      "id": "scala_variable_pattern_binding",
      "category": "pattern_matching",
      "type": "binding",
      "pattern": "illegal variable in pattern|pattern variable .* is already defined",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Use unique variable names in patterns or @ for binding",
      "root_cause": "scala_pattern_variable_conflict",
      "tags": [
        "scala",
        "pattern",
        "variable",
        "binding"
      ],
      "description": "Scala Variable Pattern Binding"
    },
    {
      "id": "scala_type_pattern_erasure",
      "category": "pattern_matching",
      "type": "type_pattern",
      "pattern": "abstract type pattern .* is unchecked|type pattern .* is unchecked since it is eliminated by erasure",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Type parameters are erased at runtime. Use ClassTag or match on concrete types",
      "root_cause": "scala_type_pattern_erasure",
      "tags": [
        "scala",
        "pattern",
        "type",
        "erasure"
      ],
      "description": "Scala Type Pattern Erasure"
    },
    {
      "id": "scala_sequence_pattern_error",
      "category": "pattern_matching",
      "type": "sequence",
      "pattern": "sequence pattern .* not allowed|varargs pattern .* must be last",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Use _* for sequence patterns and ensure it's the last element",
      "root_cause": "scala_sequence_pattern",
      "tags": [
        "scala",
        "pattern",
        "sequence",
        "varargs"
      ],
      "description": "Scala Sequence Pattern"
    },
    {
      "id": "scala_pattern_match_unreachable",
      "category": "pattern_matching",
      "type": "unreachable",
      "pattern": "unreachable code|case .* is subsumed by case",
      "confidence": "high",
      "reliability": "high",
      "severity": "low",
      "suggestion": "Remove or reorder cases - more specific patterns should come before general ones",
      "root_cause": "scala_pattern_unreachable",
      "tags": [
        "scala",
        "pattern",
        "unreachable",
        "dead_code"
      ],
      "description": "Scala Pattern Match Unreachable"
    },
    {
      "id": "scala_for_comprehension_pattern",
      "category": "pattern_matching",
      "type": "for_comprehension",
      "pattern": "pattern .* does not match expected type|for-comprehension pattern match failed",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Patterns in for-comprehensions must match or use guards to filter",
      "root_cause": "scala_for_pattern_mismatch",
      "tags": [
        "scala",
        "pattern",
        "for_comprehension",
        "generator"
      ],
      "description": "Scala For Comprehension Pattern"
    },
    {
      "id": "scala_custom_extractor_exception",
      "category": "pattern_matching",
      "type": "extractor_exception",
      "pattern": "exception thrown in extractor|unapply.* threw .*Exception",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "high",
      "suggestion": "Extractors should not throw exceptions. Return None for non-matching cases",
      "root_cause": "scala_extractor_exception",
      "tags": [
        "scala",
        "pattern",
        "extractor",
        "exception"
      ],
      "description": "Scala Custom Extractor Exception"
    },
    {
      "id": "scala_pattern_alternative_type",
      "category": "pattern_matching",
      "type": "alternative",
      "pattern": "pattern alternatives .* have incompatible types|illegal pattern alternative",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Pattern alternatives (|) must bind variables of the same type",
      "root_cause": "scala_pattern_alternative_type",
      "tags": [
        "scala",
        "pattern",
        "alternative",
        "type"
      ],
      "description": "Scala Pattern Alternative Type"
    },
    {
      "id": "scala_pattern_binder_arity",
      "category": "pattern_matching",
      "type": "binder",
      "pattern": "pattern binder .* has wrong arity|@ bindings must have same arity",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Pattern binders (@) must match the arity of the pattern",
      "root_cause": "scala_pattern_binder_arity",
      "tags": [
        "scala",
        "pattern",
        "binder",
        "arity"
      ],
      "description": "Scala Pattern Binder Arity"
    },
    {
      "id": "scala_stable_identifier_pattern",
      "category": "pattern_matching",
      "type": "stable_id",
      "pattern": "stable identifier required|lowercase pattern variable .* is treated as constant",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "low",
      "suggestion": "Use backticks for stable identifiers or uppercase for constants in patterns",
      "root_cause": "scala_pattern_stable_id",
      "tags": [
        "scala",
        "pattern",
        "identifier",
        "stable"
      ],
      "description": "Scala Stable Identifier Pattern"
    },
    {
      "id": "scala_irrefutable_pattern_expected",
      "category": "pattern_matching",
      "type": "irrefutable",
      "pattern": "irrefutable pattern expected|pattern .* is refutable",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Val/var definitions require irrefutable patterns (always match)",
      "root_cause": "scala_pattern_refutable",
      "tags": [
        "scala",
        "pattern",
        "irrefutable",
        "val"
      ],
      "description": "Scala Irrefutable Pattern Expected"
    },
    {
      "id": "scala_pattern_match_analysis_warning",
      "category": "pattern_matching",
      "type": "analysis",
      "pattern": "match may not be exhaustive.*It would fail on pattern|pattern match analysis warning",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Consider all possible inputs including edge cases and null values",
      "root_cause": "scala_pattern_analysis",
      "tags": [
        "scala",
        "pattern",
        "analysis",
        "warning"
      ],
      "description": "Scala Pattern Match Analysis Warning"
    },
    {
      "id": "scala_gadt_pattern_type_refinement",
      "category": "pattern_matching",
      "type": "gadt",
      "pattern": "GADT pattern .* refines type|type refinement in pattern match",
      "confidence": "low",
      "reliability": "low",
      "severity": "low",
      "suggestion": "GADT patterns can refine types in match branches",
      "root_cause": "scala_gadt_pattern",
      "tags": [
        "scala",
        "pattern",
        "gadt",
        "refinement"
      ],
      "description": "Scala Gadt Pattern Type Refinement"
    }
  ]
}