{
  "name": "Scala Future Advanced Errors",
  "version": "1.0.0",
  "description": "Advanced Scala Future composition and error handling patterns",
  "rules": [
    {
      "id": "scala_future_zip_failure",
      "category": "futures",
      "type": "composition",
      "pattern": "Future\\.zip failed|zip operation on failed Future|one of the zipped futures failed",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Future.zip fails fast if any Future fails. Use Future.zipWith or handle failures individually",
      "root_cause": "scala_future_zip_fail_fast",
      "tags": [
        "scala",
        "future",
        "zip",
        "composition"
      ],
      "description": "Scala Future Zip Failure"
    },
    {
      "id": "scala_future_sequence_failure",
      "category": "futures",
      "type": "sequence",
      "pattern": "Future\\.sequence failed|sequence operation contains failed Future",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Future.sequence fails if any Future fails. Use Future.traverse or collect successful results",
      "root_cause": "scala_future_sequence_fail",
      "tags": [
        "scala",
        "future",
        "sequence",
        "traverse"
      ],
      "description": "Scala Future Sequence Failure"
    },
    {
      "id": "scala_future_traverse_error",
      "category": "futures",
      "type": "traverse",
      "pattern": "Future\\.traverse error|traverse function threw exception",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Ensure traverse function handles errors. Consider using Future.sequence with pre-mapped Futures",
      "root_cause": "scala_future_traverse_error",
      "tags": [
        "scala",
        "future",
        "traverse",
        "error"
      ],
      "description": "Scala Future Traverse"
    },
    {
      "id": "scala_future_recover_partial",
      "category": "futures",
      "type": "recovery",
      "pattern": "MatchError in recover|recover partial function not exhaustive",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Ensure recover/recoverWith partial functions handle all expected exceptions",
      "root_cause": "scala_future_recover_partial",
      "tags": [
        "scala",
        "future",
        "recover",
        "partial"
      ],
      "description": "Scala Future Recover Partial"
    },
    {
      "id": "scala_future_fallback_chain",
      "category": "futures",
      "type": "fallback",
      "pattern": "fallbackTo failed|both primary and fallback futures failed",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Chain multiple fallbacks or use recoverWith for more control over fallback logic",
      "root_cause": "scala_future_fallback_failed",
      "tags": [
        "scala",
        "future",
        "fallback",
        "chain"
      ],
      "description": "Scala Future Fallback Chain"
    },
    {
      "id": "scala_future_transform_error",
      "category": "futures",
      "type": "transform",
      "pattern": "transform function threw|transformWith exception|Future\\.transform error",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Handle exceptions in transform/transformWith functions",
      "root_cause": "scala_future_transform_exception",
      "tags": [
        "scala",
        "future",
        "transform",
        "exception"
      ],
      "description": "Scala Future Transform"
    },
    {
      "id": "scala_future_failed_projection",
      "category": "futures",
      "type": "failed",
      "pattern": "Future\\.failed on successful Future|NoSuchElementException.*Future\\.failed",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Future.failed only works on failed Futures. Check with isCompleted or handle both cases",
      "root_cause": "scala_future_failed_success",
      "tags": [
        "scala",
        "future",
        "failed",
        "projection"
      ],
      "description": "Scala Future Failed Projection"
    },
    {
      "id": "scala_execution_context_starvation",
      "category": "futures",
      "type": "execution_context",
      "pattern": "thread starvation|execution context queue full|no threads available",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "critical",
      "suggestion": "Use appropriate ExecutionContext. Avoid blocking operations or use blocking {} construct",
      "root_cause": "scala_ec_starvation",
      "tags": [
        "scala",
        "future",
        "execution_context",
        "starvation"
      ],
      "description": "Scala Execution Context Starvation"
    },
    {
      "id": "scala_future_cancellation_unsupported",
      "category": "futures",
      "type": "cancellation",
      "pattern": "Future cancellation not supported|cannot cancel Scala Future",
      "confidence": "low",
      "reliability": "low",
      "severity": "low",
      "suggestion": "Scala Futures are not cancellable. Use Monix Task or Cats Effect IO for cancellation",
      "root_cause": "scala_future_no_cancel",
      "tags": [
        "scala",
        "future",
        "cancellation",
        "limitation"
      ],
      "description": "Scala Future Cancellation Unsupported"
    },
    {
      "id": "scala_promise_already_completed",
      "category": "futures",
      "type": "promise",
      "pattern": "Promise already completed|IllegalStateException.*Promise",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Promises can only be completed once. Use tryComplete methods or check isCompleted",
      "root_cause": "scala_promise_completed",
      "tags": [
        "scala",
        "future",
        "promise",
        "completed"
      ],
      "description": "Scala Promise Already Completed"
    },
    {
      "id": "scala_future_foreach_side_effect",
      "category": "futures",
      "type": "side_effect",
      "pattern": "exception in foreach|side effect in Future\\.foreach failed",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "low",
      "suggestion": "Handle exceptions in foreach callbacks. Use onComplete for error handling",
      "root_cause": "scala_future_foreach_error",
      "tags": [
        "scala",
        "future",
        "foreach",
        "side_effect"
      ],
      "description": "Scala Future Foreach Side Effect"
    },
    {
      "id": "scala_future_filter_nosuchelement",
      "category": "futures",
      "type": "filter",
      "pattern": "Future\\.filter predicate is not satisfied|NoSuchElementException.*Future\\.filter",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Future.filter fails with NoSuchElementException if predicate is false. Use collect or flatMap",
      "root_cause": "scala_future_filter_false",
      "tags": [
        "scala",
        "future",
        "filter",
        "predicate"
      ],
      "description": "Scala Future Filter Nosuchelement"
    },
    {
      "id": "scala_future_collect_partial",
      "category": "futures",
      "type": "collect",
      "pattern": "Future\\.collect partial function.*MatchError|collect not defined at",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Ensure collect partial function handles all success cases or use recover for failures",
      "root_cause": "scala_future_collect_partial",
      "tags": [
        "scala",
        "future",
        "collect",
        "partial"
      ],
      "description": "Scala Future Collect Partial"
    },
    {
      "id": "scala_future_onfailure_deprecated",
      "category": "futures",
      "type": "deprecated",
      "pattern": "onFailure is deprecated|Use onComplete or failed\\.foreach instead",
      "confidence": "high",
      "reliability": "high",
      "severity": "low",
      "suggestion": "Replace onFailure with onComplete { case Failure(e) => ... } or failed.foreach",
      "root_cause": "scala_future_onfailure_deprecated",
      "tags": [
        "scala",
        "future",
        "deprecated",
        "onFailure"
      ],
      "description": "Scala Future Onfailure Deprecated"
    },
    {
      "id": "scala_future_blocking_await",
      "category": "futures",
      "type": "blocking",
      "pattern": "Await\\.result blocked|blocking wait on Future|Await deadline exceeded",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Avoid Await.result in production. Use map/flatMap or async frameworks",
      "root_cause": "scala_future_await_blocking",
      "tags": [
        "scala",
        "future",
        "await",
        "blocking"
      ],
      "description": "Scala Future Blocking Await"
    }
  ]
}