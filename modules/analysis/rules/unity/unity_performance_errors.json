{
  "name": "Unity Performance Errors",
  "description": "Rules for detecting and fixing Unity performance related errors and optimization issues",
  "version": "1.0.0",
  "rules": [
    {
      "id": "unity_performance_excessive_draw_calls",
      "pattern": "Draw.*calls.*excessive.*|Too.*many.*draw.*calls.*Unity.*|Batching.*failed.*draw.*calls.*",
      "type": "PerformanceWarning",
      "description": "Excessive draw calls causing performance issues",
      "root_cause": "unity_performance_draw_calls",
      "suggestion": "Reduce draw calls using texture atlasing, static batching, and GPU instancing. Combine meshes and use fewer materials.",
      "confidence": "high",
      "severity": "medium",
      "category": "rendering",
      "framework": "unity",
      "tags": ["unity", "performance", "draw-calls", "batching"]
    },
    {
      "id": "unity_performance_garbage_collection",
      "pattern": "GC.*allocation.*spike.*|Garbage.*collection.*frequent.*Unity.*|Memory.*allocation.*performance.*",
      "type": "PerformanceWarning",
      "description": "Frequent garbage collection causing frame drops",
      "root_cause": "unity_performance_gc",
      "suggestion": "Reduce object allocations: reuse objects, use object pooling, avoid string concatenation in Update, cache component references.",
      "confidence": "medium",
      "severity": "high",
      "category": "memory",
      "framework": "unity",
      "tags": ["unity", "performance", "garbage-collection", "memory"]
    },
    {
      "id": "unity_performance_expensive_update",
      "pattern": "Update.*method.*expensive.*|Performance.*bottleneck.*Update.*Unity.*",
      "type": "PerformanceWarning",
      "description": "Expensive operations in Update method",
      "root_cause": "unity_performance_expensive_update",
      "suggestion": "Move expensive operations out of Update. Use coroutines, timer intervals, or event-driven approaches for heavy computations.",
      "confidence": "medium",
      "severity": "medium",
      "category": "update_optimization",
      "framework": "unity",
      "tags": ["unity", "performance", "update", "optimization"]
    },
    {
      "id": "unity_performance_texture_memory",
      "pattern": "Texture.*memory.*usage.*high.*|Texture.*compression.*not.*optimal.*",
      "type": "PerformanceWarning",
      "description": "High texture memory usage or suboptimal compression",
      "root_cause": "unity_performance_texture_memory",
      "suggestion": "Use appropriate texture compression formats. Reduce texture sizes where possible. Use mipmaps and texture streaming.",
      "confidence": "medium",
      "severity": "medium",
      "category": "textures",
      "framework": "unity",
      "tags": ["unity", "performance", "textures", "memory"]
    },
    {
      "id": "unity_performance_physics_calculations",
      "pattern": "Physics.*calculations.*expensive.*|Rigidbody.*performance.*impact.*",
      "type": "PerformanceWarning",
      "description": "Expensive physics calculations affecting performance",
      "root_cause": "unity_performance_physics",
      "suggestion": "Optimize physics: reduce Fixed Timestep, use simpler colliders, implement LOD for physics, disable unnecessary Rigidbodies.",
      "confidence": "medium",
      "severity": "medium",
      "category": "physics",
      "framework": "unity",
      "tags": ["unity", "performance", "physics", "rigidbody"]
    },
    {
      "id": "unity_performance_shader_compilation",
      "pattern": "Shader.*compilation.*lag.*|Shader.*variant.*loading.*slow.*",
      "type": "PerformanceWarning",
      "description": "Shader compilation causing runtime stutters",
      "root_cause": "unity_performance_shader_compilation",
      "suggestion": "Pre-warm shader variants using ShaderVariantCollection. Avoid runtime shader compilation by including used variants in build.",
      "confidence": "medium",
      "severity": "medium",
      "category": "shaders",
      "framework": "unity",
      "tags": ["unity", "performance", "shaders", "compilation"]
    },
    {
      "id": "unity_performance_animator_performance",
      "pattern": "Animator.*performance.*impact.*|Animation.*evaluation.*expensive.*",
      "type": "PerformanceWarning",
      "description": "Animator component causing performance issues",
      "root_cause": "unity_performance_animator",
      "suggestion": "Optimize Animator: use Animator culling, reduce animation layers, disable Animator on distant objects, use simple state machines.",
      "confidence": "medium",
      "severity": "medium",
      "category": "animation",
      "framework": "unity",
      "tags": ["unity", "performance", "animator", "animation"]
    },
    {
      "id": "unity_performance_camera_rendering",
      "pattern": "Camera.*rendering.*performance.*|Multiple.*cameras.*expensive.*",
      "type": "PerformanceWarning",
      "description": "Camera rendering causing performance bottlenecks",
      "root_cause": "unity_performance_camera_rendering",
      "suggestion": "Optimize camera settings: adjust culling distances, use camera layers, implement frustum culling, reduce camera count.",
      "confidence": "medium",
      "severity": "medium",
      "category": "camera",
      "framework": "unity",
      "tags": ["unity", "performance", "camera", "rendering"]
    },
    {
      "id": "unity_performance_audio_performance",
      "pattern": "Audio.*performance.*impact.*|AudioSource.*too.*many.*active.*",
      "type": "PerformanceWarning",
      "description": "Audio system causing performance issues",
      "root_cause": "unity_performance_audio",
      "suggestion": "Optimize audio: use compressed audio formats, limit concurrent AudioSources, implement audio LOD, pool AudioSources.",
      "confidence": "low",
      "severity": "low",
      "category": "audio",
      "framework": "unity",
      "tags": ["unity", "performance", "audio", "optimization"]
    },
    {
      "id": "unity_performance_instantiate_destroy",
      "pattern": "Instantiate.*Destroy.*performance.*|Object.*creation.*destruction.*frequent.*",
      "type": "PerformanceWarning",
      "description": "Frequent Instantiate/Destroy causing performance issues",
      "root_cause": "unity_performance_instantiate_destroy",
      "suggestion": "Implement object pooling instead of frequent Instantiate/Destroy. Reuse GameObjects to reduce garbage collection.",
      "confidence": "high",
      "severity": "medium",
      "category": "object_pooling",
      "framework": "unity",
      "tags": ["unity", "performance", "pooling", "instantiate"]
    },
    {
      "id": "unity_performance_ui_rebuild",
      "pattern": "UI.*rebuild.*frequent.*|Canvas.*dirty.*performance.*UI.*",
      "type": "PerformanceWarning",
      "description": "Frequent UI rebuilds causing performance issues",
      "root_cause": "unity_performance_ui_rebuild",
      "suggestion": "Separate static and dynamic UI elements into different Canvas components. Minimize UI hierarchy changes and layout updates.",
      "confidence": "medium",
      "severity": "medium",
      "category": "ui_performance",
      "framework": "unity",
      "tags": ["unity", "performance", "ui", "canvas"]
    },
    {
      "id": "unity_performance_string_operations",
      "pattern": "String.*operations.*performance.*|StringBuilder.*not.*used.*concatenation.*",
      "type": "PerformanceWarning",
      "description": "Inefficient string operations causing performance issues",
      "root_cause": "unity_performance_string_operations",
      "suggestion": "Use StringBuilder for multiple string concatenations. Cache frequently used strings. Avoid string operations in Update.",
      "confidence": "medium",
      "severity": "low",
      "category": "strings",
      "framework": "unity",
      "tags": ["unity", "performance", "strings", "optimization"]
    },
    {
      "id": "unity_performance_coroutine_memory",
      "pattern": "Coroutine.*memory.*allocation.*|IEnumerator.*garbage.*frequent.*",
      "type": "PerformanceWarning",
      "description": "Coroutines causing excessive memory allocations",
      "root_cause": "unity_performance_coroutine_memory",
      "suggestion": "Cache WaitForSeconds instances. Avoid boxing in coroutines. Use WaitForSecondsRealtime when appropriate.",
      "confidence": "medium",
      "severity": "low",
      "category": "coroutines",
      "framework": "unity",
      "tags": ["unity", "performance", "coroutines", "memory"]
    },
    {
      "id": "unity_performance_raycast_frequency",
      "pattern": "Raycast.*frequency.*high.*performance.*|Physics.*raycast.*every.*frame.*",
      "type": "PerformanceWarning",
      "description": "Frequent raycasting causing performance issues",
      "root_cause": "unity_performance_raycast_frequency",
      "suggestion": "Reduce raycast frequency: use timers, implement raycast pooling, use simpler collision detection when possible.",
      "confidence": "medium",
      "severity": "medium",
      "category": "raycasting",
      "framework": "unity",
      "tags": ["unity", "performance", "raycast", "physics"]
    },
    {
      "id": "unity_performance_vertex_count_high",
      "pattern": "Vertex.*count.*high.*performance.*|Mesh.*too.*complex.*rendering.*",
      "type": "PerformanceWarning",
      "description": "High vertex count meshes causing rendering performance issues",
      "root_cause": "unity_performance_vertex_count",
      "suggestion": "Use LOD (Level of Detail) system. Implement mesh optimization and simplification. Use occlusion culling for complex scenes.",
      "confidence": "medium",
      "severity": "medium",
      "category": "mesh_optimization",
      "framework": "unity",
      "tags": ["unity", "performance", "mesh", "lod"]
    }
  ]
}