{
  "name": "Unity Common Errors",
  "description": "Rules for detecting and fixing common Unity development errors",
  "version": "1.0.0",
  "rules": [
    {
      "id": "unity_null_reference_exception",
      "pattern": "NullReferenceException.*Object reference not set.*|UnityEngine.*NullReferenceException.*",
      "type": "System.NullReferenceException",
      "description": "Null reference exception in Unity objects",
      "root_cause": "unity_null_reference_error",
      "suggestion": "Add null checks before accessing GameObjects or Components. Use null conditional operators (?.) and ensure proper initialization in Awake() or Start().",
      "confidence": "high",
      "severity": "high",
      "category": "null_reference",
      "framework": "unity",
      "tags": ["unity", "null-reference", "scripting"]
    },
    {
      "id": "unity_missing_component",
      "pattern": "MissingComponentException.*|GetComponent.*returned null.*|Component.*not found.*Unity.*",
      "type": "UnityEngine.MissingComponentException",
      "description": "Required component missing from GameObject",
      "root_cause": "unity_missing_component",
      "suggestion": "Ensure required component is attached to GameObject. Use [RequireComponent] attribute or TryGetComponent for safe access.",
      "confidence": "high",
      "severity": "medium",
      "category": "components",
      "framework": "unity",
      "tags": ["unity", "components", "scripting"]
    },
    {
      "id": "unity_destroyed_object_access",
      "pattern": "MissingReferenceException.*|.*has been destroyed.*still trying to access.*|Object.*destroyed.*Unity.*",
      "type": "UnityEngine.MissingReferenceException",
      "description": "Attempting to access destroyed Unity object",
      "root_cause": "unity_destroyed_object_access",
      "suggestion": "Check if object exists before accessing it. Use proper object lifecycle management and avoid references to destroyed objects.",
      "confidence": "high",
      "severity": "medium",
      "category": "object_lifecycle",
      "framework": "unity",
      "tags": ["unity", "object-lifecycle", "scripting"]
    },
    {
      "id": "unity_coroutine_error",
      "pattern": "Coroutine.*couldn't be started.*|StopCoroutine.*error.*|StartCoroutine.*inactive.*",
      "type": "System.InvalidOperationException",
      "description": "Coroutine operation failed due to GameObject state",
      "root_cause": "unity_coroutine_error",
      "suggestion": "Ensure GameObject is active and MonoBehaviour is enabled when starting coroutines. Stop coroutines in OnDisable/OnDestroy.",
      "confidence": "high",
      "severity": "medium",
      "category": "coroutines",
      "framework": "unity",
      "tags": ["unity", "coroutines", "scripting"]
    },
    {
      "id": "unity_instantiate_null",
      "pattern": "Instantiate.*null.*|Object.Instantiate.*argument.*null.*",
      "type": "System.ArgumentException",
      "description": "Attempting to instantiate null prefab or object",
      "root_cause": "unity_instantiate_null",
      "suggestion": "Check if prefab reference is assigned before calling Instantiate(). Ensure prefab is properly assigned in Inspector or loaded via Resources/Addressables.",
      "confidence": "high",
      "severity": "medium",
      "category": "instantiation",
      "framework": "unity",
      "tags": ["unity", "instantiation", "prefabs"]
    },
    {
      "id": "unity_scene_not_found",
      "pattern": "Scene.*not found.*|LoadScene.*invalid.*scene.*|Scene.*doesn't exist.*",
      "type": "System.ArgumentException",
      "description": "Attempting to load non-existent scene",
      "root_cause": "unity_scene_not_found",
      "suggestion": "Verify scene name matches exactly and scene is added to Build Settings. Use SceneManager.GetSceneByName to check if scene exists.",
      "confidence": "high",
      "severity": "medium",
      "category": "scene_management",
      "framework": "unity",
      "tags": ["unity", "scenes", "loading"]
    },
    {
      "id": "unity_animation_parameter_not_found",
      "pattern": "Animator.*parameter.*not.*exist.*|AnimatorController.*parameter.*invalid.*",
      "type": "System.ArgumentException",
      "description": "Animation parameter not found in Animator Controller",
      "root_cause": "unity_animation_parameter_not_found",
      "suggestion": "Verify parameter name matches exactly in Animator Controller. Use Animator.HasState() to check parameter existence before accessing.",
      "confidence": "high",
      "severity": "low",
      "category": "animation",
      "framework": "unity",
      "tags": ["unity", "animation", "animator"]
    },
    {
      "id": "unity_audio_clip_null",
      "pattern": "AudioSource.*clip.*null.*|AudioClip.*not.*assigned.*|Audio.*source.*missing.*clip.*",
      "type": "System.NullReferenceException",
      "description": "AudioSource has no AudioClip assigned",
      "root_cause": "unity_audio_clip_null",
      "suggestion": "Assign AudioClip to AudioSource component in Inspector or via script. Check if clip is null before calling Play().",
      "confidence": "high",
      "severity": "low",
      "category": "audio",
      "framework": "unity",
      "tags": ["unity", "audio", "components"]
    },
    {
      "id": "unity_rigidbody_kinematic_force",
      "pattern": "Rigidbody.*kinematic.*force.*|AddForce.*kinematic.*rigidbody.*",
      "type": "System.InvalidOperationException",
      "description": "Attempting to apply force to kinematic Rigidbody",
      "root_cause": "unity_rigidbody_kinematic_force",
      "suggestion": "Set Rigidbody.isKinematic to false before applying forces, or use transform manipulation for kinematic bodies.",
      "confidence": "high",
      "severity": "low",
      "category": "physics",
      "framework": "unity",
      "tags": ["unity", "physics", "rigidbody"]
    },
    {
      "id": "unity_find_object_null",
      "pattern": "FindObjectOfType.*returned null.*|FindGameObjectWithTag.*null.*|GameObject.Find.*null.*",
      "type": "System.NullReferenceException",
      "description": "Find operation returned null - object not found in scene",
      "root_cause": "unity_find_object_null",
      "suggestion": "Check if object exists in scene before using Find methods. Consider using tags correctly or maintaining object references instead of searching.",
      "confidence": "medium",
      "severity": "medium",
      "category": "object_finding",
      "framework": "unity",
      "tags": ["unity", "finding", "scene-management"]
    },
    {
      "id": "unity_update_performance",
      "pattern": "Update.*performance.*|.*too many.*Update.*calls.*|Update.*expensive.*operation.*",
      "type": "PerformanceWarning",
      "description": "Expensive operations in Update method causing performance issues",
      "root_cause": "unity_update_performance",
      "suggestion": "Move expensive operations out of Update(). Use coroutines, FixedUpdate for physics, or timer-based intervals for heavy computations.",
      "confidence": "medium",
      "severity": "medium",
      "category": "performance",
      "framework": "unity",
      "tags": ["unity", "performance", "optimization"]
    },
    {
      "id": "unity_camera_null_reference",
      "pattern": "Camera.*null.*reference.*|Camera.main.*null.*|Camera.*component.*not.*found.*",
      "type": "System.NullReferenceException",
      "description": "Camera reference is null or Camera.main not found",
      "root_cause": "unity_camera_null_reference",
      "suggestion": "Ensure scene has a Camera with MainCamera tag, or find camera using Camera.current or FindObjectOfType<Camera>() with null checks.",
      "confidence": "high",
      "severity": "medium",
      "category": "camera",
      "framework": "unity",
      "tags": ["unity", "camera", "components"]
    },
    {
      "id": "unity_input_deprecated",
      "pattern": "Input.*GetKey.*deprecated.*|Input.*system.*deprecated.*warning.*",
      "type": "System.ObsoleteException",
      "description": "Using deprecated Input system methods",
      "root_cause": "unity_input_deprecated",
      "suggestion": "Migrate to new Input System package. Use InputAction and InputActionMap instead of Input.GetKey() methods.",
      "confidence": "high",
      "severity": "low",
      "category": "input",
      "framework": "unity",
      "tags": ["unity", "input", "deprecated"]
    },
    {
      "id": "unity_layer_mask_invalid",
      "pattern": "LayerMask.*invalid.*|Layer.*not.*exist.*|Raycast.*layer.*mask.*error.*",
      "type": "System.ArgumentException",
      "description": "Invalid layer mask or non-existent layer",
      "root_cause": "unity_layer_mask_invalid",
      "suggestion": "Verify layer exists in Tags and Layers settings. Use LayerMask.NameToLayer() to get layer index or check layer validity.",
      "confidence": "medium",
      "severity": "low",
      "category": "layers",
      "framework": "unity",
      "tags": ["unity", "layers", "physics"]
    },
    {
      "id": "unity_texture_null_reference",
      "pattern": "Texture.*null.*reference.*|Material.*texture.*null.*|Renderer.*material.*texture.*null.*",
      "type": "System.NullReferenceException",
      "description": "Texture reference is null in Material or Renderer",
      "root_cause": "unity_texture_null_reference",
      "suggestion": "Ensure texture is assigned to material. Check if texture loaded properly via Resources or Addressables before assignment.",
      "confidence": "high",
      "severity": "low",
      "category": "rendering",
      "framework": "unity",
      "tags": ["unity", "textures", "materials"]
    }
  ]
}