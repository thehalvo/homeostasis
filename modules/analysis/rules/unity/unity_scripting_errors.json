{
  "name": "Unity C# Scripting Errors",
  "description": "Rules for detecting and fixing Unity C# scripting specific errors",
  "version": "1.0.0",
  "rules": [
    {
      "id": "unity_monobehaviour_constructor",
      "pattern": "MonoBehaviour.*constructor.*not.*allowed.*|new.*MonoBehaviour.*invalid.*",
      "type": "System.InvalidOperationException",
      "description": "Attempting to use constructor with MonoBehaviour",
      "root_cause": "unity_monobehaviour_constructor",
      "suggestion": "Use Awake() instead of constructor for MonoBehaviour initialization. MonoBehaviours should only be created via AddComponent() or attached in Inspector.",
      "confidence": "high",
      "severity": "medium",
      "category": "monobehaviour",
      "framework": "unity",
      "tags": ["unity", "monobehaviour", "scripting", "initialization"]
    },
    {
      "id": "unity_serialized_field_private",
      "pattern": "SerializeField.*private.*field.*not.*serialized.*|Private.*field.*not.*showing.*inspector.*",
      "type": "SerializationWarning",
      "description": "Private field with SerializeField not being serialized",
      "root_cause": "unity_serialized_field_private",
      "suggestion": "Ensure private fields use [SerializeField] attribute to be visible in Inspector. Public fields are automatically serialized.",
      "confidence": "medium",
      "severity": "low",
      "category": "serialization",
      "framework": "unity",
      "tags": ["unity", "serialization", "inspector", "fields"]
    },
    {
      "id": "unity_awake_start_order",
      "pattern": "Awake.*Start.*execution.*order.*|Initialization.*order.*problem.*Unity.*",
      "type": "InitializationException",
      "description": "Dependency on execution order between Awake and Start methods",
      "root_cause": "unity_awake_start_order",
      "suggestion": "Use Awake() for internal initialization, Start() for external dependencies. Don't rely on execution order between different MonoBehaviours.",
      "confidence": "medium",
      "severity": "medium",
      "category": "initialization",
      "framework": "unity",
      "tags": ["unity", "awake", "start", "initialization"]
    },
    {
      "id": "unity_update_fixedupdate_confusion",
      "pattern": "Physics.*Update.*instead.*FixedUpdate.*|Movement.*Update.*should.*FixedUpdate.*",
      "type": "PerformanceWarning",
      "description": "Physics operations in Update instead of FixedUpdate",
      "root_cause": "unity_update_fixedupdate_confusion",
      "suggestion": "Use FixedUpdate() for physics operations (Rigidbody movement). Use Update() for input handling and non-physics updates.",
      "confidence": "medium",
      "severity": "medium",
      "category": "update_methods",
      "framework": "unity",
      "tags": ["unity", "update", "fixedupdate", "physics"]
    },
    {
      "id": "unity_static_reference_memory_leak",
      "pattern": "Static.*reference.*memory.*leak.*Unity.*|Static.*event.*not.*unsubscribed.*",
      "type": "MemoryLeak",
      "description": "Static references causing memory leaks in Unity",
      "root_cause": "unity_static_reference_memory_leak",
      "suggestion": "Avoid static references to MonoBehaviours. Unsubscribe from static events in OnDestroy(). Use singleton pattern carefully.",
      "confidence": "medium",
      "severity": "high",
      "category": "memory_management",
      "framework": "unity",
      "tags": ["unity", "static", "memory-leak", "events"]
    },
    {
      "id": "unity_invoke_string_performance",
      "pattern": "Invoke.*string.*performance.*|InvokeRepeating.*string.*slow.*",
      "type": "PerformanceWarning",
      "description": "Using string-based Invoke methods causing performance issues",
      "root_cause": "unity_invoke_string_performance",
      "suggestion": "Use coroutines or timer-based approaches instead of Invoke(string) for better performance. Consider using UnityEvents for decoupled method calls.",
      "confidence": "medium",
      "severity": "low",
      "category": "performance",
      "framework": "unity",
      "tags": ["unity", "invoke", "performance", "strings"]
    },
    {
      "id": "unity_sendmessage_deprecated",
      "pattern": "SendMessage.*deprecated.*|SendMessage.*performance.*bad.*",
      "type": "System.ObsoleteException",
      "description": "Using deprecated SendMessage methods",
      "root_cause": "unity_sendmessage_deprecated",
      "suggestion": "Replace SendMessage with direct method calls, UnityEvents, or C# events for better performance and type safety.",
      "confidence": "medium",
      "severity": "low",
      "category": "deprecated",
      "framework": "unity",
      "tags": ["unity", "sendmessage", "deprecated", "performance"]
    },
    {
      "id": "unity_transform_find_performance",
      "pattern": "Transform.Find.*performance.*|Find.*child.*expensive.*operation.*",
      "type": "PerformanceWarning",
      "description": "Using Transform.Find in performance-critical code",
      "root_cause": "unity_transform_find_performance",
      "suggestion": "Cache Transform references instead of using Find repeatedly. Use direct references assigned in Inspector when possible.",
      "confidence": "medium",
      "severity": "medium",
      "category": "performance",
      "framework": "unity",
      "tags": ["unity", "transform", "find", "performance"]
    },
    {
      "id": "unity_gameobject_tag_comparison",
      "pattern": "gameObject.tag.*==.*string.*|CompareTag.*not.*used.*performance.*",
      "type": "PerformanceWarning",
      "description": "Using string comparison for tags instead of CompareTag",
      "root_cause": "unity_gameobject_tag_comparison",
      "suggestion": "Use gameObject.CompareTag(string) instead of gameObject.tag == string for better performance and garbage collection.",
      "confidence": "high",
      "severity": "low",
      "category": "performance",
      "framework": "unity",
      "tags": ["unity", "tags", "performance", "comparison"]
    },
    {
      "id": "unity_vector3_new_allocation",
      "pattern": "new Vector3.*performance.*|Vector3.*allocation.*garbage.*",
      "type": "PerformanceWarning",
      "description": "Creating new Vector3 instances causing garbage collection",
      "root_cause": "unity_vector3_new_allocation",
      "suggestion": "Use Vector3.zero, Vector3.one, Vector3.up constants instead of new Vector3(). Reuse Vector3 variables when possible.",
      "confidence": "medium",
      "severity": "low",
      "category": "performance",
      "framework": "unity",
      "tags": ["unity", "vector3", "performance", "garbage-collection"]
    },
    {
      "id": "unity_string_concatenation_update",
      "pattern": "string.*concatenation.*Update.*|String.*\\+.*Update.*performance.*",
      "type": "PerformanceWarning",
      "description": "String concatenation in Update causing performance issues",
      "root_cause": "unity_string_concatenation_update",
      "suggestion": "Avoid string concatenation in Update(). Use StringBuilder for multiple concatenations or cache strings when possible.",
      "confidence": "medium",
      "severity": "medium",
      "category": "performance",
      "framework": "unity",
      "tags": ["unity", "strings", "performance", "update"]
    },
    {
      "id": "unity_lambda_closure_allocation",
      "pattern": "Lambda.*closure.*allocation.*|Anonymous.*method.*garbage.*Unity.*",
      "type": "PerformanceWarning",
      "description": "Lambda expressions creating closures and garbage",
      "root_cause": "unity_lambda_closure_allocation",
      "suggestion": "Avoid lambda expressions that capture local variables in performance-critical code. Use cached Action/Func delegates instead.",
      "confidence": "low",
      "severity": "low",
      "category": "performance",
      "framework": "unity",
      "tags": ["unity", "lambda", "closures", "garbage-collection"]
    },
    {
      "id": "unity_co2_manager_start_coroutine",
      "pattern": "StartCoroutine.*string.*deprecated.*|StartCoroutine.*method.*name.*string.*",
      "type": "System.ObsoleteException",
      "description": "Using deprecated string-based StartCoroutine",
      "root_cause": "unity_coroutine_string_deprecated",
      "suggestion": "Use StartCoroutine with method reference instead of string. This provides better performance and compile-time checking.",
      "confidence": "high",
      "severity": "low",
      "category": "deprecated",
      "framework": "unity",
      "tags": ["unity", "coroutines", "deprecated", "strings"]
    },
    {
      "id": "unity_ondestroy_cleanup_missing",
      "pattern": "OnDestroy.*cleanup.*missing.*|Event.*unsubscribe.*missing.*OnDestroy.*",
      "type": "MemoryLeak",
      "description": "Missing cleanup in OnDestroy causing memory leaks",
      "root_cause": "unity_ondestroy_cleanup_missing",
      "suggestion": "Implement proper cleanup in OnDestroy(): unsubscribe from events, stop coroutines, release resources.",
      "confidence": "medium",
      "severity": "high",
      "category": "memory_management",
      "framework": "unity",
      "tags": ["unity", "ondestroy", "cleanup", "memory-leak"]
    },
    {
      "id": "unity_camera_main_null_performance",
      "pattern": "Camera.main.*null.*frequent.*|Camera.main.*performance.*Update.*",
      "type": "PerformanceWarning",
      "description": "Frequent Camera.main calls causing performance issues",
      "root_cause": "unity_camera_main_performance",
      "suggestion": "Cache Camera.main reference in Start() instead of accessing it repeatedly. Camera.main uses FindObjectWithTag internally.",
      "confidence": "medium",
      "severity": "medium",
      "category": "performance",
      "framework": "unity",
      "tags": ["unity", "camera", "performance", "caching"]
    },
    {
      "id": "unity_resources_load_synchronous",
      "pattern": "Resources.Load.*main.*thread.*blocking.*|Resources.Load.*synchronous.*performance.*",
      "type": "PerformanceWarning",
      "description": "Synchronous Resources.Load blocking main thread",
      "root_cause": "unity_resources_load_synchronous",
      "suggestion": "Use Resources.LoadAsync for large assets. Consider using Addressable Assets system for better asset management.",
      "confidence": "medium",
      "severity": "medium",
      "category": "performance",
      "framework": "unity",
      "tags": ["unity", "resources", "loading", "async"]
    }
  ]
}