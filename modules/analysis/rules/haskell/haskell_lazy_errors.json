{
  "name": "Haskell Lazy Evaluation Errors",
  "description": "Rules for detecting Haskell lazy evaluation and strictness issues",
  "rules": [
    {
      "id": "haskell_infinite_loop",
      "pattern": "<<loop>>",
      "type": "RuntimeError",
      "description": "Infinite loop detected during evaluation",
      "root_cause": "haskell_lazy_error",
      "suggestion": "Check recursive definitions and termination conditions",
      "category": "haskell",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "haskell",
        "lazy",
        "recursion",
        "loop"
      ],
      "examples": [
        "<<loop>>",
        "program output shows <<loop>>"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "haskell_space_leak",
      "pattern": "space leak",
      "type": "MemoryError",
      "description": "Space leak due to lazy evaluation",
      "root_cause": "haskell_lazy_error",
      "suggestion": "Use strict evaluation or add strictness annotations",
      "category": "haskell",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "haskell",
        "lazy",
        "memory",
        "leak"
      ],
      "examples": [
        "space leak detected",
        "program exhibits space leak behavior"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "haskell_memory_leak",
      "pattern": "memory leak",
      "type": "MemoryError",
      "description": "Memory leak detected",
      "root_cause": "haskell_lazy_error",
      "suggestion": "Force evaluation with seq or deepseq",
      "category": "haskell",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "haskell",
        "lazy",
        "memory",
        "leak"
      ],
      "examples": [
        "memory leak detected",
        "program exhibits memory leak behavior"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "haskell_thunk_buildup",
      "pattern": "(thunk|CAF) buildup",
      "type": "MemoryError",
      "description": "Excessive thunk or CAF buildup",
      "root_cause": "haskell_lazy_error",
      "suggestion": "Add strictness to prevent thunk accumulation",
      "category": "haskell",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "haskell",
        "lazy",
        "thunk",
        "caf"
      ],
      "examples": [
        "thunk buildup detected",
        "CAF buildup causing memory issues"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "haskell_strict_field_error",
      "pattern": "Strict field .+ cannot contain unlifted types",
      "type": "TypeError",
      "description": "Strict field with incompatible type",
      "root_cause": "haskell_lazy_error",
      "suggestion": "Use appropriate type or remove strictness annotation",
      "category": "haskell",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "haskell",
        "strict",
        "field",
        "unlifted"
      ],
      "examples": [
        "Strict field 'x' cannot contain unlifted types",
        "Strict field with unboxed type is not allowed"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "haskell_bang_pattern",
      "pattern": "Bang pattern syntax .+ requires BangPatterns extension",
      "type": "SyntaxError",
      "description": "Bang pattern used without extension",
      "root_cause": "haskell_lazy_error",
      "suggestion": "Enable BangPatterns extension",
      "category": "haskell",
      "severity": "medium",
      "confidence": "high",
      "tags": [
        "haskell",
        "strict",
        "bang",
        "extension"
      ],
      "examples": [
        "Bang pattern syntax requires BangPatterns extension",
        "Bang pattern !x requires BangPatterns extension"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "haskell_strictness_error",
      "pattern": "forced .+ to evaluate to WHNF",
      "type": "RuntimeError",
      "description": "Forcing lazy value caused error",
      "root_cause": "haskell_lazy_error",
      "suggestion": "Check value before forcing evaluation",
      "category": "haskell",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "haskell",
        "strict",
        "force",
        "whnf"
      ],
      "examples": [
        "seq forced undefined to evaluate to WHNF",
        "forced thunk to evaluate to WHNF resulting in exception"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "haskell_strict_unboxed_field",
      "pattern": "Unboxed (tuples|types) .+ can only be used with GHC.Exts.Unboxed",
      "type": "TypeError",
      "description": "Unboxed types used incorrectly",
      "root_cause": "haskell_lazy_error",
      "suggestion": "Use appropriate imports or avoid unboxed types",
      "category": "haskell",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "haskell",
        "strict",
        "unboxed"
      ],
      "examples": [
        "Unboxed tuples can only be used with GHC.Exts.Unboxed",
        "Unboxed types require UnboxedTuples extension"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "haskell_stack_overflow",
      "pattern": "stack overflow",
      "type": "RuntimeError",
      "description": "Stack overflow due to excessive recursion or lazy evaluation",
      "root_cause": "haskell_lazy_error",
      "suggestion": "Add strictness or use tail recursion",
      "category": "haskell",
      "severity": "critical",
      "confidence": "high",
      "tags": [
        "haskell",
        "lazy",
        "stack",
        "recursion"
      ],
      "examples": [
        "stack overflow",
        "program exceeded the stack limit"
      ],
      "metadata": {},
      "criticality": "critical",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "haskell_lazy_pattern_matching",
      "pattern": "non-exhaustive patterns in .*",
      "type": "RuntimeError",
      "description": "Lazy evaluation led to non-exhaustive pattern match",
      "root_cause": "haskell_lazy_error",
      "suggestion": "Make pattern matches exhaustive or add guards",
      "category": "haskell",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "haskell",
        "lazy",
        "pattern",
        "match"
      ],
      "examples": [
        "non-exhaustive patterns in function",
        "non-exhaustive patterns in case expression"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "haskell_irrefutable_pattern",
      "pattern": "irrefutable pattern failed",
      "type": "RuntimeError",
      "description": "Lazy irrefutable pattern match failed",
      "root_cause": "haskell_lazy_error",
      "suggestion": "Replace irrefutable pattern with explicit pattern matching",
      "category": "haskell",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "haskell",
        "lazy",
        "pattern",
        "irrefutable"
      ],
      "examples": [
        "irrefutable pattern failed",
        "irrefutable pattern in let binding failed"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "haskell_bottom_value",
      "pattern": "(\\*\\*\\* )?Exception: (.*)undefined",
      "type": "RuntimeError",
      "description": "Lazy evaluation of undefined/bottom value",
      "root_cause": "haskell_lazy_error",
      "suggestion": "Remove undefined values or add exception handling",
      "category": "haskell",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "haskell",
        "lazy",
        "undefined",
        "bottom"
      ],
      "examples": [
        "Exception: Prelude.undefined",
        "Exception: <interactive>:1:1-9: undefined"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "haskell_deepseq_error",
      "pattern": "error evaluating (.*)with Control.DeepSeq.deepseq",
      "type": "RuntimeError",
      "description": "Error during strict evaluation with deepseq",
      "root_cause": "haskell_lazy_error",
      "suggestion": "Check data structure for undefined values before deepseq",
      "category": "haskell",
      "severity": "high",
      "confidence": "high",
      "tags": [
        "haskell",
        "lazy",
        "deepseq",
        "nf"
      ],
      "examples": [
        "error evaluating value with Control.DeepSeq.deepseq",
        "deepseq encountered undefined value"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "haskell_strict_pragma_error",
      "pattern": "STRICT pragma used without StrictData extension",
      "type": "SyntaxError",
      "description": "STRICT pragma used without enabling required extension",
      "root_cause": "haskell_lazy_error",
      "suggestion": "Enable StrictData language extension",
      "category": "haskell",
      "severity": "medium",
      "confidence": "high",
      "tags": [
        "haskell",
        "strict",
        "pragma",
        "extension"
      ],
      "examples": [
        "STRICT pragma used without StrictData extension"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "low",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    }
  ]
}