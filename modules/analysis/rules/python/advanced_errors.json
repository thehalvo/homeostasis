{
  "name": "Python Advanced Errors",
  "description": "Rules for detecting advanced Python errors including generators, context managers, and more",
  "rules": [
    {
      "id": "python_generator_return",
      "pattern": "generator.*return.*value|SyntaxError: 'return' with argument inside generator|can't use return.*in generator",
      "type": "GeneratorReturnError",
      "description": "Invalid return statement in generator (Python < 3.3)",
      "root_cause": "python_generator_return_value",
      "suggestion": "Use 'yield' to produce values. In Python 3.3+, 'return value' is allowed and sets StopIteration.value.",
      "category": "python",
      "severity": "medium",
      "confidence": "high",
      "tags": ["python", "generator", "yield", "return"],
      "examples": [
        "SyntaxError: 'return' with argument inside generator",
        "generator can't return a value"
      ],
      "metadata": {"python_version": "< 3.3"},
      "criticality": "medium",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "python_yield_outside_function",
      "pattern": "yield.*outside function|SyntaxError: 'yield' outside function|yield expression.*not in function",
      "type": "YieldOutsideFunction",
      "description": "Yield statement used outside of a function",
      "root_cause": "python_yield_scope_error",
      "suggestion": "Yield can only be used inside a function definition to create a generator.",
      "category": "python",
      "severity": "high",
      "confidence": "high",
      "tags": ["python", "generator", "yield", "syntax"],
      "examples": [
        "SyntaxError: 'yield' outside function",
        "yield expression used outside function"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "low",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "python_context_manager_error",
      "pattern": "__enter__.*not found|__exit__.*missing|object does not support.*context manager|with statement requires",
      "type": "ContextManagerError",
      "description": "Object used in 'with' statement doesn't implement context manager protocol",
      "root_cause": "python_context_manager_protocol",
      "suggestion": "Implement __enter__ and __exit__ methods or use contextlib decorators like @contextmanager.",
      "category": "python",
      "severity": "high",
      "confidence": "high",
      "tags": ["python", "context-manager", "with", "protocol"],
      "examples": [
        "__enter__ method not found",
        "object does not support the context manager protocol"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "python_circular_import",
      "pattern": "cannot import name.*circular import|ImportError.*partially initialized module|circular dependency",
      "type": "CircularImportError",
      "description": "Circular import dependency detected",
      "root_cause": "python_circular_import",
      "suggestion": "Restructure imports to avoid cycles. Use import inside functions, or refactor shared code to separate module.",
      "category": "python",
      "severity": "high",
      "confidence": "high",
      "tags": ["python", "import", "circular", "module"],
      "examples": [
        "cannot import name 'x' from partially initialized module",
        "ImportError: circular import detected"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "python_recursion_limit",
      "pattern": "RecursionError|maximum recursion depth exceeded|recursion limit exceeded",
      "type": "RecursionError",
      "description": "Maximum recursion depth exceeded",
      "root_cause": "python_recursion_limit",
      "suggestion": "Check for infinite recursion. Add base case to recursive functions. Increase limit with sys.setrecursionlimit() if needed.",
      "category": "python",
      "severity": "high",
      "confidence": "high",
      "tags": ["python", "recursion", "stack", "limit"],
      "examples": [
        "RecursionError: maximum recursion depth exceeded",
        "maximum recursion depth exceeded in comparison"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "python_unicode_error",
      "pattern": "UnicodeDecodeError|UnicodeEncodeError|UnicodeError|codec can't decode|codec can't encode",
      "type": "UnicodeError",
      "description": "Unicode encoding/decoding error",
      "root_cause": "python_unicode_codec_error",
      "suggestion": "Specify correct encoding (e.g., 'utf-8'). Use errors='ignore' or 'replace' to handle invalid characters.",
      "category": "python",
      "severity": "medium",
      "confidence": "high",
      "tags": ["python", "unicode", "encoding", "string"],
      "examples": [
        "UnicodeDecodeError: 'utf-8' codec can't decode byte",
        "UnicodeEncodeError: 'ascii' codec can't encode character"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "python_memory_error",
      "pattern": "MemoryError|cannot allocate memory|out of memory",
      "type": "MemoryError",
      "description": "System out of memory",
      "root_cause": "python_memory_exhausted",
      "suggestion": "Reduce memory usage by processing data in chunks, using generators, or optimizing data structures.",
      "category": "python",
      "severity": "critical",
      "confidence": "high",
      "tags": ["python", "memory", "allocation", "resources"],
      "examples": [
        "MemoryError",
        "cannot allocate memory"
      ],
      "metadata": {},
      "criticality": "critical",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "python_pickle_error",
      "pattern": "pickle\\.PicklingError|can't pickle|PickleError|not picklable",
      "type": "PickleError",
      "description": "Object cannot be pickled",
      "root_cause": "python_pickle_error",
      "suggestion": "Some objects (lambdas, local functions, certain types) can't be pickled. Use dill for more support or implement __getstate__/__setstate__.",
      "category": "python",
      "severity": "medium",
      "confidence": "high",
      "tags": ["python", "pickle", "serialization", "persistence"],
      "examples": [
        "PicklingError: Can't pickle <type 'function'>",
        "can't pickle lambda objects"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "python_weak_reference_error",
      "pattern": "cannot create weak reference|TypeError.*weak reference|weakref.*not supported",
      "type": "WeakReferenceError",
      "description": "Cannot create weak reference to object",
      "root_cause": "python_weakref_unsupported",
      "suggestion": "Not all objects support weak references (e.g., list, dict). Use weakref.proxy() or check weakref.ref() support.",
      "category": "python",
      "severity": "medium",
      "confidence": "high",
      "tags": ["python", "weakref", "reference", "memory"],
      "examples": [
        "TypeError: cannot create weak reference to 'list' object",
        "weakref not supported for this type"
      ],
      "metadata": {},
      "criticality": "medium",
      "complexity": "moderate",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    },
    {
      "id": "python_multiprocessing_pickle",
      "pattern": "multiprocessing.*pickle|can't pickle.*multiprocessing|pool.*pickle error",
      "type": "MultiprocessingPickleError",
      "description": "Multiprocessing pickling error",
      "root_cause": "python_multiprocessing_pickle",
      "suggestion": "Ensure all objects passed to multiprocessing are picklable. Define functions at module level, not as lambdas or nested functions.",
      "category": "python",
      "severity": "high",
      "confidence": "high",
      "tags": ["python", "multiprocessing", "pickle", "parallel"],
      "examples": [
        "multiprocessing: can't pickle function",
        "Pool pickle error"
      ],
      "metadata": {},
      "criticality": "high",
      "complexity": "high",
      "reliability": "high",
      "source": "built_in",
      "rule_type": "error_detection",
      "dependencies": []
    }
  ]
}