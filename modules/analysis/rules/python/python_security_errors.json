{
  "name": "Python Security Vulnerability Patterns",
  "description": "Security vulnerability patterns for Python applications",
  "version": "1.0.0",
  "rules": [
    {
      "id": "python_security_sql_injection",
      "pattern": "SQL injection|unsanitized.*query|string formatting.*SQL|%s.*SELECT|format.*INSERT|f-string.*DELETE",
      "type": "SecurityError",
      "description": "Potential SQL injection vulnerability detected",
      "root_cause": "sql_injection",
      "suggestion": "Use parameterized queries with placeholders (?), never concatenate or format user input directly into SQL queries",
      "category": "python",
      "subcategory": "injection",
      "severity": "critical",
      "confidence": "high",
      "tags": ["security", "sql", "injection"]
    },
    {
      "id": "python_security_command_injection",
      "pattern": "os\\.system.*user|subprocess.*shell=True.*input|exec.*request|eval.*user_input",
      "type": "SecurityError",
      "description": "Potential command injection vulnerability",
      "root_cause": "command_injection",
      "suggestion": "Use subprocess with shell=False and pass arguments as list, avoid os.system(), never use eval() with user input",
      "category": "python",
      "subcategory": "injection",
      "severity": "critical",
      "confidence": "high",
      "tags": ["security", "command", "injection"]
    },
    {
      "id": "python_security_path_traversal",
      "pattern": "path traversal|\\.\\./|directory traversal|open.*\\.\\.|os\\.path\\.join.*\\.\\.\\.",
      "type": "SecurityError",
      "description": "Path traversal vulnerability detected",
      "root_cause": "path_traversal",
      "suggestion": "Validate and sanitize file paths, use os.path.abspath() and check if path starts with allowed directory",
      "category": "python",
      "subcategory": "file_access",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "path", "traversal"]
    },
    {
      "id": "python_security_pickle_deserialization",
      "pattern": "pickle\\.loads.*untrusted|unpickle.*user.*data|pickle.*from.*network",
      "type": "SecurityError",
      "description": "Unsafe pickle deserialization of untrusted data",
      "root_cause": "unsafe_deserialization",
      "suggestion": "Never unpickle data from untrusted sources, use JSON or other safe formats for data exchange",
      "category": "python",
      "subcategory": "deserialization",
      "severity": "critical",
      "confidence": "high",
      "tags": ["security", "pickle", "deserialization"]
    },
    {
      "id": "python_security_yaml_load",
      "pattern": "yaml\\.load\\(|yaml\\.unsafe_load|FullLoader.*untrusted",
      "type": "SecurityError",
      "description": "Unsafe YAML loading allowing arbitrary code execution",
      "root_cause": "unsafe_yaml",
      "suggestion": "Use yaml.safe_load() instead of yaml.load(), never use FullLoader with untrusted input",
      "category": "python",
      "subcategory": "deserialization",
      "severity": "critical",
      "confidence": "high",
      "tags": ["security", "yaml", "deserialization"]
    },
    {
      "id": "python_security_weak_random",
      "pattern": "random\\.(random|randint|choice).*password|random\\..*token|random\\..*secret",
      "type": "SecurityError",
      "description": "Using weak random number generator for security-sensitive operations",
      "root_cause": "weak_randomness",
      "suggestion": "Use secrets module for cryptographic randomness, not random module which is predictable",
      "category": "python",
      "subcategory": "cryptography",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "random", "cryptography"]
    },
    {
      "id": "python_security_hardcoded_secret",
      "pattern": "password\\s*=\\s*[\"'][^\"']+[\"']|api_key\\s*=\\s*[\"'][^\"']+[\"']|secret\\s*=\\s*[\"'][^\"']+[\"']",
      "type": "SecurityError",
      "description": "Hardcoded secrets or credentials detected",
      "root_cause": "hardcoded_secrets",
      "suggestion": "Use environment variables or secure secret management systems, never hardcode credentials in source code",
      "category": "python",
      "subcategory": "secrets",
      "severity": "critical",
      "confidence": "medium",
      "tags": ["security", "secrets", "credentials"]
    },
    {
      "id": "python_security_weak_hash",
      "pattern": "hashlib\\.(md5|sha1)\\(|MD5|SHA1.*password",
      "type": "SecurityError",
      "description": "Using weak hashing algorithm for security purposes",
      "root_cause": "weak_cryptography",
      "suggestion": "Use strong hashing algorithms like SHA-256, bcrypt, scrypt, or argon2 for passwords",
      "category": "python",
      "subcategory": "cryptography",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "hash", "cryptography"]
    },
    {
      "id": "python_security_insecure_ssl",
      "pattern": "verify=False|ssl\\._create_unverified_context|CERT_NONE|check_hostname=False",
      "type": "SecurityError",
      "description": "Disabled SSL/TLS certificate verification",
      "root_cause": "insecure_ssl",
      "suggestion": "Always verify SSL certificates in production, use proper certificate validation",
      "category": "python",
      "subcategory": "network",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "ssl", "tls"]
    },
    {
      "id": "python_security_xxe",
      "pattern": "XMLParser.*resolve_entities=True|etree\\.parse.*external.*entity|xml.*DOCTYPE.*ENTITY",
      "type": "SecurityError",
      "description": "XML External Entity (XXE) vulnerability",
      "root_cause": "xxe_vulnerability",
      "suggestion": "Disable external entity resolution, use defusedxml library for safe XML parsing",
      "category": "python",
      "subcategory": "xml",
      "severity": "high",
      "confidence": "high",
      "tags": ["security", "xxe", "xml"]
    },
    {
      "id": "python_security_regex_dos",
      "pattern": "re\\.compile.*\\(\\+\\+|re\\.compile.*\\{\\d+,\\}\\{\\d+,|catastrophic backtracking",
      "type": "SecurityError",
      "description": "Regular expression vulnerable to ReDoS (Regular Expression Denial of Service)",
      "root_cause": "regex_dos",
      "suggestion": "Avoid nested quantifiers and exponential time regex patterns, set timeout for regex operations",
      "category": "python",
      "subcategory": "dos",
      "severity": "medium",
      "confidence": "medium",
      "tags": ["security", "regex", "dos"]
    },
    {
      "id": "python_security_open_redirect",
      "pattern": "redirect\\(request\\..*url|return redirect\\(user_input|redirect.*unvalidated.*url",
      "type": "SecurityError",
      "description": "Open redirect vulnerability allowing URL redirection to attacker sites",
      "root_cause": "open_redirect",
      "suggestion": "Validate redirect URLs against whitelist, use relative URLs, or validate URL domain",
      "category": "python",
      "subcategory": "redirect",
      "severity": "medium",
      "confidence": "medium",
      "tags": ["security", "redirect", "validation"]
    },
    {
      "id": "python_security_timing_attack",
      "pattern": "==.*password|==.*secret|simple string comparison.*auth",
      "type": "SecurityError",
      "description": "Potential timing attack vulnerability in string comparison",
      "root_cause": "timing_attack",
      "suggestion": "Use hmac.compare_digest() or secrets.compare_digest() for constant-time comparison",
      "category": "python",
      "subcategory": "timing",
      "severity": "medium",
      "confidence": "low",
      "tags": ["security", "timing", "comparison"]
    },
    {
      "id": "python_security_insecure_temp_file",
      "pattern": "tempfile\\.mktemp\\(|/tmp/.*predictable|temp.*file.*777",
      "type": "SecurityError",
      "description": "Insecure temporary file creation",
      "root_cause": "insecure_temp_file",
      "suggestion": "Use tempfile.mkstemp() or tempfile.TemporaryFile() for secure temporary file creation",
      "category": "python",
      "subcategory": "file_access",
      "severity": "medium",
      "confidence": "high",
      "tags": ["security", "tempfile", "race_condition"]
    },
    {
      "id": "python_security_mass_assignment",
      "pattern": "__dict__\\.update.*request|setattr.*loop.*user_input|bulk.*update.*unfiltered",
      "type": "SecurityError",
      "description": "Mass assignment vulnerability allowing unauthorized attribute modification",
      "root_cause": "mass_assignment",
      "suggestion": "Explicitly whitelist allowed attributes, never directly update __dict__ with user input",
      "category": "python",
      "subcategory": "assignment",
      "severity": "high",
      "confidence": "medium",
      "tags": ["security", "mass_assignment", "validation"]
    }
  ]
}