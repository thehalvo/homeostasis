{
  "name": "Elixir Common Errors",
  "rules": [
    {
      "id": "elixir_argument_error",
      "pattern": "\\*\\* \\(ArgumentError\\) (.*)",
      "type": "ArgumentError",
      "description": "Invalid argument provided to a function",
      "root_cause": "elixir_argument_error",
      "suggestion": "Check the function documentation to ensure you're passing the correct arguments. Validate inputs before passing them to functions.",
      "confidence": "high",
      "severity": "medium",
      "category": "core",
      "framework": "elixir"
    },
    {
      "id": "elixir_function_clause_error",
      "pattern": "\\*\\* \\(FunctionClauseError\\) (.*?)\\n.*?([^:]+\\.ex:\\d+)(.*)",
      "type": "FunctionClauseError",
      "description": "No function clause matched the provided arguments",
      "root_cause": "elixir_function_clause_error",
      "suggestion": "Check the function's pattern matching clauses. Add additional clauses to handle all possible input patterns, or validate inputs before calling the function.",
      "confidence": "high",
      "severity": "medium",
      "category": "guard",
      "framework": "elixir"
    },
    {
      "id": "elixir_undefined_function_error",
      "pattern": "\\*\\* \\(UndefinedFunctionError\\) function ([^.]+)\\.([^/]+)/(\\d+) is undefined.*",
      "type": "UndefinedFunctionError",
      "description": "Called a function that doesn't exist",
      "root_cause": "elixir_undefined_function_error",
      "suggestion": "Check function name and arity. Ensure the module is correctly imported or required. Check for typos in function names.",
      "confidence": "high",
      "severity": "medium",
      "category": "core",
      "framework": "elixir"
    },
    {
      "id": "elixir_key_error",
      "pattern": "\\*\\* \\(KeyError\\) key (.*?) not found in: (.*)",
      "type": "KeyError",
      "description": "Tried to access a key that doesn't exist in a map or keyword list",
      "root_cause": "elixir_key_error",
      "suggestion": "Use Map.get/3 with a default value, or pattern match with the `%{key: value} = map` syntax with a guard clause. For keyword lists, use Keyword.get/3.",
      "confidence": "high",
      "severity": "medium",
      "category": "core",
      "framework": "elixir"
    },
    {
      "id": "elixir_case_clause_error",
      "pattern": "\\*\\* \\(CaseClauseError\\) no case clause matching: (.*)",
      "type": "CaseClauseError",
      "description": "None of the patterns in a case expression matched the value",
      "root_cause": "elixir_case_clause_error",
      "suggestion": "Add a catch-all clause to your case statement using the underscore pattern (_). Alternatively, ensure the value you're matching has the expected structure.",
      "confidence": "high",
      "severity": "medium",
      "category": "guard",
      "framework": "elixir"
    },
    {
      "id": "elixir_match_error",
      "pattern": "\\*\\* \\(MatchError\\) no match of right hand side value: (.*)",
      "type": "MatchError",
      "description": "Pattern match failed",
      "root_cause": "elixir_match_error",
      "suggestion": "Check the pattern match expression and ensure the data structure matches the expected pattern. Consider using case statements with multiple pattern clauses or adding guard clauses.",
      "confidence": "high",
      "severity": "medium",
      "category": "guard",
      "framework": "elixir"
    },
    {
      "id": "elixir_bad_map_error",
      "pattern": "\\*\\* \\(BadMapError\\) (.*)",
      "type": "BadMapError",
      "description": "Tried to use a map operation on a value that isn't a map",
      "root_cause": "elixir_bad_map_error",
      "suggestion": "Check the value type before using map operations. Use pattern matching or the `is_map/1` guard function to verify the value is a map.",
      "confidence": "high",
      "severity": "medium",
      "category": "core",
      "framework": "elixir"
    },
    {
      "id": "elixir_bad_arity_error",
      "pattern": "\\*\\* \\(BadArityError\\) (.*)",
      "type": "BadArityError",
      "description": "Called a function with the wrong number of arguments",
      "root_cause": "elixir_bad_arity_error",
      "suggestion": "Check the function's documentation for the correct number of arguments. Ensure you're passing the expected number of arguments.",
      "confidence": "high",
      "severity": "medium",
      "category": "core",
      "framework": "elixir"
    },
    {
      "id": "elixir_arithmetic_error",
      "pattern": "\\*\\* \\(ArithmeticError\\) (.*)",
      "type": "ArithmeticError",
      "description": "Error during an arithmetic operation",
      "root_cause": "elixir_arithmetic_error",
      "suggestion": "Check for division by zero or other invalid arithmetic operations. Validate inputs to arithmetic functions.",
      "confidence": "high",
      "severity": "medium",
      "category": "core",
      "framework": "elixir"
    },
    {
      "id": "elixir_file_error",
      "pattern": "\\*\\* \\(File\\.Error\\) (.*?): (.*)",
      "type": "File.Error",
      "description": "File system operation failed",
      "root_cause": "elixir_file_error",
      "suggestion": "Check file paths and permissions. Ensure the file exists and the application has the necessary permissions. Use File.exists?/1 before trying to open files.",
      "confidence": "high",
      "severity": "medium",
      "category": "io",
      "framework": "elixir"
    },
    {
      "id": "elixir_protocol_undefined_error",
      "pattern": "\\*\\* \\(Protocol\\.UndefinedError\\) protocol (.*?) not implemented for (.*)",
      "type": "Protocol.UndefinedError",
      "description": "Tried to use a protocol with a data type that doesn't implement it",
      "root_cause": "elixir_protocol_undefined_error",
      "suggestion": "Implement the protocol for the given data type, or ensure you're only using the protocol with supported types. Check the value's type before calling protocol functions.",
      "confidence": "high",
      "severity": "medium",
      "category": "runtime",
      "framework": "elixir"
    },
    {
      "id": "elixir_enum_empty_error",
      "pattern": "\\*\\* \\(Enum\\.EmptyError\\) (.*)",
      "type": "Enum.EmptyError",
      "description": "Called an Enum function that doesn't work on empty collections",
      "root_cause": "elixir_enum_empty_error",
      "suggestion": "Check if the collection is empty before using functions like Enum.max/1 or Enum.min/1. Use Enum.count/1 > 0 or Enum.empty?/1 to check for emptiness.",
      "confidence": "high",
      "severity": "medium",
      "category": "core",
      "framework": "elixir"
    },
    {
      "id": "elixir_argument_error_atom",
      "pattern": "\\*\\* \\(ArgumentError\\) argument error.?\\n.*?:erlang\\.atom_to_binary\\((.*?)\\)",
      "type": "ArgumentError",
      "description": "Attempted to convert a non-atom to a binary using atom_to_binary/1",
      "root_cause": "elixir_argument_error_atom",
      "suggestion": "Check that you're passing an atom to functions like Atom.to_string/1. Use is_atom/1 to validate the input type.",
      "confidence": "high",
      "severity": "medium",
      "category": "core",
      "framework": "elixir"
    },
    {
      "id": "elixir_badarg_error",
      "pattern": "\\*\\* \\(ArgumentError\\) argument error.?\\n.*?:erlang\\.(.*?)\\(",
      "type": "ArgumentError",
      "description": "Invalid argument passed to an Erlang function",
      "root_cause": "elixir_badarg_error",
      "suggestion": "Check the arguments you're passing to Erlang functions. Validate inputs or use the Elixir wrappers when available.",
      "confidence": "high",
      "severity": "medium",
      "category": "beam",
      "framework": "elixir"
    },
    {
      "id": "elixir_string_error",
      "pattern": "\\*\\* \\(String\\.([a-zA-Z]+)Error\\) (.*)",
      "type": "String.Error",
      "description": "Error in string operation",
      "root_cause": "elixir_string_error",
      "suggestion": "Check string encoding and input validity. Ensure you're working with valid UTF-8 strings when using String functions.",
      "confidence": "high",
      "severity": "medium",
      "category": "core",
      "framework": "elixir"
    },
    {
      "id": "elixir_with_clause_error",
      "pattern": "\\*\\* \\(WithClauseError\\) no with clause matching: (.*)",
      "type": "WithClauseError",
      "description": "No matching else clause in a with expression",
      "root_cause": "elixir_with_clause_error",
      "suggestion": "Add a catch-all clause in the else block of your with expression. Consider all possible error patterns that could be returned from steps in the with expression.",
      "confidence": "high",
      "severity": "medium",
      "category": "guard",
      "framework": "elixir"
    },
    {
      "id": "elixir_badfun_error",
      "pattern": "\\*\\* \\(BadFunctionError\\) (.*)",
      "type": "BadFunctionError",
      "description": "Called a value that is not a function",
      "root_cause": "elixir_badfun_error",
      "suggestion": "Verify that the variable you're calling is actually a function. Check for typos or scope issues that might cause the variable to hold a non-function value.",
      "confidence": "high",
      "severity": "medium",
      "category": "core",
      "framework": "elixir"
    },
    {
      "id": "elixir_badmatch_error_map",
      "pattern": "\\*\\* \\(MatchError\\) no match of right hand side value: (nil|\\[\\]|%\\{\\})",
      "type": "MatchError",
      "description": "Failed to match an empty value against a non-empty pattern",
      "root_cause": "elixir_badmatch_error_empty",
      "suggestion": "Check if the value could be empty (nil, [], or %{}) and handle that case separately. Consider using case or with to handle multiple possible patterns.",
      "confidence": "high",
      "severity": "medium",
      "category": "guard",
      "framework": "elixir"
    },
    {
      "id": "elixir_undefined_behaviour_error",
      "pattern": "\\*\\* \\(UndefinedFunctionError\\) (.*?)@behaviour ([^\\n]+)",
      "type": "UndefinedFunctionError",
      "description": "Missing implementation of a required behaviour callback",
      "root_cause": "elixir_undefined_behaviour_error",
      "suggestion": "Implement all the required callback functions defined in the behaviour. Check the behaviour documentation to see which functions are required.",
      "confidence": "high",
      "severity": "medium",
      "category": "core",
      "framework": "elixir"
    },
    {
      "id": "elixir_code_error",
      "pattern": "\\*\\* \\(Code\\.LoadError\\) (.*)",
      "type": "Code.LoadError",
      "description": "Failed to load or compile a module",
      "root_cause": "elixir_code_error",
      "suggestion": "Check that the file exists and has the correct module name. Look for syntax errors in the file.",
      "confidence": "high",
      "severity": "high",
      "category": "runtime",
      "framework": "elixir"
    }
  ]
}