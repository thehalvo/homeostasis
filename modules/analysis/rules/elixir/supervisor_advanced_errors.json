{
  "version": "1.0.0",
  "description": "Advanced Elixir Supervisor error detection rules",
  "rules": [
    {
      "id": "elixir_supervisor_rest_for_one_cascade",
      "category": "supervisor",
      "type": "strategy",
      "pattern": "rest_for_one strategy.*cascading restarts|siblings restarted unexpectedly|rest_for_one restart storm",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "high",
      "suggestion": "With rest_for_one, ensure child order reflects dependencies. Consider one_for_one if independent",
      "root_cause": "elixir_supervisor_rest_for_one",
      "tags": ["elixir", "supervisor", "strategy", "rest_for_one"]
    },
    {
      "id": "elixir_supervisor_simple_one_for_one_deprecated",
      "category": "supervisor",
      "type": "deprecation",
      "pattern": "simple_one_for_one is deprecated|use DynamicSupervisor instead",
      "confidence": "high",
      "reliability": "high",
      "severity": "low",
      "suggestion": "Replace simple_one_for_one with DynamicSupervisor for dynamic children",
      "root_cause": "elixir_supervisor_deprecated_strategy",
      "tags": ["elixir", "supervisor", "deprecated", "simple_one_for_one"]
    },
    {
      "id": "elixir_supervisor_start_child_error",
      "category": "supervisor",
      "type": "dynamic_child",
      "pattern": "Supervisor.start_child.*failed|{:error, _} from start_child|child spec not valid for start_child",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Ensure child spec is valid and supervisor supports dynamic children",
      "root_cause": "elixir_supervisor_start_child_failed",
      "tags": ["elixir", "supervisor", "start_child", "dynamic"]
    },
    {
      "id": "elixir_supervisor_terminate_child_error",
      "category": "supervisor",
      "type": "termination",
      "pattern": "Supervisor.terminate_child.*failed|child refuses to terminate|shutdown timeout exceeded",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Ensure child processes handle shutdown properly within shutdown timeout",
      "root_cause": "elixir_supervisor_terminate_child",
      "tags": ["elixir", "supervisor", "terminate", "shutdown"]
    },
    {
      "id": "elixir_supervisor_circular_dependency",
      "category": "supervisor",
      "type": "dependency",
      "pattern": "circular dependency in supervision tree|supervisor waiting for child that waits for supervisor",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "critical",
      "suggestion": "Review supervision tree structure to eliminate circular dependencies",
      "root_cause": "elixir_supervisor_circular_dep",
      "tags": ["elixir", "supervisor", "dependency", "circular"]
    },
    {
      "id": "elixir_supervisor_init_timeout",
      "category": "supervisor",
      "type": "initialization",
      "pattern": "supervisor init timeout|failed to start in time|supervision tree initialization timeout",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Ensure supervisor init/1 returns quickly. Move slow operations to child processes",
      "root_cause": "elixir_supervisor_init_slow",
      "tags": ["elixir", "supervisor", "init", "timeout"]
    },
    {
      "id": "elixir_supervisor_invalid_shutdown_value",
      "category": "supervisor",
      "type": "child_spec",
      "pattern": "invalid shutdown value|shutdown must be timeout or :brutal_kill|bad child spec shutdown",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Use integer timeout, :infinity, or :brutal_kill for shutdown in child spec",
      "root_cause": "elixir_supervisor_bad_shutdown",
      "tags": ["elixir", "supervisor", "shutdown", "child_spec"]
    },
    {
      "id": "elixir_supervisor_transient_child_not_restarted",
      "category": "supervisor",
      "type": "restart_type",
      "pattern": "transient child.*not restarted|expected restart.*transient|transient restart logic failed",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Transient children restart only on abnormal termination. Use permanent for always restart",
      "root_cause": "elixir_supervisor_transient_restart",
      "tags": ["elixir", "supervisor", "transient", "restart"]
    },
    {
      "id": "elixir_supervisor_temporary_child_restarted",
      "category": "supervisor",
      "type": "restart_type",
      "pattern": "temporary child.*restarted|temporary should not restart|unexpected restart of temporary",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "low",
      "suggestion": "Temporary children should never restart. Check restart strategy configuration",
      "root_cause": "elixir_supervisor_temporary_restart",
      "tags": ["elixir", "supervisor", "temporary", "restart"]
    },
    {
      "id": "elixir_supervisor_max_seconds_max_restarts",
      "category": "supervisor",
      "type": "restart_intensity",
      "pattern": "max_restarts.*max_seconds.*reached|too many restarts|supervisor shut down due to restart intensity",
      "confidence": "high",
      "reliability": "high",
      "severity": "critical",
      "suggestion": "Adjust max_restarts and max_seconds or fix the root cause of crashes",
      "root_cause": "elixir_supervisor_restart_intensity",
      "tags": ["elixir", "supervisor", "restart", "intensity"]
    },
    {
      "id": "elixir_supervisor_child_order_dependency",
      "category": "supervisor",
      "type": "ordering",
      "pattern": "child started before dependency|initialization order problem|dependent child failed.*not started yet",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "high",
      "suggestion": "Children start in order defined. Place dependencies before dependents",
      "root_cause": "elixir_supervisor_child_order",
      "tags": ["elixir", "supervisor", "order", "dependency"]
    },
    {
      "id": "elixir_supervisor_dynamic_child_spec_fun",
      "category": "supervisor",
      "type": "child_spec",
      "pattern": "child_spec.*function.*failed|{:error, _} from child_spec function|dynamic child spec error",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Ensure child spec functions return valid specs: {module, args} or map",
      "root_cause": "elixir_supervisor_spec_function",
      "tags": ["elixir", "supervisor", "child_spec", "function"]
    },
    {
      "id": "elixir_supervisor_which_children_timeout",
      "category": "supervisor",
      "type": "introspection",
      "pattern": "Supervisor.which_children timeout|failed to get children list|supervisor busy",
      "confidence": "low",
      "reliability": "low",
      "severity": "low",
      "suggestion": "which_children may timeout under load. Consider alternative monitoring",
      "root_cause": "elixir_supervisor_which_children",
      "tags": ["elixir", "supervisor", "introspection", "timeout"]
    },
    {
      "id": "elixir_supervisor_shutdown_timeout",
      "category": "supervisor",
      "type": "shutdown",
      "pattern": "supervisor shutdown timeout|failed to stop children in time|brutal kill after timeout",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Increase shutdown timeout or ensure children stop gracefully",
      "root_cause": "elixir_supervisor_shutdown_slow",
      "tags": ["elixir", "supervisor", "shutdown", "timeout"]
    },
    {
      "id": "elixir_supervisor_restart_child_not_found",
      "category": "supervisor",
      "type": "restart",
      "pattern": "Supervisor.restart_child.*not found|no child with id|restart_child {:error, :not_found}",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Ensure child exists and use correct child id for restart_child",
      "root_cause": "elixir_supervisor_child_not_found",
      "tags": ["elixir", "supervisor", "restart", "not_found"]
    }
  ]
}