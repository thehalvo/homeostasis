{
  "version": "1.0.0",
  "description": "Advanced Elixir GenServer error detection rules",
  "rules": [
    {
      "id": "elixir_genserver_call_timeout",
      "category": "genserver",
      "type": "call_timeout",
      "pattern": "GenServer .* terminating.*Call timeout|exited in :gen_server.call.*timeout|GenServer call timed out after",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Increase timeout in GenServer.call(server, msg, timeout) or optimize handle_call/3 implementation",
      "root_cause": "elixir_genserver_call_timeout",
      "tags": [
        "elixir",
        "genserver",
        "timeout",
        "call"
      ],
      "description": "Genserver Call Timeout"
    },
    {
      "id": "elixir_genserver_reply_format_error",
      "category": "genserver",
      "type": "reply_format",
      "pattern": "bad return value from handle_call|{:reply, _, _} expected|invalid reply tuple",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "handle_call/3 must return {:reply, reply, state} or {:noreply, state} with GenServer.reply/2",
      "root_cause": "elixir_genserver_bad_reply",
      "tags": [
        "elixir",
        "genserver",
        "reply",
        "format"
      ],
      "description": "Genserver Reply Format"
    },
    {
      "id": "elixir_genserver_cast_state_corruption",
      "category": "genserver",
      "type": "cast_error",
      "pattern": "state corrupted in handle_cast|handle_cast returned invalid state|{:noreply, _} expected",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "high",
      "suggestion": "handle_cast/2 must return {:noreply, new_state} or {:stop, reason, state}",
      "root_cause": "elixir_genserver_cast_state",
      "tags": [
        "elixir",
        "genserver",
        "cast",
        "state"
      ],
      "description": "Genserver Cast State Corruption"
    },
    {
      "id": "elixir_genserver_unexpected_message",
      "category": "genserver",
      "type": "handle_info",
      "pattern": "undefined handle_info.*GenServer|unexpected message in GenServer|no handle_info/2 clause",
      "confidence": "high",
      "reliability": "high",
      "severity": "medium",
      "suggestion": "Implement handle_info/2 to handle unexpected messages or add catch-all clause",
      "root_cause": "elixir_genserver_unhandled_info",
      "tags": [
        "elixir",
        "genserver",
        "handle_info",
        "message"
      ],
      "description": "Genserver Unexpected Message"
    },
    {
      "id": "elixir_genserver_mailbox_overflow",
      "category": "genserver",
      "type": "mailbox",
      "pattern": "process mailbox growing|message queue length exceeded|GenServer overwhelmed with messages",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "critical",
      "suggestion": "Implement backpressure, use GenStage, or process messages in batches",
      "root_cause": "elixir_genserver_mailbox_overflow",
      "tags": [
        "elixir",
        "genserver",
        "mailbox",
        "overflow"
      ],
      "description": "Genserver Mailbox Overflow"
    },
    {
      "id": "elixir_genserver_init_failure",
      "category": "genserver",
      "type": "initialization",
      "pattern": "GenServer .* failed to start|bad return value from init|{:ok, _} expected from init",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "init/1 must return {:ok, state}, {:ok, state, options}, or {:stop, reason}",
      "root_cause": "elixir_genserver_init_error",
      "tags": [
        "elixir",
        "genserver",
        "init",
        "start"
      ],
      "description": "Genserver Init Failure"
    },
    {
      "id": "elixir_genserver_name_conflict",
      "category": "genserver",
      "type": "registration",
      "pattern": "already registered with name|name conflict.*GenServer|{:error, {:already_started, pid}}",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Use unique names or check if process exists before starting with name",
      "root_cause": "elixir_genserver_name_taken",
      "tags": [
        "elixir",
        "genserver",
        "name",
        "registration"
      ],
      "description": "Genserver Name Conflict"
    },
    {
      "id": "elixir_genserver_stop_callback_error",
      "category": "genserver",
      "type": "termination",
      "pattern": "error in terminate callback|GenServer .* terminate/2 failed|bad return from terminate",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "terminate/2 should handle cleanup gracefully and return any value",
      "root_cause": "elixir_genserver_terminate_error",
      "tags": [
        "elixir",
        "genserver",
        "terminate",
        "stop"
      ],
      "description": "Genserver Stop Callback"
    },
    {
      "id": "elixir_genserver_handle_continue",
      "category": "genserver",
      "type": "continuation",
      "pattern": "undefined handle_continue|{:continue, _} not handled|no handle_continue/2 clause",
      "confidence": "high",
      "reliability": "high",
      "severity": "high",
      "suggestion": "Implement handle_continue/2 when using {:ok, state, {:continue, term}}",
      "root_cause": "elixir_genserver_no_continue",
      "tags": [
        "elixir",
        "genserver",
        "continue",
        "callback"
      ],
      "description": "Genserver Handle Continue"
    },
    {
      "id": "elixir_genserver_hibernate_error",
      "category": "genserver",
      "type": "hibernation",
      "pattern": "hibernation failed|{:hibernate, _} invalid|cannot hibernate GenServer",
      "confidence": "low",
      "reliability": "low",
      "severity": "low",
      "suggestion": "Use hibernation carefully - ensure state can be reconstructed after GC",
      "root_cause": "elixir_genserver_hibernate",
      "tags": [
        "elixir",
        "genserver",
        "hibernate",
        "memory"
      ],
      "description": "Genserver Hibernate"
    },
    {
      "id": "elixir_genserver_code_change_failure",
      "category": "genserver",
      "type": "hot_upgrade",
      "pattern": "code_change/3 failed|hot code upgrade error|version mismatch in code_change",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "high",
      "suggestion": "Implement code_change/3 correctly for hot code upgrades",
      "root_cause": "elixir_genserver_code_change",
      "tags": [
        "elixir",
        "genserver",
        "upgrade",
        "code_change"
      ],
      "description": "Genserver Code Change Failure"
    },
    {
      "id": "elixir_genserver_call_to_self",
      "category": "genserver",
      "type": "deadlock",
      "pattern": "GenServer .* called itself|deadlock detected.*call to self|timeout.*calling self",
      "confidence": "high",
      "reliability": "high",
      "severity": "critical",
      "suggestion": "Avoid GenServer.call to self - will cause deadlock. Use cast or refactor logic",
      "root_cause": "elixir_genserver_self_call",
      "tags": [
        "elixir",
        "genserver",
        "deadlock",
        "self"
      ],
      "description": "Genserver Call To Self"
    },
    {
      "id": "elixir_genserver_multi_call_failure",
      "category": "genserver",
      "type": "multi_call",
      "pattern": "GenServer.multi_call failed|some nodes did not respond|{:ok, _} and {:error, _} in multi_call",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Handle partial failures in multi_call - some nodes may timeout",
      "root_cause": "elixir_genserver_multi_call",
      "tags": [
        "elixir",
        "genserver",
        "multi_call",
        "distributed"
      ],
      "description": "Genserver Multi Call Failure"
    },
    {
      "id": "elixir_genserver_via_tuple_error",
      "category": "genserver",
      "type": "via_registration",
      "pattern": "via tuple registration failed|{:via, _, _} error|Registry lookup failed for GenServer",
      "confidence": "medium",
      "reliability": "medium",
      "severity": "medium",
      "suggestion": "Ensure Registry or via module is started before GenServer with via tuple",
      "root_cause": "elixir_genserver_via_error",
      "tags": [
        "elixir",
        "genserver",
        "via",
        "registry"
      ],
      "description": "Genserver Via Tuple"
    },
    {
      "id": "elixir_genserver_format_status",
      "category": "genserver",
      "type": "debugging",
      "pattern": "format_status/2 error|sensitive data in crash report|GenServer state exposed",
      "confidence": "low",
      "reliability": "low",
      "severity": "medium",
      "suggestion": "Implement format_status/2 to sanitize state in error reports",
      "root_cause": "elixir_genserver_format_status",
      "tags": [
        "elixir",
        "genserver",
        "debug",
        "security"
      ],
      "description": "Genserver Format Status"
    }
  ],
  "name": "Genserver Advanced Errors"
}