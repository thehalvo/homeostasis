{
  "name": "Elixir Ecto Errors",
  "rules": [
    {
      "id": "ecto_changeset_error",
      "pattern": "\\*\\* \\(Ecto\\.([a-zA-Z]+)?ChangesetError\\) (.*)",
      "type": "Ecto.ChangesetError",
      "description": "Error with Ecto changeset operation",
      "root_cause": "ecto_changeset_error",
      "suggestion": "Check your changeset validations. Ensure the changeset is valid before attempting database operations by checking changeset.valid?.",
      "confidence": "high",
      "severity": "medium",
      "category": "ecto",
      "framework": "ecto"
    },
    {
      "id": "ecto_no_primary_key",
      "pattern": "\\*\\* \\(Ecto\\.NoPrimaryKeyValueError\\) (.*)",
      "type": "Ecto.NoPrimaryKeyValueError",
      "description": "Attempted operation on a record without a primary key",
      "root_cause": "ecto_no_primary_key",
      "suggestion": "Ensure the struct has a value for its primary key before operations like update, delete, or get. For new records, use insert instead of update.",
      "confidence": "high",
      "severity": "medium",
      "category": "ecto",
      "framework": "ecto"
    },
    {
      "id": "ecto_query_error",
      "pattern": "\\*\\* \\(Ecto\\.QueryError\\) (.*)",
      "type": "Ecto.QueryError",
      "description": "Invalid Ecto query",
      "root_cause": "ecto_query_error",
      "suggestion": "Check your Ecto query syntax. Ensure field names are correct and query expressions match field types. Use Repo.to_sql to debug complex queries.",
      "confidence": "high",
      "severity": "medium",
      "category": "ecto",
      "framework": "ecto"
    },
    {
      "id": "ecto_constraint_error",
      "pattern": "\\*\\* \\(Ecto\\.ConstraintError\\) (.*?)constraint: \"([^\"]+)\"",
      "type": "Ecto.ConstraintError",
      "description": "Database constraint violation",
      "root_cause": "ecto_constraint_error",
      "suggestion": "Check your database constraints and ensure your data meets them. Use the unique_constraint, foreign_key_constraint, etc. functions in your changeset to handle these gracefully.",
      "confidence": "high",
      "severity": "medium",
      "category": "ecto",
      "framework": "ecto"
    },
    {
      "id": "ecto_invalid_changeset",
      "pattern": "\\*\\* \\(RuntimeError\\) (.*?)could not perform (insert|update) because changeset is invalid(.*)",
      "type": "RuntimeError",
      "description": "Attempted to insert or update with an invalid changeset",
      "root_cause": "ecto_invalid_changeset",
      "suggestion": "Check changeset validity before attempting database operations. Use case with pattern matching on the changeset's valid? field or handle {:error, changeset} tuples properly.",
      "confidence": "high",
      "severity": "medium",
      "category": "ecto",
      "framework": "ecto"
    },
    {
      "id": "ecto_association_not_loaded",
      "pattern": "\\*\\* \\(Ecto\\.AssociationNotLoadedError\\) (.*)",
      "type": "Ecto.AssociationNotLoadedError",
      "description": "Attempted to access an association that wasn't preloaded",
      "root_cause": "ecto_association_not_loaded",
      "suggestion": "Use Repo.preload to load associations before accessing them, or include associations in your original query with join/preload.",
      "confidence": "high",
      "severity": "medium",
      "category": "ecto",
      "framework": "ecto"
    },
    {
      "id": "ecto_multiple_results_error",
      "pattern": "\\*\\* \\(Ecto\\.MultipleResultsError\\) (.*)",
      "type": "Ecto.MultipleResultsError",
      "description": "Multiple records found when one was expected",
      "root_cause": "ecto_multiple_results_error",
      "suggestion": "Check your query to ensure it's specific enough to return a single result. Use Repo.one! only when you're certain the query returns a single result, otherwise use Repo.all and handle multiple results.",
      "confidence": "high",
      "severity": "medium",
      "category": "ecto",
      "framework": "ecto"
    },
    {
      "id": "ecto_no_results_error",
      "pattern": "\\*\\* \\(Ecto\\.NoResultsError\\) (.*)",
      "type": "Ecto.NoResultsError",
      "description": "No records found when at least one was expected",
      "root_cause": "ecto_no_results_error",
      "suggestion": "Use Repo.get instead of Repo.get! or Repo.one instead of Repo.one! if you want to handle the no result case without exceptions. Consider using a case statement to handle both found and not found scenarios.",
      "confidence": "high",
      "severity": "medium",
      "category": "ecto",
      "framework": "ecto"
    },
    {
      "id": "ecto_stale_entry_error",
      "pattern": "\\*\\* \\(Ecto\\.StaleEntryError\\) (.*)",
      "type": "Ecto.StaleEntryError",
      "description": "Attempted to update or delete a stale entry",
      "root_cause": "ecto_stale_entry_error",
      "suggestion": "Add optimistic locking to your schema with :optimistic_lock. Always fetch the latest version of the record before updating it.",
      "confidence": "high",
      "severity": "medium",
      "category": "ecto",
      "framework": "ecto"
    },
    {
      "id": "ecto_invalid_repo_error",
      "pattern": "\\*\\* \\(ArgumentError\\) (.*?)is not a valid Ecto.Repo(.*)",
      "type": "ArgumentError",
      "description": "Attempted to use an invalid Ecto repository",
      "root_cause": "ecto_invalid_repo_error",
      "suggestion": "Check that you're using a valid Ecto.Repo module. Ensure the repository is correctly configured in your application.",
      "confidence": "high",
      "severity": "high",
      "category": "ecto",
      "framework": "ecto"
    },
    {
      "id": "ecto_migration_error",
      "pattern": "\\*\\* \\(Mix\\.Error\\) (.*?)could not start task \"ecto\\.migrate\"(.*)",
      "type": "Mix.Error",
      "description": "Error running Ecto migrations",
      "root_cause": "ecto_migration_error",
      "suggestion": "Check your migration files for syntax errors. Ensure your database is accessible and your repo is correctly configured.",
      "confidence": "high",
      "severity": "high",
      "category": "ecto",
      "framework": "ecto"
    },
    {
      "id": "ecto_unsupported_type_error",
      "pattern": "\\*\\* \\(Ecto\\.ParameterError\\) (.*?)expected a (.*?) but got (.*)",
      "type": "Ecto.ParameterError",
      "description": "Parameter type mismatch in Ecto query",
      "root_cause": "ecto_unsupported_type_error",
      "suggestion": "Ensure the types in your query match the schema field types. Use type casting like `^Decimal.new(\"123.45\")` for special types.",
      "confidence": "high",
      "severity": "medium",
      "category": "ecto",
      "framework": "ecto"
    },
    {
      "id": "ecto_schema_error",
      "pattern": "\\*\\* \\(RuntimeError\\) (.*?)schema (.*?) is not an Ecto schema(.*)",
      "type": "RuntimeError",
      "description": "Invalid Ecto schema",
      "root_cause": "ecto_schema_error",
      "suggestion": "Ensure your module defines a schema using `schema` macro and `use Ecto.Schema`.",
      "confidence": "high",
      "severity": "high",
      "category": "ecto",
      "framework": "ecto"
    },
    {
      "id": "ecto_sandbox_error",
      "pattern": "\\*\\* \\(DBConnection\\.OwnershipError\\) (.*?)cannot find ownership process(.*)",
      "type": "DBConnection.OwnershipError",
      "description": "Error with Ecto sandbox ownership",
      "root_cause": "ecto_sandbox_error",
      "suggestion": "Check your test setup for Ecto.Sandbox. Ensure you're checking out connections properly and tagging tests that need the sandbox.",
      "confidence": "high",
      "severity": "medium",
      "category": "ecto",
      "framework": "ecto"
    },
    {
      "id": "ecto_connection_error",
      "pattern": "\\*\\* \\(DBConnection\\.ConnectionError\\) (.*)",
      "type": "DBConnection.ConnectionError",
      "description": "Database connection error",
      "root_cause": "ecto_connection_error",
      "suggestion": "Check your database connection settings and ensure the database is running and accessible. Verify network connectivity to the database server.",
      "confidence": "high",
      "severity": "high",
      "category": "ecto",
      "framework": "ecto"
    }
  ]
}